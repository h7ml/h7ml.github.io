import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const e={},p=t(`<h1 id="使用-node-js-连接多种类型数据库" tabindex="-1"><a class="header-anchor" href="#使用-node-js-连接多种类型数据库"><span>使用 Node.js 连接多种类型数据库</span></a></h1><h2 id="关系对比" tabindex="-1"><a class="header-anchor" href="#关系对比"><span>关系对比</span></a></h2><table><thead><tr><th>数据库</th><th>驱动/模块</th><th>连接方式</th><th>优缺点</th></tr></thead><tbody><tr><td>MariaDB</td><td>mariadb</td><td>使用 <code>mariadb.createConnection()</code> 创建连接，或者使用 <code>mariadb.createPool()</code> 创建连接池</td><td>MariaDB 是 MySQL 的一个分支，与 MySQL 兼容。驱动程序相对较新，但已受到广泛认可和广泛使用。</td></tr><tr><td>MongoDB</td><td>mongodb</td><td>使用 <code>mongodb.MongoClient.connect()</code> 创建连接</td><td>MongoDB 是一个面向文档的 NoSQL 数据库，具有可伸缩性、灵活性和高速读写等特点。MongoDB Node.js 驱动程序是官方支持的，并且易于使用。</td></tr><tr><td>PostgreSQL</td><td>pg</td><td>使用 <code>new pg.Client()</code> 创建连接</td><td>PostgreSQL 是一个功能强大的关系型数据库，具有高度的稳定性和可靠性。pg 驱动程序是 Node.js 中最流行的 PostgreSQL 驱动程序之一。</td></tr><tr><td>Oracle</td><td>oracledb</td><td>使用 <code>oracledb.getConnection()</code> 创建连接</td><td>Oracle 是一个功能强大的关系型数据库，主要用于企业级应用程序。oracledb 驱动程序是官方支持的，并且具有很好的性能和可靠性。</td></tr><tr><td>Microsoft SQL Server</td><td>mssql</td><td>使用 <code>new mssql.ConnectionPool()</code> 创建连接池</td><td>Microsoft SQL Server 是一个功能强大的关系型数据库，主要用于企业级应用程序。mssql 驱动程序是 Node.js 中最流行的 Microsoft SQL Server 驱动程序之一。</td></tr><tr><td>Redis</td><td>ioredis</td><td>使用 <code>new Redis()</code> 创建连接</td><td>Redis 是一个内存数据结构存储系统，适用于需要快速读写和高并发的应用程序。ioredis 是一个支持 Redis 集群和复制功能的 Redis 驱动程序。</td></tr><tr><td>SQLite</td><td>better-sqlite3</td><td>使用 <code>better-sqlite3()</code> 创建连接</td><td>SQLite 是一个非常轻量级的嵌入式数据库，适用于小型项目。better-sqlite3 是官方 SQLite3 驱动程序的代替品，速度更快且易于使用。</td></tr><tr><td>Couchbase</td><td>couchbase</td><td>使用 <code>new couchbase.Cluster()</code> 创建连接</td><td>Couchbase 是一个面向文档的 NoSQL 数据库，适用于需要快速读写和高并发的应用程序。couchbase 驱动程序是官方支持的，并且具有很好的性能和可靠性。</td></tr><tr><td>Cassandra</td><td>cassandra-driver</td><td>使用 <code>new cassandra.Client()</code> 创建连接</td><td>Cassandra 是一个分布式的 NoSQL 数据库，适用于大规模数据存储和处理。cassandra-driver 是官方支持的驱动程序，并具有很好的性能和可靠性。</td></tr><tr><td>Neo4j</td><td>neo4j-driver</td><td>使用 <code>neo4j.driver()</code> 创建连接</td><td>Neo4j 是一个图形数据库，适用于需要处理高度连接数据的应用程序。neo4j-driver 是官方支持的 Node.js 驱动程序，并且易于使用。</td></tr><tr><td>ArangoDB</td><td>arangojs</td><td>使用 <code>new arangojs.Database()</code> 创建连接</td><td>ArangoDB 是一个多模型数据库（支持文档、图形和键值数据），适用于需要存储多种类型数据的应用程序。ArangoJS 是一个用于 Node.js 的 ArangoDB 驱动程序。</td></tr><tr><td>RethinkDB</td><td>rethinkdbdash</td><td>使用 <code>rethinkdbdash()</code> 创建连接</td><td>RethinkDB 是一个面向文档的 NoSQL 数据库，具有实时更新和可伸缩性等功能。它可以使用 RethinkDB 驱动程序或 rethinkdbdash。</td></tr></tbody></table><h2 id="typeorm" tabindex="-1"><a class="header-anchor" href="#typeorm"><span>typeorm</span></a></h2><p>TypeORM 是一个基于 TypeScript 的 ORM（对象关系映射）框架，它支持多种不同类型的数据库，包括 MySQL、PostgreSQL、SQLite、Microsoft SQL Server、Oracle 和 MongoDB 等。TypeORM 提供了一套简单易用的 API，让开发者可以使用面向对象的方式来管理数据库表格和数据。</p><h3 id="typeorm-具有以下特点" tabindex="-1"><a class="header-anchor" href="#typeorm-具有以下特点"><span>TypeORM 具有以下特点：</span></a></h3><ul><li>支持 TypeScript：TypeORM 是使用 TypeScript 编写的，因此可以充分利用 TypeScript 的强类型特性来避免很多潜在的错误。</li><li>支持多种数据库：除了传统的 SQL 数据库外，TypeORM 还支持 NoSQL 数据库 MongoDB。</li><li>易于使用：TypeORM 提供了一套简洁而易于理解的 API，使得开发者可以自然而然地使用面向对象的方式来操作数据库。</li><li>丰富的功能：TypeORM 不仅支持常见的 CRUD 操作，还提供了事务处理、迁移、查询构建器等丰富的功能。</li><li>可扩展性：TypeORM 支持插件机制，开发者可以编写自己的插件来扩展 TypeORM 的功能。</li></ul><p>在使用 TypeORM 时，开发者需要定义实体类来映射数据库表格。实体类需要继承 <code>BaseEntity</code> 类，并使用装饰器来标记属性与表格字段的映射关系。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码定义了一个名为 <code>User</code> 的实体类，用于映射数据库中的 <code>user</code> 表格。<code>@Entity()</code> 装饰器表示该类是一个实体类，<code>@PrimaryGeneratedColumn()</code> 装饰器表示 <code>id</code> 属性是主键，并使用自动增长方式生成值。<code>@Column()</code> 装饰器则表示该属性对应表格的一个字段。</p><p>在定义完实体类后，就可以使用 TypeORM 提供的 API 来进行数据库操作了。例如，要查询所有用户的信息，可以使用以下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TypeORM 还提供了很多其他的 API，包括添加、更新和删除数据等操作。总之，TypeORM 是一个功能强大、易于使用的 ORM 框架，适合用来开发各种类型的应用程序。</p><p>除了基本的 CRUD 操作外，TypeORM 还提供了一些高级功能，例如事务处理、查询构建器、关系映射等。</p><h4 id="事务处理" tabindex="-1"><a class="header-anchor" href="#事务处理"><span>事务处理</span></a></h4><p>在数据库操作中，有时需要执行多个操作，而这些操作必须要么全部成功，要么全部失败。这时就需要使用事务处理机制来实现。TypeORM 提供了 <code>EntityManager</code> 类来支持事务处理。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建 transaction</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>manager<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在事务中执行多个操作</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span>
  user<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">&#39;alice@example.com&#39;</span><span class="token punctuation">;</span>
  user<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  post<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;My new post&#39;</span><span class="token punctuation">;</span>
  post<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&#39;This is my first post&#39;</span><span class="token punctuation">;</span>
  post<span class="token punctuation">.</span>author <span class="token operator">=</span> user<span class="token punctuation">;</span>

  <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码演示了一个简单的事务处理例子。在一个事务中，我们创建了一个新用户和一篇新文章，并将作者与文章关联起来。如果任何一个操作失败，整个事务都会被回滚。可以注意到，在 <code>transaction</code> 方法中传入的是一个回调函数，这个函数接收一个 <code>EntityManager</code> 对象，可以使用这个对象来执行数据库操作。</p><h4 id="查询构建器" tabindex="-1"><a class="header-anchor" href="#查询构建器"><span>查询构建器</span></a></h4><p>TypeORM 的查询构建器提供了一种更加灵活的方式来构建查询语句，以便满足特定的查询需求。使用查询构建器，开发者可以将查询条件动态地构建成链式调用的方式。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRepository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;user.name = :name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">&#39;user.posts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;post.createdAt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DESC&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码演示了一个使用查询构建器来查询用户信息的例子。该例子中，我们首先创建了一个基于 <code>User</code> 实体的查询构建器，并使用 <code>where</code> 方法指定了查询条件，然后使用 <code>leftJoinAndSelect</code> 方法关联了用户和文章实体，并使用 <code>orderBy</code> 方法按照文章发布时间排序。最后，我们调用 <code>getMany()</code> 方法执行查询操作。</p><h4 id="关系映射" tabindex="-1"><a class="header-anchor" href="#关系映射"><span>关系映射</span></a></h4><p>在数据库中，有时需要处理多个实体之间的关系。比如，在上面的例子中，一个用户可以拥有多篇文章。TypeORM 提供了多种不同的关系映射方式来满足这种需求，包括一对一、一对多、多对一和多对多关系。</p><p>以下是一个简单的例子，演示了如何使用 TypeORM 来定义一对多关系：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">OneToMany</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Post<span class="token punctuation">,</span> <span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> post<span class="token punctuation">.</span>author<span class="token punctuation">)</span>
  posts<span class="token operator">:</span> Post<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ManyToOne</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>posts<span class="token punctuation">)</span>
  author<span class="token operator">:</span> User<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，我们使用 <code>@OneToMany</code> 和 <code>@ManyToOne</code> 装饰器来定义用户和文章之间的一对多关系。<code>@OneToMany</code> 装饰器表示一个用户可以拥有多篇文章，而 <code>@ManyToOne</code> 装饰器则表示每篇文章都有一个作者。</p><p>总之，TypeORM 是一个强大而灵活的 ORM 框架，支持多种不同类型的数据库，并提供了丰富的功能和易于使用的 API。无论是开发小型应用还是大型企业级应用，TypeORM 都是一个值得考虑的选择。</p><h2 id="安装-typeorm" tabindex="-1"><a class="header-anchor" href="#安装-typeorm"><span>安装 TypeORM</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> typeorm <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令会在当前项目中安装 TypeORM 依赖包，并将其添加到 <code>package.json</code> 文件的 <code>dependencies</code> 列表中。</p><p>另外，TypeORM 还需要相应数据库的驱动程序。例如，如果要使用 MySQL 数据库，需要安装 <code>mysql2</code> 包；如果要使用 PostgreSQL 数据库，需要安装 <code>pg</code> 包。以下是一些常用数据库的驱动程序依赖包：</p><ul><li>MySQL: <code>npm install mysql2 --save</code></li><li>PostgreSQL: <code>npm install pg --save</code></li><li>SQLite: <code>npm install sqlite3 --save</code></li><li>Microsoft SQL Server: <code>npm install mssql --save</code></li><li>Oracle: <code>npm install oracledb --save</code></li><li>MongoDB: <code>npm install mongodb --save</code></li></ul><p>安装完成后，就可以在代码中使用 TypeORM 了。为了方便配置 TypeORM，建议在项目根目录下创建一个 <code>ormconfig.json</code> 文件，用于存放数据库连接信息和其他相关配置。例如，以下是一个连接 MySQL 数据库的示例：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;host&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;database&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;synchronize&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;logging&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;entities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/entities/**/*.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;migrations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/migrations/**/*.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;subscribers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/subscribers/**/*.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cli&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;entitiesDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/entities&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;migrationsDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/migrations&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;subscribersDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/subscribers&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置文件中，我们指定了连接的数据库类型、主机地址、端口号、用户名、密码和数据库名称等信息。<code>synchronize</code> 属性表示 TypeORM 是否自动创建数据库表格以及更新表格结构，<code>logging</code> 属性表示是否输出日志信息，<code>entities</code>、<code>migrations</code> 和 <code>subscribers</code> 分别指定实体类、迁移文件和订阅者文件存放的位置。最后，<code>cli</code> 属性用于在命令行中使用 TypeORM CLI 工具时指定相关选项。</p><p>总之，安装 TypeORM 很简单，只需要执行一条命令即可。不过，要使用 TypeORM 还需要根据具体情况安装相应数据库的驱动程序，并在项目根目录下创建一个 <code>ormconfig.json</code> 文件来配置数据库连接信息和其他相关设置。</p><h2 id="使用-typeorm-封装通用连接方法" tabindex="-1"><a class="header-anchor" href="#使用-typeorm-封装通用连接方法"><span>使用 typeorm 封装通用连接方法</span></a></h2><p>以下是通用的 TypeScript 连接方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection<span class="token punctuation">,</span> ConnectionOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入实体类</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entities/user.entity&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entities/post.entity&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 从环境变量中获取数据库连接参数</span>
<span class="token keyword">const</span> connectionOptions<span class="token operator">:</span> ConnectionOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_TYPE</span><span class="token punctuation">,</span>
  host<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_HOST</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token operator">+</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_PORT</span><span class="token punctuation">,</span>
  username<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_USERNAME</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_PASSWORD</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_DATABASE</span><span class="token punctuation">,</span>
  entities<span class="token operator">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">,</span> Post<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 数据库实体数组</span>
  synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否自动同步数据库结构</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建连接</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createConnection</span><span class="token punctuation">(</span>connectionOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接成功后可以进行操作</span>
<span class="token keyword">const</span> userRepository <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个通用的 TypeORM 连接方法，适用于大多数关系型数据库。你只需要在环境变量中设置一些必要的连接参数，即可使用此方法连接到不同的数据库。</p><h2 id="对应不同数据库的连接方法" tabindex="-1"><a class="header-anchor" href="#对应不同数据库的连接方法"><span>对应不同数据库的连接方法</span></a></h2><p>以下是连接不同类型数据库的示例代码方法和对应的依赖包安装步骤，使用 TypeScript 的格式返回，配置文件从 <code>.env</code> 文件读取。</p><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> mysql2 dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mysql <span class="token keyword">from</span> <span class="token string">&#39;mysql2/promise&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  host<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_PASSWORD</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_DATABASE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to MySQL database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToMySQL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb"><span>MongoDB</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> mongoose dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mongoose <span class="token keyword">from</span> <span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  useUnifiedTopology<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  useCreateIndex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  useFindAndModify<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToMongoDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MONGODB_URI</span><span class="token punctuation">,</span> connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to MongoDB database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToMongoDB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql"><span>PostgreSQL</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> pg dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> pg <span class="token keyword">from</span> <span class="token string">&#39;pg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> pg<span class="token punctuation">.</span>ConnectionConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  host<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRESQL_HOST</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRESQL_PORT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRESQL_USER</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRESQL_PASSWORD</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRESQL_DATABASE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToPostgreSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pg</span><span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to PostgreSQL database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> client<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToPostgreSQL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="oracle" tabindex="-1"><a class="header-anchor" href="#oracle"><span>Oracle</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> oracledb dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> oracledb <span class="token keyword">from</span> <span class="token string">&#39;oracledb&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> oracledb<span class="token punctuation">.</span>ConnectionAttributes <span class="token operator">=</span> <span class="token punctuation">{</span>
  user<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ORACLE_USER</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ORACLE_PASSWORD</span><span class="token punctuation">,</span>
  connectString<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ORACLE_CONNECTION_STRING</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToOracle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> oracledb<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Oracle database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToOracle<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="microsoft-sql-server" tabindex="-1"><a class="header-anchor" href="#microsoft-sql-server"><span>Microsoft SQL Server</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> mssql dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mssql <span class="token keyword">from</span> <span class="token string">&#39;mssql&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> mssql<span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>
  user<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MSSQL_USER</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MSSQL_PASSWORD</span><span class="token punctuation">,</span>
  server<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MSSQL_SERVER</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MSSQL_DATABASE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToMSSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> mssql<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Microsoft SQL Server database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToMSSQL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> redis dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> redis <span class="token keyword">from</span> <span class="token string">&#39;redis&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> redis<span class="token punctuation">.</span>ClientOpts <span class="token operator">=</span> <span class="token punctuation">{</span>
  host<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">REDIS_HOST</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">REDIS_PORT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Redis database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> client<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToRedis<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sqlite" tabindex="-1"><a class="header-anchor" href="#sqlite"><span>SQLite</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> sqlite3 dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> sqlite3 <span class="token keyword">from</span> <span class="token string">&#39;sqlite3&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> open <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;sqlite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToSQLite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    filename<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SQLITE_FILENAME</span><span class="token punctuation">,</span>
    driver<span class="token operator">:</span> sqlite3<span class="token punctuation">.</span>Database<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to SQLite database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> db<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToSQLite<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="couchbase" tabindex="-1"><a class="header-anchor" href="#couchbase"><span>Couchbase</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> couchbase dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> couchbase <span class="token keyword">from</span> <span class="token string">&#39;couchbase&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">couchbase</span><span class="token punctuation">.</span><span class="token function">Cluster</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHBASE_HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cluster<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHBASE_USER</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHBASE_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToCouchbase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bucket <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">openBucket</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHBASE_BUCKET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bucket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Couchbase database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> bucket<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToCouchbase<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cassandra" tabindex="-1"><a class="header-anchor" href="#cassandra"><span>Cassandra</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> cassandra-driver dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cassandra-driver&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> ClientOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  contactPoints<span class="token operator">:</span> <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CASSANDRA_HOST</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  localDataCenter<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CASSANDRA_DATACENTER</span><span class="token punctuation">,</span>
  authProvider<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PlainTextAuthProvider</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CASSANDRA_USERNAME</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CASSANDRA_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToCassandra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Cassandra database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> client<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToCassandra<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="neo4j" tabindex="-1"><a class="header-anchor" href="#neo4j"><span>Neo4j</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> neo4j-driver dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> neo4j<span class="token punctuation">,</span> <span class="token punctuation">{</span> Driver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;neo4j-driver&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> neo4j<span class="token punctuation">.</span>Config <span class="token operator">=</span> <span class="token punctuation">{</span>
  uri<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEO4J_URI</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEO4J_DATABASE</span><span class="token punctuation">,</span>
  auth<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEO4J_USERNAME</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEO4J_PASSWORD</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToNeo4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Driver <span class="token punctuation">{</span>
  <span class="token keyword">const</span> driver <span class="token operator">=</span> neo4j<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>
    connectionConfig<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
    neo4j<span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>username<span class="token punctuation">,</span> connectionConfig<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>password<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Neo4j database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> driver<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToNeo4j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arangodb" tabindex="-1"><a class="header-anchor" href="#arangodb"><span>ArangoDB</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @arangodb/arangojs dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Database<span class="token punctuation">,</span> aql <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@arangodb/arangojs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ARANGODB_HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ARANGODB_PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  databaseName<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ARANGODB_DATABASE</span><span class="token punctuation">,</span>
  auth<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ARANGODB_USER</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ARANGODB_PASSWORD</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToArangoDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Database</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>username<span class="token punctuation">,</span> connectionConfig<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to ArangoDB database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> db<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToArangoDB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rethinkdb" tabindex="-1"><a class="header-anchor" href="#rethinkdb"><span>RethinkDB</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> rethinkdb dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> rethinkdb <span class="token keyword">from</span> <span class="token string">&#39;rethinkdb&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  host<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">RETHINKDB_HOST</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">RETHINKDB_PORT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  db<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">RETHINKDB_DATABASE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToRethinkDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> rethinkdb<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to RethinkDB database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToRethinkDB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="couchdb" tabindex="-1"><a class="header-anchor" href="#couchdb"><span>CouchDB</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> <span class="token function">nano</span> dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> nano <span class="token keyword">from</span> <span class="token string">&#39;nano&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHDB_HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHDB_PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  auth<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHDB_USER</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHDB_PASSWORD</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToCouchDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">nano</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">COUCHDB_DATABASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to CouchDB database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> db<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToCouchDB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="firebase" tabindex="-1"><a class="header-anchor" href="#firebase"><span>Firebase</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> firebase-admin dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> admin <span class="token keyword">from</span> <span class="token string">&#39;firebase-admin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> serviceAccount <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FIREBASE_SERVICE_ACCOUNT_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

admin<span class="token punctuation">.</span><span class="token function">initializeApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  credential<span class="token operator">:</span> admin<span class="token punctuation">.</span>credential<span class="token punctuation">.</span><span class="token function">cert</span><span class="token punctuation">(</span>serviceAccount<span class="token punctuation">)</span><span class="token punctuation">,</span>
  databaseURL<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FIREBASE_DATABASE_URL</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connectToFirebase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to Firebase database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> admin<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToFirebase<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mariadb" tabindex="-1"><a class="header-anchor" href="#mariadb"><span>MariaDB</span></a></h3><p><strong>依赖包：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> mariadb dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mariadb <span class="token keyword">from</span> <span class="token string">&#39;mariadb&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connectionConfig<span class="token operator">:</span> mariadb<span class="token punctuation">.</span>PoolConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  host<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MARIADB_HOST</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MARIADB_PORT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MARIADB_USER</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MARIADB_PASSWORD</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MARIADB_DATABASE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToMariaDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pool <span class="token operator">=</span> mariadb<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span>connectionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to MariaDB database&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> connectToMariaDB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在使用以上代码前，需要先在 <code>.env</code> 文件中设置对应的环境变量。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MYSQL_HOST=localhost
MYSQL_USER=root
MYSQL_PASSWORD=password
MYSQL_DATABASE=testdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例中连接 MySQL 数据库时，使用的是 <code>mysql2</code> 包，因此需要安装该包。<code>.env</code> 文件中设置的参数包括主机地址、用户名、密码和数据库名称。在连接数据库时，这些参数将从 <code>.env</code> 文件中读取。</p><p>以上提供了连接不同类型数据库的示例代码方法和对应的依赖包安装步骤，都使用 TypeScript 的格式返回，并从 <code>.env</code> 文件读取配置文件。</p>`,122),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","Database.html.vue"]]),k=JSON.parse(`{"path":"/posts/fullStackTale/Database.html","title":"使用 Node.js 连接多种类型数据库","lang":"zh-CN","frontmatter":{"icon":"mysql","description":"本文介绍了如何使用 Node.js 连接多种不同类型的数据库，包括 MySQL、MongoDB、PostgreSQL、Oracle、Microsoft SQL Server、Redis、SQLite、Couchbase、Cassandra、Neo4j、ArangoDB、RethinkDB、CouchDB、Firebase 和 MariaDB，并提供了相应的示例代码和依赖包安装步骤。","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>在 Node.js 中连接 MySQL、MongoDB 和 PostgreSQL","order":3,"star":3,"date":"2024-04-10T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["Node.js","MySQL","MongoDB","PostgreSQL"],"tag":["数据库连接","Node.js"],"shortTitle":"使用 Node.js 连接多种类型数据库","head":[["meta",{"name":"keywords","content":"数据库, Node.js, MySQL, MongoDB, PostgreSQL, Oracle, Microsoft SQL Server, Redis, SQLite, Couchbase, Cassandra, Neo4j, ArangoDB, RethinkDB, CouchDB, Firebase, 示例代码, 依赖包, 配置文件, 环境变量"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/fullStackTale/Database.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/fullStackTale/Database.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"使用 Node.js 连接多种类型数据库"}],["meta",{"property":"og:description","content":"本文介绍了如何使用 Node.js 连接多种不同类型的数据库，包括 MySQL、MongoDB、PostgreSQL、Oracle、Microsoft SQL Server、Redis、SQLite、Couchbase、Cassandra、Neo4j、ArangoDB、RethinkDB、CouchDB、Firebase 和 MariaDB，并提供了相应的示例代码和依赖包安装步骤。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"使用 Node.js 连接多种类型数据库"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"数据库连接"}],["meta",{"property":"article:tag","content":"Node.js"}],["meta",{"property":"article:published_time","content":"2024-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 Node.js 连接多种类型数据库\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2024-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"关系对比","slug":"关系对比","link":"#关系对比","children":[]},{"level":2,"title":"typeorm","slug":"typeorm","link":"#typeorm","children":[{"level":3,"title":"TypeORM 具有以下特点：","slug":"typeorm-具有以下特点","link":"#typeorm-具有以下特点","children":[]}]},{"level":2,"title":"安装 TypeORM","slug":"安装-typeorm","link":"#安装-typeorm","children":[]},{"level":2,"title":"使用 typeorm 封装通用连接方法","slug":"使用-typeorm-封装通用连接方法","link":"#使用-typeorm-封装通用连接方法","children":[]},{"level":2,"title":"对应不同数据库的连接方法","slug":"对应不同数据库的连接方法","link":"#对应不同数据库的连接方法","children":[{"level":3,"title":"MySQL","slug":"mysql","link":"#mysql","children":[]},{"level":3,"title":"MongoDB","slug":"mongodb","link":"#mongodb","children":[]},{"level":3,"title":"PostgreSQL","slug":"postgresql","link":"#postgresql","children":[]},{"level":3,"title":"Oracle","slug":"oracle","link":"#oracle","children":[]},{"level":3,"title":"Microsoft SQL Server","slug":"microsoft-sql-server","link":"#microsoft-sql-server","children":[]},{"level":3,"title":"Redis","slug":"redis","link":"#redis","children":[]},{"level":3,"title":"SQLite","slug":"sqlite","link":"#sqlite","children":[]},{"level":3,"title":"Couchbase","slug":"couchbase","link":"#couchbase","children":[]},{"level":3,"title":"Cassandra","slug":"cassandra","link":"#cassandra","children":[]},{"level":3,"title":"Neo4j","slug":"neo4j","link":"#neo4j","children":[]},{"level":3,"title":"ArangoDB","slug":"arangodb","link":"#arangodb","children":[]},{"level":3,"title":"RethinkDB","slug":"rethinkdb","link":"#rethinkdb","children":[]},{"level":3,"title":"CouchDB","slug":"couchdb","link":"#couchdb","children":[]},{"level":3,"title":"Firebase","slug":"firebase","link":"#firebase","children":[]},{"level":3,"title":"MariaDB","slug":"mariadb","link":"#mariadb","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":12.98,"words":3895},"filePathRelative":"posts/fullStackTale/Database.md","localizedDate":"2024年4月10日","excerpt":"\\n<h2>关系对比</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>数据库</th>\\n<th>驱动/模块</th>\\n<th>连接方式</th>\\n<th>优缺点</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>MariaDB</td>\\n<td>mariadb</td>\\n<td>使用 <code>mariadb.createConnection()</code> 创建连接，或者使用 <code>mariadb.createPool()</code> 创建连接池</td>\\n<td>MariaDB 是 MySQL 的一个分支，与 MySQL 兼容。驱动程序相对较新，但已受到广泛认可和广泛使用。</td>\\n</tr>\\n<tr>\\n<td>MongoDB</td>\\n<td>mongodb</td>\\n<td>使用 <code>mongodb.MongoClient.connect()</code> 创建连接</td>\\n<td>MongoDB 是一个面向文档的 NoSQL 数据库，具有可伸缩性、灵活性和高速读写等特点。MongoDB Node.js 驱动程序是官方支持的，并且易于使用。</td>\\n</tr>\\n<tr>\\n<td>PostgreSQL</td>\\n<td>pg</td>\\n<td>使用 <code>new pg.Client()</code> 创建连接</td>\\n<td>PostgreSQL 是一个功能强大的关系型数据库，具有高度的稳定性和可靠性。pg 驱动程序是 Node.js 中最流行的 PostgreSQL 驱动程序之一。</td>\\n</tr>\\n<tr>\\n<td>Oracle</td>\\n<td>oracledb</td>\\n<td>使用 <code>oracledb.getConnection()</code> 创建连接</td>\\n<td>Oracle 是一个功能强大的关系型数据库，主要用于企业级应用程序。oracledb 驱动程序是官方支持的，并且具有很好的性能和可靠性。</td>\\n</tr>\\n<tr>\\n<td>Microsoft SQL Server</td>\\n<td>mssql</td>\\n<td>使用 <code>new mssql.ConnectionPool()</code> 创建连接池</td>\\n<td>Microsoft SQL Server 是一个功能强大的关系型数据库，主要用于企业级应用程序。mssql 驱动程序是 Node.js 中最流行的 Microsoft SQL Server 驱动程序之一。</td>\\n</tr>\\n<tr>\\n<td>Redis</td>\\n<td>ioredis</td>\\n<td>使用 <code>new Redis()</code> 创建连接</td>\\n<td>Redis 是一个内存数据结构存储系统，适用于需要快速读写和高并发的应用程序。ioredis 是一个支持 Redis 集群和复制功能的 Redis 驱动程序。</td>\\n</tr>\\n<tr>\\n<td>SQLite</td>\\n<td>better-sqlite3</td>\\n<td>使用 <code>better-sqlite3()</code> 创建连接</td>\\n<td>SQLite 是一个非常轻量级的嵌入式数据库，适用于小型项目。better-sqlite3 是官方 SQLite3 驱动程序的代替品，速度更快且易于使用。</td>\\n</tr>\\n<tr>\\n<td>Couchbase</td>\\n<td>couchbase</td>\\n<td>使用 <code>new couchbase.Cluster()</code> 创建连接</td>\\n<td>Couchbase 是一个面向文档的 NoSQL 数据库，适用于需要快速读写和高并发的应用程序。couchbase 驱动程序是官方支持的，并且具有很好的性能和可靠性。</td>\\n</tr>\\n<tr>\\n<td>Cassandra</td>\\n<td>cassandra-driver</td>\\n<td>使用 <code>new cassandra.Client()</code> 创建连接</td>\\n<td>Cassandra 是一个分布式的 NoSQL 数据库，适用于大规模数据存储和处理。cassandra-driver 是官方支持的驱动程序，并具有很好的性能和可靠性。</td>\\n</tr>\\n<tr>\\n<td>Neo4j</td>\\n<td>neo4j-driver</td>\\n<td>使用 <code>neo4j.driver()</code> 创建连接</td>\\n<td>Neo4j 是一个图形数据库，适用于需要处理高度连接数据的应用程序。neo4j-driver 是官方支持的 Node.js 驱动程序，并且易于使用。</td>\\n</tr>\\n<tr>\\n<td>ArangoDB</td>\\n<td>arangojs</td>\\n<td>使用 <code>new arangojs.Database()</code> 创建连接</td>\\n<td>ArangoDB 是一个多模型数据库（支持文档、图形和键值数据），适用于需要存储多种类型数据的应用程序。ArangoJS 是一个用于 Node.js 的 ArangoDB 驱动程序。</td>\\n</tr>\\n<tr>\\n<td>RethinkDB</td>\\n<td>rethinkdbdash</td>\\n<td>使用 <code>rethinkdbdash()</code> 创建连接</td>\\n<td>RethinkDB 是一个面向文档的 NoSQL 数据库，具有实时更新和可伸缩性等功能。它可以使用 RethinkDB 驱动程序或 rethinkdbdash。</td>\\n</tr>\\n</tbody>\\n</table>"}`);export{d as comp,k as data};
