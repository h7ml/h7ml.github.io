import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const e={},p=t(`<h1 id="javascript-number-数字对象-数据类型" tabindex="-1"><a class="header-anchor" href="#javascript-number-数字对象-数据类型"><span>JavaScript Number 数字对象-数据类型</span></a></h1><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment">// 整数</span>

<span class="token comment">// 八进制字面量，第一个数字必须是零（0），然后是相应的八进制数字（数值0~7）</span>
<span class="token keyword">let</span> octalNum1 <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment">// 八进制的56</span>
<span class="token keyword">let</span> octalNum2 <span class="token operator">=</span> <span class="token number">079</span><span class="token punctuation">;</span> <span class="token comment">// 无效的八进制值，当成79 处理</span>
<span class="token keyword">let</span> octalNum3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span> <span class="token comment">// 无效的八进制值，当成8 处理</span>

<span class="token comment">// 十六进制字面量，必须让真正的数值前缀0x（区分大小写），然后是十六进制数字（0~9 以及A~F）</span>
<span class="token keyword">let</span> hexNum1 <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制10</span>
<span class="token keyword">let</span> hexNum2 <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>浮点值</li></ul><p>科学记数法的格式跟一个大写或小写的字母 e，再加上一个要乘的 10 的多少次幂，浮点值的精确度最高可达 17 位小数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> floatNum3 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token comment">// 有效，但不推荐</span>
<span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 小数点后面没有数字，当成整数1 处理</span>
<span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span> <span class="token comment">// 小数点后面是零，当成整数10 处理</span>
<span class="token keyword">let</span> floatNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment">// 等于31250000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;10&#39;</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 进制转换</span>

num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留几位小数，最大 20 位小数</span>
num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.0e+1 科学计数法</span>
<span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
num1<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1e+2 向上舍入为 100</span>
num1<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99</span>
num1<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NaN</li></ul><p>分子是非 0 值，分母是有符号 0 或无符号 0，则会返回 Infinity 或-Infinity</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>isNaN 首先会调用对象的 valueOf() 方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 toString() 方法，并测试其返回值</p><h2 id="number-isfinite" tabindex="-1"><a class="header-anchor" href="#number-isfinite"><span>Number.isFinite()</span></a></h2><ul><li>没有隐式的 Number() 类型转换，所有非数值都返回 false</li><li>检查一个数值是否为有限的（ finite ），即不是 Infinity</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 不是有限的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="number-isinteger" tabindex="-1"><a class="header-anchor" href="#number-isinteger"><span>Number.isInteger()</span></a></h2><ul><li>判断一个数是不是整数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// JavaScript 内部，整数和浮点数采用的是同样的储存方法,因此 1 与 1.0 被视为相同的值</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数值转换" tabindex="-1"><a class="header-anchor" href="#数值转换"><span>数值转换</span></a></h2><ul><li>null，返回 0。</li><li>undefined，返回 NaN。</li><li>字符串： <ul><li>Number(&quot;1&quot;)返回 1，Number(&quot;123&quot;)返回 123，Number(&quot;011&quot;)返回 11</li><li>浮点数同样忽略前面的 0</li><li>16 进制转换为对应的 10 进制整数值</li></ul></li><li>对象，调用 valueOf()方法，再执行上面的规则。如果是 NaN，则调用 toString()方法，再按照字符串的规则转换。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;000011&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
<span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseInt() <ul><li>字符串最前面的空格会被忽略</li><li>第一个字符不是数值、加号或减号，立即返回 NaN</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;1234blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;0xA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10，解释为十六进制整数</span>
<span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">22.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>
<span class="token keyword">let</span> num5 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;70&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 70，解释为十进制值</span>
<span class="token keyword">let</span> num6 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;0xf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15，解释为十六进制整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseInt()也接收第二个参数，指定进制数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;0xAF&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 175</span>
<span class="token comment">// 提供了十六进制参数，那么字符串前面的&quot;0x&quot;可以省掉：</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;AF&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 175</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，按二进制解析</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8，按八进制解析</span>
<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10，按十进制解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseFloat 解析到一个无效的浮点数值字符为止 <ul><li>始终忽略字符串开头的零</li><li>十六进制数值始终会返回 0，因为 parseFloat() 只解析十进制值</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;1234blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234，按整数解析</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;0xA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;22.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22.5</span>
<span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;22.34.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22.34</span>
<span class="token keyword">let</span> num5 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;0908.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 908.5</span>
<span class="token keyword">let</span> num6 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;3.125e7&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 31250000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","Number.html.vue"]]),m=JSON.parse('{"path":"/posts/javascript/types/Number.html","title":"JavaScript Number 数字对象-数据类型","lang":"zh-CN","frontmatter":{"description":"JavaScript Number 数字对象-数据类型 浮点值 科学记数法的格式跟一个大写或小写的字母 e，再加上一个要乘的 10 的多少次幂，浮点值的精确度最高可达 17 位小数 方法 NaN 分子是非 0 值，分母是有符号 0 或无符号 0，则会返回 Infinity 或-Infinity isNaN 首先会调用对象的 valueOf() 方法，然...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/types/Number.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/types/Number.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript Number 数字对象-数据类型"}],["meta",{"property":"og:description","content":"JavaScript Number 数字对象-数据类型 浮点值 科学记数法的格式跟一个大写或小写的字母 e，再加上一个要乘的 10 的多少次幂，浮点值的精确度最高可达 17 位小数 方法 NaN 分子是非 0 值，分母是有符号 0 或无符号 0，则会返回 Infinity 或-Infinity isNaN 首先会调用对象的 valueOf() 方法，然..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript Number 数字对象-数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\",\\"url\\":\\"https://www.h7ml.cn\\"}]}"]]},"headers":[{"level":2,"title":"Number.isFinite()","slug":"number-isfinite","link":"#number-isfinite","children":[]},{"level":2,"title":"Number.isInteger()","slug":"number-isinteger","link":"#number-isinteger","children":[]},{"level":2,"title":"数值转换","slug":"数值转换","link":"#数值转换","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":3.1,"words":929},"filePathRelative":"posts/javascript/types/Number.md","localizedDate":"2023年5月3日","excerpt":"\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> intNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">55</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 整数</span>\\n\\n<span class=\\"token comment\\">// 八进制字面量，第一个数字必须是零（0），然后是相应的八进制数字（数值0~7）</span>\\n<span class=\\"token keyword\\">let</span> octalNum1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">070</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 八进制的56</span>\\n<span class=\\"token keyword\\">let</span> octalNum2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">079</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 无效的八进制值，当成79 处理</span>\\n<span class=\\"token keyword\\">let</span> octalNum3 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">08</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 无效的八进制值，当成8 处理</span>\\n\\n<span class=\\"token comment\\">// 十六进制字面量，必须让真正的数值前缀0x（区分大小写），然后是十六进制数字（0~9 以及A~F）</span>\\n<span class=\\"token keyword\\">let</span> hexNum1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0xa</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 十六进制10</span>\\n<span class=\\"token keyword\\">let</span> hexNum2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0x1f</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 十六进制31</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,m as data};
