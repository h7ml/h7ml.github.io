import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const p={},e=t(`<h1 id="javascript-string-字符串对象-数据类型" tabindex="-1"><a class="header-anchor" href="#javascript-string-字符串对象-数据类型"><span>JavaScript String 字符串对象-数据类型</span></a></h1><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;\\u03a3&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">// 转义序列表示一个字符，所以只算一个字符。如果包含双节字符可能导致 length 不准确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串是不可变的，一旦创建，值就不能变了。字符串的方法都是返回新的值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> lang <span class="token operator">=</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">;</span>
lang <span class="token operator">=</span> lang <span class="token operator">+</span> <span class="token string">&#39;Script&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>刚开始 lang 包含字符串&quot;Java&quot;，接着，lang 被重新定义为包含&quot;Java&quot;和&quot;Script&quot;的组合&quot;JavaScript&quot;。整个过程首先会分配一个足够容纳 10 个字符的空间，然后填充上&quot;Java&quot;和&quot;Script&quot;。最后销毁原始的字符串&quot;Java&quot;和字符串&quot;Script&quot;，所有处理都是在后台发生的。</p><h2 id="转换为字符串" tabindex="-1"><a class="header-anchor" href="#转换为字符串"><span>转换为字符串</span></a></h2><p>几乎所有值都有的 toString()方法，字符串 toString()方法只是简单地返回自身的一个副本，null 和 undefined 值没有</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ageAsString <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串&quot;11&quot;</span>
<span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foundAsString <span class="token operator">=</span> found<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串&quot;true&quot;</span>

<span class="token comment">// 参数为进制数，默认10进制</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1010&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;12&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>String()</li></ul><p>因为 null 和 undefined 没有 toString()方法，就直接返回了字面量文本。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value4<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意用加号操作符给一个值加上一个空字符串&quot;&quot;也可以将其转换为字符串 :::</p><h2 id="取值" tabindex="-1"><a class="header-anchor" href="#取值"><span>取值</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回下标</span>
str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 返回下标</span>
str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回下标对应Unicode编码</span>
String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;ac&#39; 返回对应Unicode码对应字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="截取" tabindex="-1"><a class="header-anchor" href="#截取"><span>截取</span></a></h2><ul><li>不会对原始字符串修改，返回值的副本</li><li>只有一个参数，截取到字符结束</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>起始下标，结束下标 -1</li><li>起始大于结束，会互换</li><li>起始为负数，默认变 0</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>起始下标，结束下标-1</li><li>起始大于结束，不换位，返回空字符串</li><li>出现负值，为倒数 = length + 负数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>起始下标，截取位数</li><li>出现负值，为倒数 = length + 负数</li></ol><h2 id="位置查询" tabindex="-1"><a class="header-anchor" href="#位置查询"><span>位置查询</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查询字符下标 没有返回 -1</span>
str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从末尾查询 下标还是从左开始 没有返回 -1</span>
str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下标 6 开始查询</span>
str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下标 3 向下标 0 倒序搜</span>
str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下标 0 开始查找 indexOf 但可以传正则</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分隔-拼接" tabindex="-1"><a class="header-anchor" href="#分隔-拼接"><span>分隔/拼接</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 分隔</span>
str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;，&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 参数 1：以“,”分隔 返回数组，可以传正则</span>
<span class="token comment">// 参数 2：可选，返回数组的 length，后面多余的不会有</span>

<span class="token comment">// 拼接</span>
str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编辑-替换" tabindex="-1"><a class="header-anchor" href="#编辑-替换"><span>编辑/替换</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除前后的空格，中间的空格不会删除，返回副本</span>

<span class="token comment">// replace：查找字符，要替换字符</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;at&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;oo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// coo, bat, sat  只会替换第一个</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;oo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// coo, boo, soo  全局替换要正则表达式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="大小写转换" tabindex="-1"><a class="header-anchor" href="#大小写转换"><span>大小写转换</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// AAA  BB 大写</span>
str<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// AAA  BB 大写</span>
str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa  bb 小写</span>
str<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa  bb 小写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带 Locale 是针对地区的转换，Unicode 码可能存在不同，如土耳其地区需要对应的特殊规则才能转换，所以最好使用地区特定的转换方法。</p><h2 id="uri-编码方法" tabindex="-1"><a class="header-anchor" href="#uri-编码方法"><span>URI 编码方法</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com /&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://www.baidu.com%20/（只有空格替换成 %20）</span>
<span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com /&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https%3A%2F%2Fwww.baidu.com%20%2F （除字母数字符号，替换成对应的编码）</span>
<span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu%23.com%20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://www.baidu%23.com ( %20 会变成空格，%23 是 decodeURIComponent 的字符不会被转换  )</span>
<span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://www.baidu#.com （所有的字符变成原来的，但这个字符不是一个有效的 URL）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eval" tabindex="-1"><a class="header-anchor" href="#eval"><span>eval()</span></a></h2><ul><li>解析字符串 js 代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;function hi(){console.log(&#39;hi&#39;);}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eval 可以将字符串直接当做完整的 js 代码解析运行</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;var a = &#39;hello world&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会有变量提升，因为包含在字符串中，只有 eval 运行的时候才会被解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当开启严格模式后 eval 会存在作用域</p></div></div><h2 id="localecompare" tabindex="-1"><a class="header-anchor" href="#localecompare"><span>localeCompare()</span></a></h2><ul><li>比较字符串在字母表的前后</li><li>在前面返回 1</li><li>在后面返回 -1</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;brick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
str<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
str<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;zoo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

<span class="token comment">// 姓名比较 sort姓名排序</span>
<span class="token string">&#39;张&#39;</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;啊&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 张Z 的字母表 在 啊A 的后面</span>

<span class="token comment">// 中文的比较方法 ---- 可以比较任何文字</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;武丽昕&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;汤文博&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;卢文博&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">58</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;付秋萍&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">79</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 中文名 进行排序</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;zh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","String.html.vue"]]),d=JSON.parse(`{"path":"/posts/javascript/types/String.html","title":"JavaScript String 字符串对象-数据类型","lang":"zh-CN","frontmatter":{"description":"JavaScript String 字符串对象-数据类型 字符串是不可变的，一旦创建，值就不能变了。字符串的方法都是返回新的值。 刚开始 lang 包含字符串\\"Java\\"，接着，lang 被重新定义为包含\\"Java\\"和\\"Script\\"的组合\\"JavaScript\\"。整个过程首先会分配一个足够容纳 10 个字符的空间，然后填充上\\"Java\\"和\\"Scrip...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/types/String.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/types/String.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript String 字符串对象-数据类型"}],["meta",{"property":"og:description","content":"JavaScript String 字符串对象-数据类型 字符串是不可变的，一旦创建，值就不能变了。字符串的方法都是返回新的值。 刚开始 lang 包含字符串\\"Java\\"，接着，lang 被重新定义为包含\\"Java\\"和\\"Script\\"的组合\\"JavaScript\\"。整个过程首先会分配一个足够容纳 10 个字符的空间，然后填充上\\"Java\\"和\\"Scrip..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript String 字符串对象-数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\",\\"url\\":\\"https://www.h7ml.cn\\"}]}"]]},"headers":[{"level":2,"title":"转换为字符串","slug":"转换为字符串","link":"#转换为字符串","children":[]},{"level":2,"title":"localeCompare()","slug":"localecompare","link":"#localecompare","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":3.84,"words":1152},"filePathRelative":"posts/javascript/types/String.md","localizedDate":"2023年5月3日","excerpt":"\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token string\\">'\\\\u03a3'</span><span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 1</span>\\n<span class=\\"token comment\\">// 转义序列表示一个字符，所以只算一个字符。如果包含双节字符可能导致 length 不准确</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
