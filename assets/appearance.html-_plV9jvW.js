import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,d as n,e as s,a as t,f as p}from"./app-Cbix2SPG.js";const l={},u=p(`<h1 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h1><p>网络请求中，我们一般使用 <code>axios</code> 库，支持用 <code>Promise</code> 风格调用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>axios
  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token constant">ID</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

axios
  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
    <span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;wind&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;liang&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到上边的 <code>get</code> 和 <code>post</code> 传参并不统一，使用起来会比较繁琐，<code>post</code> 还需要手动传递 <code>headers</code> 。</p><p>为了解决这些问题，我们可以通过外观（门面）模式来解决。</p><h1 id="外观-门面-模式" tabindex="-1"><a class="header-anchor" href="#外观-门面-模式"><span>外观（门面）模式</span></a></h1>`,6),r={href:"https://en.wikipedia.org/wiki/Facade_pattern",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"facade pattern",-1),d=n("em",null,"façade",-1),m={href:"https://en.wikipedia.org/wiki/Software_design_pattern",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Object-oriented_programming",target:"_blank",rel:"noopener noreferrer"},g={href:"https://en.wikipedia.org/wiki/Facade",target:"_blank",rel:"noopener noreferrer"},b={href:"https://en.wikipedia.org/wiki/Object_(computer_science)",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>外观模式相当于为一个相对复杂的接口或者结构提供一个上层接口供用户使用，看一下 <code>UML</code> 类图。</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220215084348154.png" alt="image-20220215084348154" tabindex="0" loading="lazy"><figcaption>image-20220215084348154</figcaption></figure><p>举一个简单例子，比如开电脑是一个复杂的过程，我们可以封装成一个函数来实现：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* Complex parts */</span>

<span class="token keyword">class</span> <span class="token class-name">CPU</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token parameter">long position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Memory</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">long position<span class="token punctuation">,</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HardDrive</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">long lba<span class="token punctuation">,</span> int size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Façade */</span>

<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cpu<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  memory<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token constant">BOOT_ADDRESS</span><span class="token punctuation">,</span> hardDrive<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token constant">BOOT_SECTOR</span><span class="token punctuation">,</span> <span class="token constant">SECTOR_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpu<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token constant">BOOT_ADDRESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpu<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Client */</span>

<span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Computer facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  facade<span class="token punctuation">.</span><span class="token function">startComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改写成 <code>js</code> 。</p><p>算了不改写了，哈哈，直白点其实就是把几个函数封装到了一个函数来调用。</p><p><code>UML</code> 类图中外观模式会和很多 <code>class</code> 交互，但在 <code>js</code> 中可能会很少遇到这种情况，通常是当参数比较复杂或者某个功能使用起来比较麻烦的时候我们就可以通过外观模式进行简化。</p><h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h1><p>回到开头 <code>axios</code> 的问题，我们可以对 <code>axios</code> 进行一层封装。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// request.js</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>params <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后引用 <code>request.js</code> 进行调用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> get<span class="token punctuation">,</span> post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./request&#39;</span><span class="token punctuation">;</span>

<span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token constant">ID</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;wind&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;liang&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>补充一句：上边的封装只是为了演示外观模式的使用，实际项目中封装的会更加全面</em></p><p>通过门面模式除了简化了我们的调用，还有一个好处就是将底层调用封装了起来，未来如果底层需要变化，比如上边的 <code>axios</code> 替换为 <code>fetch</code> ，我们只需要去修改 <code>request.js</code> 即可，业务方无需感知。</p><h1 id="更多场景" tabindex="-1"><a class="header-anchor" href="#更多场景"><span>更多场景</span></a></h1><p>外观模式说的宽泛的话就是将复杂的调用包装一层变的简单些。</p><p>我们平时用到的 <code>Vue</code> 的 <code>template</code> 、<code>React</code> 的 <code>jsx</code> ，也可以认为使用了外观模式，他们都将底层 <code>dom</code> 创建封装起来，使得我们编写页面会变得更加简单。</p><h1 id="易混设计模式" tabindex="-1"><a class="header-anchor" href="#易混设计模式"><span>易混设计模式</span></a></h1>`,18),f={href:"https://www.h7ml.cn/designPattern/proxy.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.h7ml.cn/designPattern/adapter.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.h7ml.cn/designPattern/template.html",target:"_blank",rel:"noopener noreferrer"},_=n("ul",null,[n("li",null,"适配器模式是为了解决两个对象之间不匹配的问题，而原对象又不适合直接修改，此时可以使用适配器模式进行一层转换。"),n("li",null,"代理模式是为了增强原对象的功能，提供的接口不会改变。"),n("li",null,"模版模式是将不同功能组合在一起，只提供框架，具体实现还需要调用者传进来。"),n("li",null,"外观模式是将比较复杂的调用进行一层封装，提供一个新的接口供用户使用。")],-1),x=n("h1",{id:"总",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总"},[n("span",null,"总")])],-1),j=n("p",null,"外观模式是一个比较自然的设计模式，某个功能感觉用起来太麻烦还频繁，自然会想到去封装一层再来使用。",-1),T=n("p",null,"外观模式一个额外好处就是未来能够更好的应对底层的变化。",-1);function P(C,N){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("看下 "),n("a",r,[s("维基百科"),t(a)]),s(" 的定义。")]),n("blockquote",null,[n("p",null,[s("The "),k,s(" (also spelled "),d,s(") is a "),n("a",m,[s("software-design pattern"),t(a)]),s(" commonly used in "),n("a",v,[s("object-oriented programming"),t(a)]),s(". Analogous to a "),n("a",g,[s("facade"),t(a)]),s(" in architecture, a facade is an "),n("a",b,[s("object"),t(a)]),s(" that serves as a front-facing interface masking more complex underlying or structural code.")])]),h,n("p",null,[s("前边讲到的 "),n("a",f,[s("代理模式"),t(a)]),s("、"),n("a",y,[s("适配器模式"),t(a)]),s("、"),n("a",w,[s("模版方法"),t(a)]),s(" 结构上和外观模式看起来都有些像，区别就在于他们的意图不同：")]),_,x,j,T])}const S=e(l,[["render",P],["__file","appearance.html.vue"]]),E=JSON.parse(`{"path":"/posts/designPattern/appearance.html","title":"外观模式","lang":"zh-CN","frontmatter":{"title":"外观模式","category":["设计模式","frontend"],"tag":["设计模式","frontend"],"author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","date":"2022-02-14T08:15:00.000Z","description":"场景 网络请求中，我们一般使用 axios 库，支持用 Promise 风格调用。 可以看到上边的 get 和 post 传参并不统一，使用起来会比较繁琐，post 还需要手动传递 headers 。 为了解决这些问题，我们可以通过外观（门面）模式来解决。 外观（门面）模式 看下 维基百科 的定义。 The facade pattern (also s...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/designPattern/appearance.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/designPattern/appearance.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"外观模式"}],["meta",{"property":"og:description","content":"场景 网络请求中，我们一般使用 axios 库，支持用 Promise 风格调用。 可以看到上边的 get 和 post 传参并不统一，使用起来会比较繁琐，post 还需要手动传递 headers 。 为了解决这些问题，我们可以通过外观（门面）模式来解决。 外观（门面）模式 看下 维基百科 的定义。 The facade pattern (also s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"外观模式"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:published_time","content":"2022-02-14T08:15:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外观模式\\",\\"image\\":[\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220215084348154.png\\"],\\"datePublished\\":\\"2022-02-14T08:15:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":3.48,"words":1044},"filePathRelative":"posts/designPattern/appearance.md","localizedDate":"2022年2月14日","excerpt":"\\n<p>网络请求中，我们一般使用 <code>axios</code> 库，支持用 <code>Promise</code> 风格调用。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>axios\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/api/user'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">params</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token constant\\">ID</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'123'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">response</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">error</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\naxios\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">'/api/user'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">firstName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'wind'</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">lastName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'liang'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">headers</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">'Content-Type'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'application/json'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">response</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">error</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{S as comp,E as data};
