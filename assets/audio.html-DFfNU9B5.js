import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,f as i}from"./app-Cbix2SPG.js";const t={},r=i('<h1 id="javascript-audio-音频-api" tabindex="-1"><a class="header-anchor" href="#javascript-audio-音频-api"><span>JavaScript audio 音频 API</span></a></h1><h2 id="标签相关属性" tabindex="-1"><a class="header-anchor" href="#标签相关属性"><span>标签相关属性</span></a></h2><ul><li>src：要播放的音频/视频的 URL</li><li>controls：显示音频/视频播放控件</li><li>loop：音频/视频结束后重新播放</li><li>muted：音频/视频静音</li></ul><h2 id="只读属性" tabindex="-1"><a class="header-anchor" href="#只读属性"><span>只读属性</span></a></h2><ul><li>duration：文件的播放时长，单位 s，无法获取则 NaN，当触发 canplay 事件后可以获取</li><li>paused：是否暂停，返回 true/false</li><li>ended：是否播放完毕 true/false</li><li>error：发现错误后返回错误代码</li><li>currentSrc：返回字符串形式正在播放或已加载文件，对应浏览器 source 元素中选择的文件</li><li>buffered：获取当前缓冲区大小，返回 TimeRanges 对象</li></ul><h2 id="可控制属性" tabindex="-1"><a class="header-anchor" href="#可控制属性"><span>可控制属性</span></a></h2><ul><li>src：指定音频文件位置</li><li>autoplay：是否自动播放</li><li>preload：是否预加载</li><li>loop：是否循环播放</li><li>controls：显示/隐藏用户控制界面</li><li>muted：设置是否静音</li><li>volume：当前音量值，0-1 之间</li><li>currentTime：返回/设置当前播放的时间，单位 s</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><ul><li>load()：加载视频、音频软件</li><li>play()：播放</li><li>pause()：暂停</li><li>canPlayType(obj)：测试播放后指定的 Mime 类型文件</li></ul><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><ul><li>loadstart：客户端开始请求数据</li><li>progress：正在播放的时候不停触发，暂停不会触发，触发事件间隔较大</li><li>play：play() 和 autoplay 时触发，类似 onplaying</li><li>pause：pause() 方法时触发</li><li>ended：结束播放时触发</li><li>timeupdate：播放时间发生改变时触发，暂停不触发，触发事件间隔较小</li><li>canplaythrough：歌曲载入完成</li><li>canplay：缓存至可播放状态，类似事件 onloadedmetadata</li><li>onloadedmetadata：当元数据（如分辨率和时长）被加载时触发</li></ul>',11),o=[r];function n(s,c){return a(),e("div",null,o)}const u=l(t,[["render",n],["__file","audio.html.vue"]]),h=JSON.parse('{"path":"/posts/javascript/media/audio.html","title":"JavaScript audio 音频 API","lang":"zh-CN","frontmatter":{"description":"JavaScript audio 音频 API 标签相关属性 src：要播放的音频/视频的 URL controls：显示音频/视频播放控件 loop：音频/视频结束后重新播放 muted：音频/视频静音 只读属性 duration：文件的播放时长，单位 s，无法获取则 NaN，当触发 canplay 事件后可以获取 paused：是否暂停，返回 tr...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/media/audio.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/media/audio.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript audio 音频 API"}],["meta",{"property":"og:description","content":"JavaScript audio 音频 API 标签相关属性 src：要播放的音频/视频的 URL controls：显示音频/视频播放控件 loop：音频/视频结束后重新播放 muted：音频/视频静音 只读属性 duration：文件的播放时长，单位 s，无法获取则 NaN，当触发 canplay 事件后可以获取 paused：是否暂停，返回 tr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript audio 音频 API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\",\\"url\\":\\"https://www.h7ml.cn\\"}]}"]]},"headers":[{"level":2,"title":"标签相关属性","slug":"标签相关属性","link":"#标签相关属性","children":[]},{"level":2,"title":"只读属性","slug":"只读属性","link":"#只读属性","children":[]},{"level":2,"title":"可控制属性","slug":"可控制属性","link":"#可控制属性","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":1.34,"words":401},"filePathRelative":"posts/javascript/media/audio.md","localizedDate":"2023年5月3日","excerpt":"\\n<h2>标签相关属性</h2>\\n<ul>\\n<li>src：要播放的音频/视频的 URL</li>\\n<li>controls：显示音频/视频播放控件</li>\\n<li>loop：音频/视频结束后重新播放</li>\\n<li>muted：音频/视频静音</li>\\n</ul>\\n<h2>只读属性</h2>\\n<ul>\\n<li>duration：文件的播放时长，单位 s，无法获取则 NaN，当触发 canplay 事件后可以获取</li>\\n<li>paused：是否暂停，返回 true/false</li>\\n<li>ended：是否播放完毕 true/false</li>\\n<li>error：发现错误后返回错误代码</li>\\n<li>currentSrc：返回字符串形式正在播放或已加载文件，对应浏览器 source 元素中选择的文件</li>\\n<li>buffered：获取当前缓冲区大小，返回 TimeRanges 对象</li>\\n</ul>","autoDesc":true}');export{u as comp,h as data};
