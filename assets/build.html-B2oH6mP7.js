import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,d as s,e as n,a as t,f as e}from"./app-Cbix2SPG.js";const i={},u=e(`<h1 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h1><p>如果我们定义了某个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token parameter">size<span class="token punctuation">,</span> type<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这个函数很稳定那没什么问题，但如果经常变动，比如新增参数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token parameter">size<span class="token punctuation">,</span> type<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> discount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们如果想继续使用 <code>price</code> 的默认值，调用的时候还必须显性的传 <code>undefined</code>，<code>getPhone(4.3, &#39;iOS&#39;, &#39;OLED&#39;, undefined, 0.8)</code>。</p><p>如果再增加一个带默认值的参数，就会看起来越来越怪。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPhone</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> type<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> discount<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这个函数在很多地方都调用过，改的时候还需要保证修改后其他地方传参是正常的。</p><p>此时可以借助建造者模式的思想去改造它。</p><h1 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式"><span>建造者模式</span></a></h1>`,11),r={href:"https://en.wikipedia.org/wiki/Builder_pattern",target:"_blank",rel:"noopener noreferrer"},k=s("strong",null,"builder pattern",-1),d={href:"https://en.wikipedia.org/wiki/Software_design_pattern",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Object-oriented_programming",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Separation_of_concerns",target:"_blank",rel:"noopener noreferrer"},b={href:"https://en.wikipedia.org/wiki/Design_Patterns",target:"_blank",rel:"noopener noreferrer"},g=e('<p>建造者模式属于创建型设计模式，也就是为了生成对象。它将复杂的创建过程从构造函数分离出来，然后就可以在不改变原有构造函数的基础上，创建各种各样的对象。</p><p><code>GoF</code> 书中提供的做法就是新创建一个 <code>Builder</code> 类，对象的创建委托给 <code>Builder</code> 类，原始的类不做操作，只负责调用即可。</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220225075740520.png" alt="image-20220225075740520" tabindex="0" loading="lazy"><figcaption>image-20220225075740520</figcaption></figure><p><code>Director</code> 类在构造函数中持有一个 <code>Builder</code> 实例，然后调用 <code>Builder</code> 类的 <code>buildPart</code> 和 <code>getResult</code> 即可创建对象。未来有新的对象需要创建的话，只需要实现新的 <code>Builder</code> 类即可，无需修改 <code>Director</code> 实例。</p><p>原始的建造者模式把对象的创建完全抽离到了 <code>Builder</code> 类中，这可能会导致原始类没啥用了，也许我们可以不全部抽离，<code>Builder</code> 类只负责接收参数即可。</p>',5),w={href:"http://gk.link/a/11c3G",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourcePoolConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_TOTAL</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_IDLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MIN_IDLE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_TOTAL</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_IDLE</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MIN_IDLE</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> maxTotal<span class="token punctuation">,</span> <span class="token class-name">Integer</span> maxIdle<span class="token punctuation">,</span> <span class="token class-name">Integer</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name should not be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxTotal should be positive.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>maxTotal <span class="token operator">=</span> maxTotal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxIdle should not be negative.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdle <span class="token operator">=</span> maxIdle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;minIdle should not be negative.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>minIdle <span class="token operator">=</span> minIdle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...省略getter方法...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的 <code>ResourcePoolConfig</code> 类构造函数需要 <code>4</code> 个参数，如果经常变动，未来可能会越来越多，代码的可读性和易用性都会变差。因此这里可以用到建造者模式，但这里的建造者模式只用来传递参数，其他的逻辑还是维持在 <code>ResourcePoolConfig</code> 类中不变。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourcePoolConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxTotal <span class="token operator">=</span> builder<span class="token punctuation">.</span>maxTotal<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdle <span class="token operator">=</span> builder<span class="token punctuation">.</span>maxIdle<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>minIdle <span class="token operator">=</span> builder<span class="token punctuation">.</span>minIdle<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...省略getter方法...</span>

  <span class="token comment">//我们将Builder类设计成了ResourcePoolConfig的内部类。</span>
  <span class="token comment">//我们也可以将Builder类设计成独立的非内部类ResourcePoolConfigBuilder。</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_TOTAL</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_IDLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MIN_IDLE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_TOTAL</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_IDLE</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MIN_IDLE</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ResourcePoolConfig</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 校验逻辑放到这里来做，包括必填项校验、依赖关系校验、约束条件校验等</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">&gt;</span> maxTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">&gt;</span> maxTotal <span class="token operator">||</span> minIdle <span class="token operator">&gt;</span> maxIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>maxTotal <span class="token operator">=</span> maxTotal<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdle <span class="token operator">=</span> maxIdle<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token keyword">int</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>minIdle <span class="token operator">=</span> minIdle<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这段代码会抛出IllegalArgumentException，因为minIdle&gt;maxIdle</span>
<span class="token class-name">ResourcePoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePoolConfig<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;dbconnectionpool&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话我们可以通过 <code>ResourcePoolConfig.Builder()</code> 来设置参数，将生成的参数对象传递给 <code>ResourcePoolConfig</code> 类的构造函数即可。</p><p>这里可以看作是变种的建造者模式，我们不是创建不同的 <code>Builder</code> 类来创建对象，而是给 <code>Builder</code> 类传递不同的参数来创建不同的对象。</p><h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h1><p><em>这里也只讨论变种的建造者模式。</em></p><p>在 <code>js</code> 中，我们同样可以照猫画虎的引入一个 <code>Builer</code> 类来接受参数，然后将创建参数对象传递给原始类。</p><p>但之所以在 <code>Java</code> 中引入新的 <code>Builder</code> 类是因为 <code>Java</code> 只能通过类来创建对象，但在 <code>js</code> 中我们是可以通过字面量来创建对象的，并且 <code>ES6</code> 还提供了对象的解构语法，会让我们使用起来更加简洁。</p><p>我们只需要将参数列表聚合为一个对象，然后通过解构取参数即可。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token parameter">size<span class="token punctuation">,</span> type<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> discount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;screen&#39;</span><span class="token punctuation">,</span> screen<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;discount&#39;</span><span class="token punctuation">,</span> discount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要改成：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">{</span> size<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;iOS&#39;</span><span class="token punctuation">,</span> screen <span class="token operator">=</span> <span class="token string">&#39;OLED&#39;</span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> discount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;screen&#39;</span><span class="token punctuation">,</span> screen<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;discount&#39;</span><span class="token punctuation">,</span> discount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">discount</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;android&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只需要传递需要的参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的写法可以很方便的设置默认值，并且参数的顺序也不再重要，未来再扩展的时候也不需要太担心其他地方调用时候传参是否会引起问题。</p><p>注意一下参数列表中 <code>{...} = {}</code> 后边的大括号最好写一下，不然如果用户调用函数的时候什么都没有传，解构就会直接失败了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">{</span> size<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;iOS&#39;</span><span class="token punctuation">,</span> screen <span class="token operator">=</span> <span class="token string">&#39;OLED&#39;</span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> discount <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;screen&#39;</span><span class="token punctuation">,</span> screen<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;discount&#39;</span><span class="token punctuation">,</span> discount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220225083640409.png" alt="image-20220225083640409" tabindex="0" loading="lazy"><figcaption>image-20220225083640409</figcaption></figure><h1 id="更多场景" tabindex="-1"><a class="header-anchor" href="#更多场景"><span>更多场景</span></a></h1><p>通过对象来传递参数除了用在函数中以外，设计组件的时候，如果组件的参数会经常变动，并且越来越多，我们不妨引入一个 <code>Object</code> 类型的参数，然后将相关的参数内聚到 <code>Object</code> 中进行传递。</p><h1 id="总" tabindex="-1"><a class="header-anchor" href="#总"><span>总</span></a></h1><p>原始的建造者模式不清楚有没有实际应用，目前还没遇到，未来有的话再补充吧。</p><p>变种的建造者模式（只传递参数）在 <code>js</code> 中也很简单，直接通过对象传递参数即可。</p>`,22);function h(f,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("看下 "),s("a",r,[n("维基百科"),t(a)]),n(" 给的定义：")]),s("blockquote",null,[s("p",null,[n("The "),k,n(" is a "),s("a",d,[n("design pattern"),t(a)]),n(" designed to provide a flexible solution to various object creation problems in "),s("a",m,[n("object-oriented programming"),t(a)]),n(". The intent of the Builder design pattern is to "),s("a",v,[n("separate"),t(a)]),n(" the construction of a complex object from its representation. It is one of the "),s("a",b,[n("Gang of Four design patterns"),t(a)]),n(".")])]),g,s("p",null,[s("em",null,[n("以下示例来自极客时间的 "),s("a",w,[n("设计模式之美"),t(a)])])]),y])}const T=p(i,[["render",h],["__file","build.html.vue"]]),j=JSON.parse(`{"path":"/posts/designPattern/build.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"title":"建造者模式","category":["设计模式","frontend"],"tag":["设计模式","frontend"],"author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","date":"2022-02-24T08:42:00.000Z","description":"场景 如果我们定义了某个函数： 如果这个函数很稳定那没什么问题，但如果经常变动，比如新增参数。 此时我们如果想继续使用 price 的默认值，调用的时候还必须显性的传 undefined，getPhone(4.3, 'iOS', 'OLED', undefined, 0.8)。 如果再增加一个带默认值的参数，就会看起来越来越怪。 如果这个函数在很多地方...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/designPattern/build.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/designPattern/build.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"场景 如果我们定义了某个函数： 如果这个函数很稳定那没什么问题，但如果经常变动，比如新增参数。 此时我们如果想继续使用 price 的默认值，调用的时候还必须显性的传 undefined，getPhone(4.3, 'iOS', 'OLED', undefined, 0.8)。 如果再增加一个带默认值的参数，就会看起来越来越怪。 如果这个函数在很多地方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"建造者模式"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:published_time","content":"2022-02-24T08:42:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220225075740520.png\\",\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220225083640409.png\\"],\\"datePublished\\":\\"2022-02-24T08:42:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":5.42,"words":1626},"filePathRelative":"posts/designPattern/build.md","localizedDate":"2022年2月24日","excerpt":"\\n<p>如果我们定义了某个函数：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">getPhone</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">size<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> screen<span class=\\"token punctuation\\">,</span> price<span class=\\"token operator\\">=</span><span class=\\"token number\\">100</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token operator\\">...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{T as comp,j as data};
