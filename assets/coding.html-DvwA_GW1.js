import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as k,d as n,e as s,a,w as e,f as p}from"./app-Cbix2SPG.js";const d={},m=p(`<h3 id="new-运算符" tabindex="-1"><a class="header-anchor" href="#new-运算符"><span>new 运算符</span></a></h3><div class="hint-container tip"><p class="hint-container-title">new 运算符原理</p><ol><li>创建一个全新的对象</li><li>为新创建的对象添加 <strong><code>__proto__</code></strong> 属模拟实现 new 运算符性并指向构造函数的原型对象</li><li>将新创建的对象作为函数调用的 this</li><li>如果构造函数没有返回对象类型，则返回新创建的对象</li></ol></div><details class="hint-container details"><summary>模拟实现 new 运算符</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取构造函数</span>
  <span class="token keyword">const</span> Constructor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 创建空对象并设置原型</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 绑定 this 并执行构造函数</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回构造函数显示返回的值或新对象</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> result<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,3),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/mqyqingfeng/Blog/issues/13",target:"_blank",rel:"noopener noreferrer"},y=p(`<h3 id="instanceof-运算符" tabindex="-1"><a class="header-anchor" href="#instanceof-运算符"><span>instanceof 运算符</span></a></h3><div class="hint-container tip"><p class="hint-container-title">instanceof 运算符原理 \`instanceof\` 运算符用于检测构造函数的 \`prototype\` 属性是否出现在某个实例对象的原型链上</p></div><details class="hint-container details"><summary>模拟实现 instanceof 运算符</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 取右边构造函数的 prototype 值</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> prototype <span class="token punctuation">}</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
  <span class="token comment">// 取左边实例的 __proto__ 值</span>
  left <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当左边实例的 __proto__ 为 null 时返回 false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断左右两边的原型是否一致</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 修改 __proto__</span>
    left <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,3),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),g={href:"https://juejin.cn/post/6844903613584654344#heading-1",target:"_blank",rel:"noopener noreferrer"},w=p(`<h3 id="object-create" tabindex="-1"><a class="header-anchor" href="#object-create"><span>Object.create()</span></a></h3><div class="hint-container tip"><p class="hint-container-title">Object.create() \`Object.create()\` 方法创建一个新对象，使用现有的对象来提供新创建的对象的 \`__proto__\` :::</p><details class="hint-container details"><summary>模拟实现 Object.create()</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">proto<span class="token punctuation">,</span> properties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果 proto 不是 null 或非原始包装对象，抛出 TypeError 异常</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> proto<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Object prototype may only be an Object or null: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proto<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 将 proto 的原型设置为 F 的原型</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span>
  <span class="token comment">// 创建新对象</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 兼容 null 的处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// OR Reflect.setPrototypeOf(result, null)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将 properties 的属性设置到新对象上</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> properties <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div>`,2),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create",target:"_blank",rel:"noopener noreferrer"},j=n("h3",{id:"function-prototype-call",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-prototype-call"},[n("span",null,"Function.prototype.call()")])],-1),x=n("p",null,[n("code",null,"call()"),s(" 方法使用一个指定的 "),n("code",null,"this"),s(" 值和单独给出的一个或多个参数来调用一个函数")],-1),O=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token class-name"},"Function"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"myCall"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("context"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("args")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 在非严格模式下，传入的 context 为 null 或 undefined 时会自动替换为全局对象"),s(`
  `),n("span",{class:"token comment"},"// 因此在判断时不能使用 context = context || window"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("context "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context `),n("span",{class:"token operator"},"="),s(" window"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 原始值需要被 Object 包装成对象"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Object"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  context`),n("span",{class:"token punctuation"},"."),s("fn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 获取 fn 函数调用的返回值"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" result "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),s("args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"delete"),s(" context"),n("span",{class:"token punctuation"},"."),s("fn"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"params"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(" params"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},"'这是返回值'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'h7ml'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"call :>> "),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'call'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"myCall :>> "),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),s(" get"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"myCall"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'myCall'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token class-name"},"Function"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"myCall"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"context"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 在非严格模式下，传入的 context 为 null 或 undefined 时会自动替换为全局对象"),s(`
  `),n("span",{class:"token comment"},"// 因此在判断时不能使用 context = context || window"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("context "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context `),n("span",{class:"token operator"},"="),s(" window"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 原始值需要被 Object 包装成对象"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Object"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},"// 获取调用 call 的函数"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("fn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 获取传入的参数"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" args "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// arguments 是类数组对象，可以使用 for 循环"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"var"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" len "),n("span",{class:"token operator"},"="),s(" arguments"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    args`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'arguments['"),s(),n("span",{class:"token operator"},"+"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},"']'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token doc-comment comment"},`/**
   * 获取 fn 函数调用的返回值
   * 此时 args 为 ['arguments[1]', 'arguments[2]', 'arguments[3]']
   * 但在执行时 args 会自动调用 Array.toString() 转化为 context.fn(arguments[1], arguments[2], arguments[3])
   **/`),s(`
  `),n("span",{class:"token keyword"},"var"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'context.fn('"),s(),n("span",{class:"token operator"},"+"),s(" args "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 删除 fn 函数"),s(`
  `),n("span",{class:"token keyword"},"delete"),s(" context"),n("span",{class:"token punctuation"},"."),s("fn"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 将 fn 函数的返回值返回"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/mqyqingfeng/Blog/issues/11",target:"_blank",rel:"noopener noreferrer"},z=n("h3",{id:"function-prototype-apply",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-prototype-apply"},[n("span",null,"Function.prototype.apply()")])],-1),T=n("p",null,[n("code",null,"apply()"),s(" 方法调用一个具有给定 "),n("code",null,"this"),s(" 值的函数，以及以一个数组（或类数组对象）的形式提供的参数")],-1),S=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},"/** ES5 实现 **/"),s(`
`),n("span",{class:"token class-name"},"Function"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"myApply"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("context"),n("span",{class:"token punctuation"},","),s(" arr")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 在非严格模式下，传入的 context 为 null 或 undefined 时会自动替换为全局对象"),s(`
  `),n("span",{class:"token comment"},"// 因此在判断时不能使用 context = context || window"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("context "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context `),n("span",{class:"token operator"},"="),s(" window"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 原始值需要被 Object 包装成对象"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Object"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},"// 获取调用 apply 的函数"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("fn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 获取 fn 函数调用的返回值"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 获取传入的参数"),s(`
    `),n("span",{class:"token keyword"},"var"),s(" args "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"var"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" len "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      args`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'arr['"),s(),n("span",{class:"token operator"},"+"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},"']'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    result `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'context.fn('"),s(),n("span",{class:"token operator"},"+"),s(" args "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 没有参数直接调用"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    result `),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},"// 删除 fn 函数"),s(`
  `),n("span",{class:"token keyword"},"delete"),s(" context"),n("span",{class:"token punctuation"},"."),s("fn"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 将 fn 的返回值返回"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/mqyqingfeng/Blog/issues/11",target:"_blank",rel:"noopener noreferrer"},B=n("h3",{id:"function-prototype-bind",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-prototype-bind"},[n("span",null,"Function.prototype.bind()")])],-1),D=n("p",null,[n("code",null,"bind()"),s(" 方法创建一个新的函数，在 "),n("code",null,"bind()"),s(" 被调用时，这个新函数的 "),n("code",null,"this"),s(" 被指定为 "),n("code",null,"bind()"),s(" 的第一个参数，而其余参数将作为新函数的参数供调用时使用。")],-1),q=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},"/** ES5 实现 **/"),s(`
`),n("span",{class:"token class-name"},"Function"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"myBind"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"context"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(),n("span",{class:"token keyword"},"this"),s(),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'function'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'not a function'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},"// 获取调用 bind 的函数"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" self "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 获取除了 thisArg 外的剩余参数（第二个到最后一个）"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" args "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("arguments"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"fNOP"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"fBound"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 获取返回函数的参数"),s(`
    `),n("span",{class:"token keyword"},"var"),s(" bindArgs "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("arguments"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"self"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"apply"),n("span",{class:"token punctuation"},"("),s(`
      `),n("span",{class:"token comment"},"// 当作为构造函数时，将绑定函数的 this 实例指向实例"),s(`
      `),n("span",{class:"token comment"},"// 当作为普通函数时，将绑定函数的 this 指向 context"),s(`
      `),n("span",{class:"token keyword"},"this"),s(),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"fNOP"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token keyword"},"this"),s(),n("span",{class:"token operator"},":"),s(" context"),n("span",{class:"token punctuation"},","),s(`
      args`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"concat"),n("span",{class:"token punctuation"},"("),s("bindArgs"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 存在原型时，修改返回函数的 prototype 为绑定函数的 prototype，使实例可以继承绑定函数原型中的值"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" prototype "),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("prototype"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    fNOP`),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(" prototype"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  fBound`),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"fNOP"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" fBound"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/mqyqingfeng/Blog/issues/12",target:"_blank",rel:"noopener noreferrer"},R={href:"https://zhuanlan.zhihu.com/p/25379434",target:"_blank",rel:"noopener noreferrer"},E={href:"https://zhuanlan.zhihu.com/p/25483361",target:"_blank",rel:"noopener noreferrer"},W=p(`<h2 id="工具方法系列" tabindex="-1"><a class="header-anchor" href="#工具方法系列"><span>工具方法系列</span></a></h2><h3 id="debounce-函数防抖" tabindex="-1"><a class="header-anchor" href="#debounce-函数防抖"><span>debounce 函数防抖</span></a></h3><div class="hint-container tip"><p class="hint-container-title">函数防抖 **作用**: 一个函数在一段时间内多次触发都**只执行最后一次** <br> **原理**: 利用定时器，在函数第一次执行时设定一个定时器，再次调用时如果已经设定过定时器就清空之前的定时器并设定一个新的定时器，当定时器结束后执行传入的回调函数 <br> **应用**: 搜索输入框获取用户输入的联想结果 :::</p><details class="hint-container details"><summary>实现防抖函数</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过闭包缓存定时器 id</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果定时器已经存在，清除定时器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设定定时器，定时器结束后执行传入的回调函数 fn</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div><h3 id="throttle-函数节流" tabindex="-1"><a class="header-anchor" href="#throttle-函数节流"><span>throttle 函数节流</span></a></h3><div class="hint-container tip"><p class="hint-container-title">函数节流 **作用**: 函数节流指指的是在一段时间内只允许函数执行一次 (例如 \`3\` 秒执行一次那么在函数第一次调用后的 \`3\` 秒内后面的函数调用将被忽略) <br> **原理**: 利用时间戳来判断，记录上次执行的时间戳，在每次触发事件时判断当前时间是否大于上次执行的时间 + 设置的间隔 ，如果是则执行回调并更新上次执行的时间戳<br> **应用**: 降低 \`scroll resize\` 事件的触发频率</p></div><details class="hint-container details"><summary>实现节流函数</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过闭包缓存上一次的调用时间 (默认为 0)</span>
  <span class="token keyword">let</span> lastCallTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断当前调用时间和上次调用时间的差值是否大于 wait</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastCallTime <span class="token operator">&gt;=</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新调用时间</span>
      lastCallTime <span class="token operator">=</span> now<span class="token punctuation">;</span>
      <span class="token comment">// 执行回调函数</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,6);function Z(G,V){const t=i("ExternalLinkIcon"),l=i("CodeTabs");return r(),k("div",null,[m,n("ul",null,[n("li",null,[n("a",v,[s("new 运算符 —— MDN"),a(t)])]),n("li",null,[n("a",b,[s("JavaScript 深入之 new 的模拟实现"),a(t)])])]),y,n("ul",null,[n("li",null,[n("a",f,[s("instanceof 运算符 —— MDN"),a(t)]),h]),n("li",null,[n("a",g,[s("instanceof 操作符的实现原理"),a(t)])])]),w,n("p",null,[n("a",_,[s("Object.create() —— MDN"),a(t)])]),j,x,a(l,{id:"79",data:[{id:"es6"},{id:"es6"}],"tab-id":"shell 模拟实现 Function.prototype.call()"},{title0:e(({value:o,isActive:c})=>[s("es6")]),title1:e(({value:o,isActive:c})=>[s("es6")]),tab0:e(({value:o,isActive:c})=>[O]),tab1:e(({value:o,isActive:c})=>[N]),_:1}),n("ul",null,[n("li",null,[n("a",C,[s("Function.prototype.call() —— MDN"),a(t)])]),n("li",null,[n("a",F,[s("JavaScript 深入之 call 和 apply 的模拟实现"),a(t)])])]),z,T,a(l,{id:"105",data:[{id:"es5"}],"tab-id":"模拟实现 Function.prototype.apply()"},{title0:e(({value:o,isActive:c})=>[s("es5")]),tab0:e(({value:o,isActive:c})=>[S]),_:1}),n("ul",null,[n("li",null,[n("a",A,[s("Function.prototype.apply() —— MDN"),a(t)])]),n("li",null,[n("a",J,[s("JavaScript 深入之 call 和 apply 的模拟实现"),a(t)])])]),B,D,a(l,{id:"129",data:[{id:"es5"}],"tab-id":"模拟实现 Function.prototype.bind()"},{title0:e(({value:o,isActive:c})=>[s("es5")]),tab0:e(({value:o,isActive:c})=>[q]),_:1}),n("ul",null,[n("li",null,[n("a",M,[s("Function.prototype.bind() —— MDN"),a(t)])]),n("li",null,[s("相关学习文章 "),n("ul",null,[n("li",null,[n("a",P,[s("JavaScript 深入之 bind 的模拟实现"),a(t)])]),n("li",null,[n("a",R,[s("从一道面试题的进阶，到“我可能看了假源码”"),a(t)])]),n("li",null,[n("a",E,[s("从一道面试题的进阶，到“我可能看了假源码”（2）"),a(t)])])])])]),W])}const $=u(d,[["render",Z],["__file","coding.html.vue"]]),H=JSON.parse(`{"path":"/posts/coding/coding.html","title":"编程题","lang":"zh-CN","frontmatter":{"icon":"code","order":1,"date":"2021-03-20T00:00:00.000Z","author":"h7ml","category":"es6","tag":"es6","title":"编程题","star":true,"description":"new 运算符 new 运算符原理 创建一个全新的对象 为新创建的对象添加 __proto__ 属模拟实现 new 运算符性并指向构造函数的原型对象 将新创建的对象作为函数调用的 this 如果构造函数没有返回对象类型，则返回新创建的对象 模拟实现 new 运算符 new 运算符 —— MDN JavaScript 深入之 new 的模拟实现 inst...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/coding/coding.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/coding/coding.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"编程题"}],["meta",{"property":"og:description","content":"new 运算符 new 运算符原理 创建一个全新的对象 为新创建的对象添加 __proto__ 属模拟实现 new 运算符性并指向构造函数的原型对象 将新创建的对象作为函数调用的 this 如果构造函数没有返回对象类型，则返回新创建的对象 模拟实现 new 运算符 new 运算符 —— MDN JavaScript 深入之 new 的模拟实现 inst..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"es6"}],["meta",{"property":"article:published_time","content":"2021-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编程题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":3,"title":"new 运算符","slug":"new-运算符","link":"#new-运算符","children":[]},{"level":3,"title":"instanceof 运算符","slug":"instanceof-运算符","link":"#instanceof-运算符","children":[]},{"level":3,"title":"Object.create()","slug":"object-create","link":"#object-create","children":[]},{"level":3,"title":"Function.prototype.call()","slug":"function-prototype-call","link":"#function-prototype-call","children":[]},{"level":3,"title":"Function.prototype.apply()","slug":"function-prototype-apply","link":"#function-prototype-apply","children":[]},{"level":3,"title":"Function.prototype.bind()","slug":"function-prototype-bind","link":"#function-prototype-bind","children":[]},{"level":2,"title":"工具方法系列","slug":"工具方法系列","link":"#工具方法系列","children":[{"level":3,"title":"debounce 函数防抖","slug":"debounce-函数防抖","link":"#debounce-函数防抖","children":[]},{"level":3,"title":"throttle 函数节流","slug":"throttle-函数节流","link":"#throttle-函数节流","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":5.56,"words":1669},"filePathRelative":"posts/coding/coding.md","localizedDate":"2021年3月20日","excerpt":"<h3>new 运算符</h3>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">new 运算符原理</p>\\n<ol>\\n<li>创建一个全新的对象</li>\\n<li>为新创建的对象添加 <strong><code>__proto__</code></strong> 属模拟实现 new 运算符性并指向构造函数的原型对象</li>\\n<li>将新创建的对象作为函数调用的 this</li>\\n<li>如果构造函数没有返回对象类型，则返回新创建的对象</li>\\n</ol>\\n</div>\\n<details class=\\"hint-container details\\"><summary>模拟实现 new 运算符</summary>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">myNew</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 获取构造函数</span>\\n  <span class=\\"token keyword\\">const</span> Constructor <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>arguments<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 创建空对象并设置原型</span>\\n  <span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Constructor</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 绑定 this 并执行构造函数</span>\\n  <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Constructor</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> arguments<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 返回构造函数显示返回的值或新对象</span>\\n  <span class=\\"token keyword\\">const</span> type <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">typeof</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> result <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span> <span class=\\"token operator\\">||</span> type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'function'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> result <span class=\\"token operator\\">:</span> obj<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></details>","autoDesc":true}`);export{$ as comp,H as data};
