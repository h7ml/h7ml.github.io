import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,f as s}from"./app-Cbix2SPG.js";const a={},t=s(`<h1 id="javascript-类型转换" tabindex="-1"><a class="header-anchor" href="#javascript-类型转换"><span>JavaScript 类型转换</span></a></h1><div class="hint-container tip"><p class="hint-container-title">温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** :::</p><p>将值从一种类型转换为另一种类型称为<strong>类型转换</strong> <br> 在 <code>JavaScript</code> 中进行类型转换时，根据调用形式的不同可以分为以下两种:</p><ul><li><strong>显式类型转换</strong></li><li><strong>隐式类型转换</strong></li></ul><h2 id="抽象操作-内部的类型转换规则" tabindex="-1"><a class="header-anchor" href="#抽象操作-内部的类型转换规则"><span>抽象操作 (内部的类型转换规则)</span></a></h2><p>在了解类型转换前我们需要知道 <code>JavaScript</code> 的 <strong>抽象操作</strong> (类型转换规则)</p><blockquote><p><strong>抽象操作</strong> 是指仅供内部使用的操作</p></blockquote><ul><li><code>ToPrimitive</code> 将引用类型转换成相应的基本类型值</li><li><code>ToString</code> 将非字符串值转换成字符串</li><li><code>ToBoolean</code> 将非布尔值转换成布尔值</li><li><code>ToNumber</code> 将非数字值转换成数字值</li></ul><h3 id="toprimitive" tabindex="-1"><a class="header-anchor" href="#toprimitive"><span>ToPrimitive</span></a></h3><p><code>ToPrimitive</code> 用来处理引用类型到基本类型的类型转换</p><div class="hint-container tip"><p class="hint-container-title">ToPrimitive 转换规则</p><ul><li>检查是否存在 <code>Symbol.toPrimitive()</code><ul><li>基本类型直接返回</li><li>引用类型抛出 <code>TypeError</code> 错误</li></ul></li><li>检查是否存在 <code>valueOf()</code><ul><li>基本类型直接返回</li><li>引用类型则继续调用 <code>toString()</code></li></ul></li><li>调用 <code>toString()</code><ul><li>基本类型直接返回</li><li>引用类型抛出 <code>TypeError</code> 错误</li></ul></li></ul></div></div><div class="hint-container warning"><p class="hint-container-title">注意点</p><ul><li>使用 <code>Object.create(null)</code> 创建的对象没有原型，即不存在 <code>valueOf()</code> 和 <code>toString()</code>，当对其进行类型转换时会抛出 <code>TypeError</code> 错误</li><li>在做显式类型转换时 <code>valueOf()</code> 和 <code>toString()</code> 的调用顺序会根据转换目标不同去做相应调整 <ul><li>默认情况下都是先调用 <code>valueOf()</code> 再调用 <code>toString()</code></li><li>当需要转换的目标为字符串时，会先调用 <code>toString()</code> 再调用 <code>valueOf()</code></li></ul></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;toString&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;valueOf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">2021</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;toString&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;valueOf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** 显式类型转换 */</span>
<span class="token function">Number</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// valueOf              =&gt; 2021</span>
<span class="token function">Number</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// valueOf   toString   =&gt; NaN</span>

<span class="token function">String</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// toString  valueOf    =&gt; &#39;2021&#39;</span>
<span class="token function">String</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// toString             =&gt; &#39;h7ml&#39;</span>

<span class="token doc-comment comment">/** 隐式类型转换 */</span>
<span class="token number">1</span> <span class="token operator">+</span> obj1<span class="token punctuation">;</span> <span class="token comment">// valueOf              =&gt; 2022</span>
<span class="token number">1</span> <span class="token operator">+</span> obj2<span class="token punctuation">;</span> <span class="token comment">// valueOf   toString   =&gt; &#39;1h7ml&#39;</span>

<span class="token string">&#39;str: &#39;</span> <span class="token operator">+</span> obj1<span class="token punctuation">;</span> <span class="token comment">// valueOf              =&gt; &#39;str: 2021&#39;</span>
<span class="token string">&#39;str: &#39;</span> <span class="token operator">+</span> obj2<span class="token punctuation">;</span> <span class="token comment">// valueOf   toString   =&gt; &#39;str: h7ml&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>ToString</span></a></h3><p><code>ToString</code> 用来处理非字符串到字符串的类型转换</p><div class="hint-container tip"><p class="hint-container-title">ToString 转换规则</p><ul><li>基本类型 <ul><li><code>undefined</code> =&gt; <code>&#39;undefined&#39;</code></li><li><code>null</code> =&gt; <code>&#39;null&#39;</code></li><li><code>true</code> =&gt; <code>&#39;true&#39;</code></li><li><code>false</code> =&gt; <code>&#39;false&#39;</code></li><li><code>number</code><ul><li>普通数值直接加引号</li><li>极小和极大的数字将转换成指数形式的字符串</li><li><code>+0 0 -0</code> =&gt; <code>&#39;0&#39;</code></li><li><code>Infinity</code> =&gt; <code>&#39;Infinity&#39;</code></li></ul></li></ul></li><li>引用类型会先调用 <code>ToPrimitive</code> 逻辑将其转换成基本类型，如果返回的基本类型不是字符串，再遵循以上规则进行转换</li></ul></div><h3 id="toboolean" tabindex="-1"><a class="header-anchor" href="#toboolean"><span>ToBoolean</span></a></h3><p><code>ToBoolean</code> 用来处理非布尔值到布尔值的类型转换，在 <code>JavaScript</code> 中，布尔类型分为真值(<code>true</code>)和假值(<code>false</code>)</p><ul><li><strong>假值</strong>：可以被强制类型转换为 <code>false</code> 的值</li><li><strong>真值</strong>：除假值之外的值</li></ul><div class="hint-container tip"><p class="hint-container-title">ToBoolean 转换规则</p><ul><li>以下值会被转换成假值(<code>false</code>) <ul><li><strong><code>undefined</code></strong></li><li><strong><code>null</code></strong></li><li><strong><code>false</code></strong></li><li><strong><code>+0 0 -0 NaN</code></strong></li><li><strong><code>&#39;&#39;</code></strong></li></ul></li><li>除假值之外的值都会被转换成真值(<code>true</code>)</li></ul></div><h3 id="tonumber" tabindex="-1"><a class="header-anchor" href="#tonumber"><span>ToNumber</span></a></h3><p><code>ToNumber</code> 用来处理非数字值到数字值的类型转换</p><div class="hint-container tip"><p class="hint-container-title">ToNumber 转换规则</p><ul><li>基本类型 <ul><li><code>undefined</code> =&gt; <code>NaN</code></li><li><code>null</code> =&gt; <code>0</code></li><li><code>true</code> =&gt; <code>1</code></li><li><code>false</code> =&gt; <code>0</code></li><li><code>string</code><ul><li>空字符串(<code>&#39;&#39;</code>) =&gt; <code>0</code></li><li>非数字字符串 =&gt; <code>NaN</code></li></ul></li></ul></li><li>引用类型会先调用 <code>ToPrimitive</code> 逻辑将其转换成基本类型，如果返回的基本类型不是数值，再遵循以上规则进行转换</li></ul></div><h2 id="显式类型转换" tabindex="-1"><a class="header-anchor" href="#显式类型转换"><span>显式类型转换</span></a></h2><p>显式类型转换是指显式的去调用类型转换方法</p><ul><li>转换成布尔值 <ul><li><code>Boolean()</code></li></ul></li><li>转换成数值 <ul><li><code>Number()</code></li><li><code>parseInt()</code></li><li><code>parseFloat()</code></li></ul></li><li>转换成字符串 <ul><li><code>String()</code></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意点</p><ul><li><code>Number()</code> 转换的是整个值</li><li><code>parseInt()</code> 和 <code>parseFloat()</code> 转换的是部分值，是对字符串逐个进行解析和转换，如果传入的参数不是字符串，会先对其进行字符串的转换</li></ul></div><h2 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换"><span>隐式类型转换</span></a></h2><p>隐式类型转换是指在执行过程中，当实际操作的值与 <code>JavaScript</code> 内部期望得到的值不同时，就会对其做隐式类型转换(即不易察觉的类型转换)<br> 在 <code>JavaScript</code> 中有以下场景会发生隐式类型转换</p><ul><li>四则运算符 (<code>+ - * /</code>)</li><li>相等运算符 (<code>==</code>)</li><li>关系运算符 (<code>&gt; &lt; &gt;= &lt;=</code>)</li><li>逻辑操作符 (<code>&amp;&amp; ||</code>)</li><li>条件判断语句 <ul><li><code>if()</code></li><li><code>while()</code></li><li>三元运算符</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">四则运算符运算规则</p><ul><li><code>-</code>(减) <code>*</code>(乘) <code>/</code>(除) 运算符: 先对操作数做 <code>ToNumber</code> 处理再执行运算</li><li><code>+</code>(加) 运算符 <ul><li>做一元运算时，对操作数做 <code>ToNumber</code> 处理</li><li>做二元运算时 <ul><li>当其中一个操作数为 <code>string</code> 时，将另一个操作数做 <code>ToString</code> 处理再执行字符串拼接</li><li>当一个操作数为 <code>number</code> 另一个操作数为基本类型时，将基本类型做 <code>ToNumber</code> 处理再执行运算</li><li>当一个操作数为 <code>number</code> 另一个操作数为引用类型时，都会先做 <code>ToString</code> 处理再执行字符串拼接</li></ul></li></ul></li></ul></div><div class="hint-container tip"><p class="hint-container-title">相等运算符运算规则</p><ul><li><code>boolean</code> 与其它类型进行比较时，将 <code>boolean</code> 做 <code>ToNumber</code> 处理</li><li><code>string</code> 与 <code>number</code> 进行比较时，将 <code>string</code> 做 <code>ToNumber</code> 处理</li><li><code>undefined</code> 与 <code>null</code> 比较时返回 <code>true</code></li><li><code>undefined</code> <code>null</code> 与其它类型的比较时都返回 <code>false</code></li><li><code>引用类型</code> 与 <code>基本类型</code> 进行比较时，将 <code>引用类型</code> 做 <code>ToPrimitive</code> 处理</li><li><code>引用类型</code> 与 <code>引用类型</code> 比较时，直接判断引用地址是否一致</li></ul></div><div class="hint-container tip"><p class="hint-container-title">关系运算符运算规则</p><ul><li>将引用类型做 <code>ToPrimitive</code> 处理</li><li>如果两个参数都是 <code>string</code> 类型时进行 <code>Unicode 编码</code> 大小比较</li><li>否则将两个参数做 <code>ToNumber</code> 处理，再进行数值大小比较</li></ul></div><div class="hint-container tip"><p class="hint-container-title">在**逻辑操作符**与**条件判断语句**中都是做 \`ToBoolean\` 处理 :::</p></div>`,25),i=[t];function c(l,p){return e(),o("div",null,i)}const u=n(a,[["render",c],["__file","conversions.html.vue"]]),v=JSON.parse('{"path":"/posts/javascript/conversions.html","title":"JavaScript 类型转换","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2019-08-16T00:00:00.000Z","author":"h7ml","category":"javascript","tag":"javascript","star":true,"description":"JavaScript 类型转换 温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** ::: 将值从一种类型转换为另一种类型称为类型转换 在 JavaScript 中进行类型转换时，根据调用形式的不同可以分为以...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/conversions.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/conversions.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 类型转换"}],["meta",{"property":"og:description","content":"JavaScript 类型转换 温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** ::: 将值从一种类型转换为另一种类型称为类型转换 在 JavaScript 中进行类型转换时，根据调用形式的不同可以分为以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2019-08-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 类型转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-08-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":3,"title":"ToString","slug":"tostring","link":"#tostring","children":[]},{"level":3,"title":"ToBoolean","slug":"toboolean","link":"#toboolean","children":[]},{"level":3,"title":"ToNumber","slug":"tonumber","link":"#tonumber","children":[]},{"level":2,"title":"显式类型转换","slug":"显式类型转换","link":"#显式类型转换","children":[]},{"level":2,"title":"隐式类型转换","slug":"隐式类型转换","link":"#隐式类型转换","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":4.67,"words":1400},"filePathRelative":"posts/javascript/conversions.md","localizedDate":"2019年8月16日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** :::</p>\\n<p>将值从一种类型转换为另一种类型称为<strong>类型转换</strong> <br> 在 <code>JavaScript</code> 中进行类型转换时，根据调用形式的不同可以分为以下两种:</p>\\n<ul>\\n<li><strong>显式类型转换</strong></li>\\n<li><strong>隐式类型转换</strong></li>\\n</ul>\\n<h2>抽象操作 (内部的类型转换规则)</h2>\\n<p>在了解类型转换前我们需要知道 <code>JavaScript</code> 的 <strong>抽象操作</strong> (类型转换规则)</p>\\n<blockquote>\\n<p><strong>抽象操作</strong> 是指仅供内部使用的操作</p>\\n</blockquote>\\n<ul>\\n<li><code>ToPrimitive</code> 将引用类型转换成相应的基本类型值</li>\\n<li><code>ToString</code> 将非字符串值转换成字符串</li>\\n<li><code>ToBoolean</code> 将非布尔值转换成布尔值</li>\\n<li><code>ToNumber</code> 将非数字值转换成数字值</li>\\n</ul>\\n<h3>ToPrimitive</h3>\\n<p><code>ToPrimitive</code> 用来处理引用类型到基本类型的类型转换</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">ToPrimitive 转换规则</p>\\n<ul>\\n<li>检查是否存在 <code>Symbol.toPrimitive()</code>\\n<ul>\\n<li>基本类型直接返回</li>\\n<li>引用类型抛出 <code>TypeError</code> 错误</li>\\n</ul>\\n</li>\\n<li>检查是否存在 <code>valueOf()</code>\\n<ul>\\n<li>基本类型直接返回</li>\\n<li>引用类型则继续调用 <code>toString()</code></li>\\n</ul>\\n</li>\\n<li>调用 <code>toString()</code>\\n<ul>\\n<li>基本类型直接返回</li>\\n<li>引用类型抛出 <code>TypeError</code> 错误</li>\\n</ul>\\n</li>\\n</ul>\\n</div>\\n</div>","autoDesc":true}');export{u as comp,v as data};
