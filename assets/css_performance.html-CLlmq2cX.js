import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as p,d as a,e as n,a as e,f as l}from"./app-Cbix2SPG.js";const i={},r=l(`<h1 id="如果要做优化-css-提高性能的方法有哪些" tabindex="-1"><a class="header-anchor" href="#如果要做优化-css-提高性能的方法有哪些"><span>如果要做优化，CSS 提高性能的方法有哪些？</span></a></h1><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/c071c820-9fa3-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言"><span>一、前言</span></a></h2><p>每一个网页都离不开<code>css</code>，但是很多人又认为，<code>css</code>主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的</p><p>作为页面渲染和内容展现的重要环节，<code>css</code>影响着用户对整个网站的第一体验</p><p>因此，在整个产品研发过程中，<code>css</code>性能优化同样需要贯穿全程</p><h2 id="二、实现方式" tabindex="-1"><a class="header-anchor" href="#二、实现方式"><span>二、实现方式</span></a></h2><p>实现方式有很多种，主要有如下：</p><ul><li>内联首屏关键 CSS</li><li>异步加载 CSS</li><li>资源压缩</li><li>合理使用选择器</li><li>减少使用昂贵的属性</li><li>不要使用@import</li></ul><h3 id="内联首屏关键-css" tabindex="-1"><a class="header-anchor" href="#内联首屏关键-css"><span>内联首屏关键 CSS</span></a></h3><p>在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联<code>css</code>关键代码能够使浏览器在下载完<code>html</code>后就能立刻渲染</p><p>而如果外部引用<code>css</code>代码，在解析<code>html</code>结构过程中遇到外部<code>css</code>文件，才会开始下载<code>css</code>代码，再渲染</p><p>所以，<code>CSS</code>内联使用使渲染时间提前</p><p>注意：但是较大的<code>css</code>代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式</p><h3 id="异步加载-css" tabindex="-1"><a class="header-anchor" href="#异步加载-css"><span>异步加载 CSS</span></a></h3><p>在<code>CSS</code>文件请求、下载、解析完成之前，<code>CSS</code>会阻塞渲染，浏览器将不会渲染任何已处理的内容</p><p>前面加载内联代码后，后面的外部引用<code>css</code>则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：</p><ul><li>使用 javascript 将 link 标签插到 head 标签最后</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建link标签</span>
<span class="token keyword">const</span> myCSS <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myCSS<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">&#39;stylesheet&#39;</span><span class="token punctuation">;</span>
myCSS<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;mystyles.css&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 插入到header的最后位置</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>myCSS<span class="token punctuation">,</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置 link 标签 media 属性为 noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将<code>media</code>的值设为<code>screen</code>或<code>all</code>，从而让浏览器开始解析 CSS</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyles.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>noexist<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>media<span class="token operator">=</span><span class="token string">&#39;all&#39;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过 rel 属性将 link 元素标记为 alternate 可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将 rel 设回 stylesheet</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alternate stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyles.css<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>rel<span class="token operator">=</span><span class="token string">&#39;stylesheet&#39;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="资源压缩" tabindex="-1"><a class="header-anchor" href="#资源压缩"><span>资源压缩</span></a></h3><p>利用<code>webpack</code>、<code>gulp/grunt</code>、<code>rollup</code>等模块化工具，将<code>css</code>代码进行压缩，使文件变小，大大降低了浏览器的加载时间</p><h3 id="合理使用选择器" tabindex="-1"><a class="header-anchor" href="#合理使用选择器"><span>合理使用选择器</span></a></h3><p><code>css</code>匹配的规则是从右往左开始匹配，例如<code>#markdown .content h3</code>匹配规则如下：</p><ul><li>先找到 h3 标签元素</li><li>然后去除祖先不是.content 的元素</li><li>最后去除祖先不是#markdown 的元素</li></ul><p>如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高</p><p>所以我们在编写选择器的时候，可以遵循以下规则：</p><ul><li>不要嵌套使用过多复杂选择器，最好不要三层以上</li><li>使用 id 选择器就没必要再进行嵌套</li><li>通配符和属性选择器效率最低，避免使用</li></ul><h3 id="减少使用昂贵的属性" tabindex="-1"><a class="header-anchor" href="#减少使用昂贵的属性"><span>减少使用昂贵的属性</span></a></h3><p>在页面发生重绘的时候，昂贵属性如<code>box-shadow</code>/<code>border-radius</code>/<code>filter</code>/透明度/<code>:nth-child</code>等，会降低浏览器的渲染性能</p><h3 id="不要使用-import" tabindex="-1"><a class="header-anchor" href="#不要使用-import"><span>不要使用@import</span></a></h3><p>css 样式文件有两种引入方式，一种是<code>link</code>元素，另一种是<code>@import</code></p><p><code>@import</code>会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时</p><p>而且多个<code>@import</code>可能会导致下载顺序紊乱</p><p>比如一个 css 文件<code>index.css</code>包含了以下内容：<code>@import url(&quot;reset.css&quot;)</code></p><p>那么浏览器就必须先把<code>index.css</code>下载、解析和执行后，才下载、解析和执行第二个文件<code>reset.css</code></p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><ul><li>减少重排操作，以及减少不必要的重绘</li><li>了解哪些属性可以继承而来，避免对这些属性重复编写</li><li>cssSprite，合成所有 icon 图片，用宽高加上 backgroud-position 的背景图方式显现出我们要的 icon 图，减少了 http 请求</li><li>把小的 icon 图片转成 base64 编码</li><li>CSS3 动画或者过渡尽量使用 transform 和 opacity 来实现动画，不要使用 left 和 top 属性</li></ul><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p><code>css</code>实现性能的方式可以从选择器嵌套、属性特性、减少<code>http</code>这三面考虑，同时还要注意<code>css</code>代码的加载顺序</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,44),d={href:"https://www.zhihu.com/question/19886806",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/post/6844903649605320711#heading-1",target:"_blank",rel:"noopener noreferrer"};function h(m,k){const s=c("ExternalLinkIcon");return o(),p("div",null,[r,a("ul",null,[a("li",null,[a("a",d,[n("https://www.zhihu.com/question/19886806"),e(s)])]),a("li",null,[a("a",u,[n("https://juejin.cn/post/6844903649605320711#heading-1"),e(s)])])])])}const f=t(i,[["render",h],["__file","css_performance.html.vue"]]),S=JSON.parse('{"path":"/posts/interview/css/css_performance.html","title":"如果要做优化，CSS 提高性能的方法有哪些？","lang":"zh-CN","frontmatter":{"icon":"question","description":"前端物语|面试物语-如果要做优化，CSS 提高性能的方法有哪些？","footer":"如果要做优化，CSS 提高性能的方法有哪些？","order":15,"star":15,"date":"2023-03-17T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["interview","css"],"tag":["interview","css"],"shortTitle":"前端物语|面试物语-如果要做优化，CSS 提高性能的方法有哪些？","isOriginal":false,"head":[["meta",{"name":"keywords","content":"如果要做优化，CSS 提高性能的方法有哪些？"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/interview/css/css_performance.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/interview/css/css_performance.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"如果要做优化，CSS 提高性能的方法有哪些？"}],["meta",{"property":"og:description","content":"前端物语|面试物语-如果要做优化，CSS 提高性能的方法有哪些？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"如果要做优化，CSS 提高性能的方法有哪些？"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:published_time","content":"2023-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如果要做优化，CSS 提高性能的方法有哪些？\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/interview/c071c820-9fa3-11eb-ab90-d9ae814b240d.png\\"],\\"datePublished\\":\\"2023-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[]},{"level":2,"title":"二、实现方式","slug":"二、实现方式","link":"#二、实现方式","children":[{"level":3,"title":"内联首屏关键 CSS","slug":"内联首屏关键-css","link":"#内联首屏关键-css","children":[]},{"level":3,"title":"异步加载 CSS","slug":"异步加载-css","link":"#异步加载-css","children":[]},{"level":3,"title":"资源压缩","slug":"资源压缩","link":"#资源压缩","children":[]},{"level":3,"title":"合理使用选择器","slug":"合理使用选择器","link":"#合理使用选择器","children":[]},{"level":3,"title":"减少使用昂贵的属性","slug":"减少使用昂贵的属性","link":"#减少使用昂贵的属性","children":[]},{"level":3,"title":"不要使用@import","slug":"不要使用-import","link":"#不要使用-import","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1312},"filePathRelative":"posts/interview/css/css_performance.md","localizedDate":"2023年3月17日","excerpt":"\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/interview/c071c820-9fa3-11eb-ab90-d9ae814b240d.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、前言</h2>\\n<p>每一个网页都离不开<code>css</code>，但是很多人又认为，<code>css</code>主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的</p>"}');export{f as comp,S as data};
