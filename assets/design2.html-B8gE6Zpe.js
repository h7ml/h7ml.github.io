import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as o,d as n,e as s,a as t,f as c}from"./app-Cbix2SPG.js";const l={},r=c(`<h1 id="说说你对贪心算法、回溯算法的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对贪心算法、回溯算法的理解-应用场景"><span>说说你对贪心算法、回溯算法的理解？应用场景？</span></a></h1><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/1d49eae0-2e8e-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、贪心算法" tabindex="-1"><a class="header-anchor" href="#一、贪心算法"><span>一、贪心算法</span></a></h2><p>贪心算法，又称贪婪算法，是算法设计中的一种思想</p><p>其期待每一个阶段都是局部最优的选择，从而达到全局最优，但是结果并不一定是最优的</p><p>举个零钱兑换的例子，如果你有 1 元、2 元、5 元的钱币数张，用于兑换一定的金额，但是要求兑换的钱币张数最少</p><p>如果现在你要兑换 11 元，按照贪心算法的思想，先选择面额最大的 5 元钱币进行兑换，那么就得到 11 = 5 + 5 + 1 的选择，这种情况是最优的</p><p>但是如果你手上钱币的面额为 1、3、4，想要兑换 6 元，按照贪心算法的思路，我们会 6 = 4 + 1 + 1 这样选择，这种情况结果就不是最优的选择</p><p>从上面例子可以看到，贪心算法存在一些弊端，使用到贪心算法的场景，都会存在一个特性：</p><p>一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法</p><p>至于是否选择贪心算法，主要看是否有如下两大特性：</p><ul><li>贪心选择：当某一个问题的整体最优解可通过一系列局部的最优解的选择达到，并且每次做出的选择可以依赖以前做出的选择，但不需要依赖后面需要做出的选择</li><li>最优子结构：如果一个问题的最优解包含其子问题的最优解，则此问题具备最优子结构的性质。问题的最优子结构性质是该问题是否可以用贪心算法求解的关键所在</li></ul><h2 id="二、回溯算法" tabindex="-1"><a class="header-anchor" href="#二、回溯算法"><span>二、回溯算法</span></a></h2><p>回溯算法，也是算法设计中的一种思想，是一种渐进式寻找并构建问题解决方式的策略</p><p>回溯算法会先从一个可能的工作开始解决问题，如果不行，就回溯并选择另一个动作，知道将问题解决</p><p>使用回溯算法的问题，有如下特性：</p><ul><li>有很多路，例如一个矩阵的方向或者树的路径</li><li>在这些的路里面，有死路也有生路，思路即不符合题目要求的路，生路则符合</li><li>通常使用递归来模拟所有的路</li></ul><p>常见的伪代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token parameter">路径<span class="token punctuation">,</span> 选择列表</span><span class="token punctuation">)</span><span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token literal-property property">满足结束条件</span><span class="token operator">:</span>
    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span>
  <span class="token keyword">return</span>

  <span class="token keyword">for</span> 选择 <span class="token keyword">of</span> <span class="token literal-property property">选择列表</span><span class="token operator">:</span>
    做选择
    <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>
    撤销选择
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点解决三个问题：</p><ul><li>路径：也就是已经做出的选择</li><li>选择列表</li><li>结束条件</li></ul><p>例如经典使用回溯算法为解决全排列的问题，如下：</p><p>一个不含重复数字的数组 <code>nums</code> ，我们要返回其所有可能的全排列，解决这个问题的思路是：</p><ul><li>用递归模拟所有的情况</li><li>遇到包含重复元素的情况则回溯</li><li>收集到所有到达递归终点的情况，并返回、</li></ul><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/2a030f00-2e8e-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用代码表示则如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> used</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 同支</span>
      <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p>前面也初步了解到分而治之、动态规划，现在再了解到贪心算法、回溯算法</p><p>其中关于分而治之、动态规划、贪心策略三者的求解思路如下：</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/504b5230-2e8e-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中三者对应的经典问题如下图：</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/62cdc910-2e8e-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,34),u={href:"https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},d={href:"https://leetcode-cn.com/problems/permutations/solution/dai-ma-sui-xiang-lu-dai-ni-xue-tou-hui-s-mfrp/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cloud.tencent.com/developer/article/1767046",target:"_blank",rel:"noopener noreferrer"};function m(h,g){const a=p("ExternalLinkIcon");return i(),o("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[s("https://zh.wikipedia.org/wiki/贪心算法"),t(a)])]),n("li",null,[n("a",d,[s("https://leetcode-cn.com/problems/permutations/solution/dai-ma-sui-xiang-lu-dai-ni-xue-tou-hui-s-mfrp/"),t(a)])]),n("li",null,[n("a",k,[s("https://cloud.tencent.com/developer/article/1767046"),t(a)])])])])}const b=e(l,[["render",m],["__file","design2.html.vue"]]),w=JSON.parse('{"path":"/posts/interview/algorithm/design2.html","title":"说说你对贪心算法、回溯算法的理解？应用场景？","lang":"zh-CN","frontmatter":{"icon":"question","description":"前端物语|面试物语-说说你对贪心算法、回溯算法的理解？应用场景？","footer":"说说你对贪心算法、回溯算法的理解？应用场景？","order":10,"star":10,"date":"2023-03-29T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["interview","algorithm"],"tag":["interview","algorithm"],"shortTitle":"前端物语|面试物语-说说你对贪心算法、回溯算法的理解？应用场景？","isOriginal":false,"head":[["meta",{"name":"keywords","content":"说说你对贪心算法、回溯算法的理解？应用场景？"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/interview/algorithm/design2.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/interview/algorithm/design2.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"说说你对贪心算法、回溯算法的理解？应用场景？"}],["meta",{"property":"og:description","content":"前端物语|面试物语-说说你对贪心算法、回溯算法的理解？应用场景？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"说说你对贪心算法、回溯算法的理解？应用场景？"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:published_time","content":"2023-03-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说你对贪心算法、回溯算法的理解？应用场景？\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/interview/1d49eae0-2e8e-11ec-a752-75723a64e8f5.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/2a030f00-2e8e-11ec-8e64-91fdec0f05a1.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/504b5230-2e8e-11ec-8e64-91fdec0f05a1.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/62cdc910-2e8e-11ec-8e64-91fdec0f05a1.png\\"],\\"datePublished\\":\\"2023-03-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"一、贪心算法","slug":"一、贪心算法","link":"#一、贪心算法","children":[]},{"level":2,"title":"二、回溯算法","slug":"二、回溯算法","link":"#二、回溯算法","children":[]},{"level":2,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":3.75,"words":1124},"filePathRelative":"posts/interview/algorithm/design2.md","localizedDate":"2023年3月29日","excerpt":"\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/interview/1d49eae0-2e8e-11ec-a752-75723a64e8f5.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、贪心算法</h2>\\n<p>贪心算法，又称贪婪算法，是算法设计中的一种思想</p>\\n<p>其期待每一个阶段都是局部最优的选择，从而达到全局最优，但是结果并不一定是最优的</p>\\n<p>举个零钱兑换的例子，如果你有 1 元、2 元、5 元的钱币数张，用于兑换一定的金额，但是要求兑换的钱币张数最少</p>"}');export{b as comp,w as data};
