import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,d as n,e as s,a as e,f as t}from"./app-Cbix2SPG.js";const l={},u=t('<h1 id="说说对-nodejs-中的事件循环机制理解" tabindex="-1"><a class="header-anchor" href="#说说对-nodejs-中的事件循环机制理解"><span>说说对 Nodejs 中的事件循环机制理解?</span></a></h1><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/e0faf3c0-c90e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、是什么" tabindex="-1"><a class="header-anchor" href="#一、是什么"><span>一、是什么</span></a></h2>',3),r={href:"https://github.com/febobo/web-interview/issues/73",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"javascript",-1),m=n("code",null,"HTML5",-1),k=t(`<p>而在<code>NodeJS</code>中，事件循环是基于<code>libuv</code>实现，<code>libuv</code>是一个多平台的专注于异步 IO 的库，如下图最右侧所示：</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/ea690b90-c90e-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图<code>EVENT_QUEUE</code> 给人看起来只有一个队列，但<code>EventLoop</code>存在 6 个阶段，每个阶段都有对应的一个先进先出的回调队列</p><h2 id="二、流程" tabindex="-1"><a class="header-anchor" href="#二、流程"><span>二、流程</span></a></h2><p>上节讲到事件循环分成了六个阶段，对应如下：</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/f2e34d80-c90e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调</li><li>定时器检测阶段(timers)：本阶段执行 timer 的回调，即 setTimeout、setInterval 里面的回调函数</li><li>I/O 事件回调阶段(I/O callbacks)：执行延迟到下一个循环迭代的 I/O 回调，即上一轮循环中未被执行的一些 I/O 回调</li><li>闲置阶段(idle, prepare)：仅系统内部使用</li><li>轮询阶段(poll)：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞</li><li>检查阶段(check)：setImmediate() 回调函数在这里执行</li><li>关闭事件回调阶段(close callback)：一些关闭的回调函数，如：socket.on(&#39;close&#39;, ...)</li></ul><p>每个阶段对应一个队列，当事件循环进入某个阶段时, 将会在该阶段内执行回调，直到队列耗尽或者回调的最大数量已执行, 那么将进入下一个处理阶段</p><p>除了上述 6 个阶段，还存在<code>process.nextTick</code>，其不属于事件循环的任何一个阶段，它属于该阶段与下阶段之间的过渡, 即本阶段执行结束, 进入下一个阶段前, 所要执行的回调，类似插队</p><p>流程图如下所示：</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/fbe731d0-c90e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>Node</code>中，同样存在宏任务和微任务，与浏览器中的事件循环相似</p><p>微任务对应有：</p><ul><li>next tick queue：process.nextTick</li><li>other queue：Promise 的 then 回调、queueMicrotask</li></ul><p>宏任务对应有：</p><ul><li>timer queue：setTimeout、setInterval</li><li>poll queue：IO 事件</li><li>check queue：setImmediate</li><li>close queue：close 事件</li></ul><p>其执行顺序为：</p><ul><li>next tick microtask queue</li><li>other microtask queue</li><li>timer queue</li><li>poll queue</li><li>check queue</li><li>close queue</li></ul><h2 id="三、题目" tabindex="-1"><a class="header-anchor" href="#三、题目"><span>三、题目</span></a></h2><p>通过上面的学习，下面开始看看题目</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setImmediate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nextTick1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nextTick2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析过程：</p><ul><li><p>先找到同步任务，输出 script start</p></li><li><p>遇到第一个 setTimeout，将里面的回调函数放到 timer 队列中</p></li><li><p>遇到第二个 setTimeout，300ms 后将里面的回调函数放到 timer 队列中</p></li><li><p>遇到第一个 setImmediate，将里面的回调函数放到 check 队列中</p></li><li><p>遇到第一个 nextTick，将其里面的回调函数放到本轮同步任务执行完毕后执行</p></li><li><p>执行 async1 函数，输出 async1 start</p></li><li><p>执行 async2 函数，输出 async2，async2 后面的输出 async1 end 进入微任务，等待下一轮的事件循环</p></li><li><p>遇到第二个，将其里面的回调函数放到本轮同步任务执行完毕后执行</p></li><li><p>遇到 new Promise，执行里面的立即执行函数，输出 promise1、promise2</p></li><li><p>then 里面的回调函数进入微任务队列</p></li><li><p>遇到同步任务，输出 script end</p></li><li><p>执行下一轮回到函数，先依次输出 nextTick 的函数，分别是 nextTick1、nextTick2</p></li><li><p>然后执行微任务队列，依次输出 async1 end、promise3</p></li><li><p>执行 timer 队列，依次输出 setTimeout0</p></li><li><p>接着执行 check 队列，依次输出 setImmediate</p></li><li><p>300ms 后，timer 队列存在任务，执行输出 setTimeout2</p></li></ul><p>执行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>script start
async1 start
async2
promise1
promise2
script end
nextTick1
nextTick2
async1 end
promise3
setTimeout0
setImmediate
setTimeout2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后有一道是关于<code>setTimeout</code>与<code>setImmediate</code>的输出顺序</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setImmediate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出情况如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>情况一：
setTimeout
setImmediate

情况二：
setImmediate
setTimeout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析下流程：</p><ul><li>外层同步代码一次性全部执行完，遇到异步 API 就塞到对应的阶段</li><li>遇到<code>setTimeout</code>，虽然设置的是 0 毫秒触发，但实际上会被强制改成 1ms，时间到了然后塞入<code>times</code>阶段</li><li>遇到<code>setImmediate</code>塞入<code>check</code>阶段</li><li>同步代码执行完毕，进入 Event Loop</li><li>先进入<code>times</code>阶段，检查当前时间过去了 1 毫秒没有，如果过了 1 毫秒，满足<code>setTimeout</code>条件，执行回调，如果没过 1 毫秒，跳过</li><li>跳过空的阶段，进入 check 阶段，执行<code>setImmediate</code>回调</li></ul><p>这里的关键在于这 1ms，如果同步代码执行时间较长，进入<code>Event Loop</code>的时候 1 毫秒已经过了，<code>setTimeout</code>先执行，如果 1 毫秒还没到，就先执行了<code>setImmediate</code></p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,33),v={href:"https://segmentfault.com/a/1190000012258592",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/6844904100195205133",target:"_blank",rel:"noopener noreferrer"};function b(h,f){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("在"),n("a",r,[s("浏览器事件循环"),e(a)]),s("中，我们了解到"),d,s("在浏览器中的事件循环机制，其是根据"),m,s("定义的规范来实现")]),k,n("ul",null,[n("li",null,[n("a",v,[s("https://segmentfault.com/a/1190000012258592"),e(a)])]),n("li",null,[n("a",g,[s("https://juejin.cn/post/6844904100195205133"),e(a)])])])])}const T=i(l,[["render",b],["__file","event_loop.html.vue"]]),_=JSON.parse('{"path":"/posts/interview/NodeJS/event_loop.html","title":"说说对 Nodejs 中的事件循环机制理解?","lang":"zh-CN","frontmatter":{"icon":"question","description":"前端物语|面试物语-说说对 Nodejs 中的事件循环机制理解?","footer":"说说对 Nodejs 中的事件循环机制理解?","order":10,"star":10,"date":"2023-03-27T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["interview","NodeJS"],"tag":["interview","NodeJS"],"shortTitle":"前端物语|面试物语-说说对 Nodejs 中的事件循环机制理解?","isOriginal":false,"head":[["meta",{"name":"keywords","content":"说说对 Nodejs 中的事件循环机制理解?"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/interview/NodeJS/event_loop.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/interview/NodeJS/event_loop.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"说说对 Nodejs 中的事件循环机制理解?"}],["meta",{"property":"og:description","content":"前端物语|面试物语-说说对 Nodejs 中的事件循环机制理解?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"说说对 Nodejs 中的事件循环机制理解?"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"NodeJS"}],["meta",{"property":"article:published_time","content":"2023-03-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说对 Nodejs 中的事件循环机制理解?\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/interview/e0faf3c0-c90e-11eb-ab90-d9ae814b240d.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/ea690b90-c90e-11eb-85f6-6fac77c0c9b3.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/f2e34d80-c90e-11eb-ab90-d9ae814b240d.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/fbe731d0-c90e-11eb-ab90-d9ae814b240d.png\\"],\\"datePublished\\":\\"2023-03-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"一、是什么","slug":"一、是什么","link":"#一、是什么","children":[]},{"level":2,"title":"二、流程","slug":"二、流程","link":"#二、流程","children":[]},{"level":2,"title":"三、题目","slug":"三、题目","link":"#三、题目","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":4.55,"words":1364},"filePathRelative":"posts/interview/NodeJS/event_loop.md","localizedDate":"2023年3月27日","excerpt":"\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/interview/e0faf3c0-c90e-11eb-ab90-d9ae814b240d.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、是什么</h2>\\n<p>在<a href=\\"https://github.com/febobo/web-interview/issues/73\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">浏览器事件循环</a>中，我们了解到<code>javascript</code>在浏览器中的事件循环机制，其是根据<code>HTML5</code>定义的规范来实现</p>"}');export{T as comp,_ as data};
