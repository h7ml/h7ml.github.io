import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,f as n}from"./app-Cbix2SPG.js";const a={},r=n("<p>工厂模式是如果业务场景中需要创建多个类似的对象，然后充斥了大量的 <code>if...else...</code> ，此时可以将创建对象的部分抽离出来。</p><p>简单工厂模式就是直接抽离，什么都不改，只是将 <code>if..else...</code> 进行了转移。</p><p>工厂模式是每一个对象都创建一个工厂类，业务中先得到一个工厂，然后通过工厂得到对象。</p><p>抽象工厂模式是每一个工厂类可以生成多种对象。</p><p><code>GoF</code> 中只有工厂模式和抽象工厂模式。</p><p>目前开发中还没有遇到过，此处留坑。</p>",6),p=[r];function c(i,m){return e(),o("div",null,p)}const d=t(a,[["render",c],["__file","factory.html.vue"]]),h=JSON.parse('{"path":"/posts/designPattern/factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","category":["设计模式","frontend"],"tag":["设计模式","frontend"],"author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","date":"2022-03-03T08:12:19.000Z","description":"工厂模式是如果业务场景中需要创建多个类似的对象，然后充斥了大量的 if...else... ，此时可以将创建对象的部分抽离出来。 简单工厂模式就是直接抽离，什么都不改，只是将 if..else... 进行了转移。 工厂模式是每一个对象都创建一个工厂类，业务中先得到一个工厂，然后通过工厂得到对象。 抽象工厂模式是每一个工厂类可以生成多种对象。 GoF 中...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/designPattern/factory.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/designPattern/factory.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"工厂模式是如果业务场景中需要创建多个类似的对象，然后充斥了大量的 if...else... ，此时可以将创建对象的部分抽离出来。 简单工厂模式就是直接抽离，什么都不改，只是将 if..else... 进行了转移。 工厂模式是每一个对象都创建一个工厂类，业务中先得到一个工厂，然后通过工厂得到对象。 抽象工厂模式是每一个工厂类可以生成多种对象。 GoF 中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"工厂模式"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:published_time","content":"2022-03-03T08:12:19.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2022-03-03T08:12:19.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"posts/designPattern/factory.md","localizedDate":"2022年3月3日","excerpt":"<p>工厂模式是如果业务场景中需要创建多个类似的对象，然后充斥了大量的 <code>if...else...</code> ，此时可以将创建对象的部分抽离出来。</p>\\n<p>简单工厂模式就是直接抽离，什么都不改，只是将 <code>if..else...</code> 进行了转移。</p>\\n<p>工厂模式是每一个对象都创建一个工厂类，业务中先得到一个工厂，然后通过工厂得到对象。</p>\\n<p>抽象工厂模式是每一个工厂类可以生成多种对象。</p>\\n<p><code>GoF</code> 中只有工厂模式和抽象工厂模式。</p>\\n<p>目前开发中还没有遇到过，此处留坑。</p>\\n","autoDesc":true}');export{d as comp,h as data};
