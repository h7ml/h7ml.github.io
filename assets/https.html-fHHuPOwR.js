import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as i,c as p,d as s,e as l,a as o,f as n}from"./app-Cbix2SPG.js";const r={},c=n('<h2 id="https-证书配置" tabindex="-1"><a class="header-anchor" href="#https-证书配置"><span>Https 证书配置</span></a></h2><h2 id="不安全的-http-协议" tabindex="-1"><a class="header-anchor" href="#不安全的-http-协议"><span>不安全的 http 协议</span></a></h2><p>http 在传输的过程中都是<strong>明文</strong>，这导致在客户端到服务器请求的<strong>过程中会被拦截数据导致数据泄露</strong>。</p><h3 id="对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密"><span>对称加密</span></a></h3><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220907133558872.png" alt="image-20220907133558872" tabindex="0" loading="lazy"><figcaption>image-20220907133558872</figcaption></figure><p><strong>对称加密</strong>可以通过加密算法给数据进行安全一点的加密，但是这样也很容易破解。</p><ul><li>客户端使用<strong>加密算法</strong>对数据进行加密</li><li>服务端通过<strong>相同加密算法</strong>对数据进行解密</li></ul><p>这样一来就完成了一次加密请求。</p><p>但是如果加密算法泄露了，这样一来拦截者就可以对数据进行篡改了，因为客户端的代码都是开源的，他通过去解读加密算法的代码就可以获取到。</p><h3 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密"><span>非对称加密</span></a></h3><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220915153358600.png" alt="image-20220915153358600" tabindex="0" loading="lazy"><figcaption>image-20220915153358600</figcaption></figure><p>非对称加密就是在客户端中有一把<strong>公钥</strong>（理解成一窜字符），在服务端有一把<strong>私钥</strong>。</p><ul><li>在客户端<strong>第一次请求</strong>服务器时，<strong>服务器会返回一把公钥</strong>。</li><li><strong>客户端通过公钥给数据加密</strong>进行请求数据，服务器通过私钥对数据进行解密**（公钥是公开大家都能看到的）**。</li><li>服务端通过私钥解密后在<strong>用私钥加密要返回的数据</strong>，在返回给客户端，客户端在通过公钥进行解密**（私钥只有服务端知道）**。</li></ul><blockquote><p>这种加密一定要满足一个条件，<strong>公钥加密公钥解不开，且私钥不能泄露</strong>。</p></blockquote><p>但即使是这样也有是有漏洞的：</p><ul><li>例如我<strong>在你客户端请求的过程中让你请求我的服务器</strong>（反向代理），然后我带着你请求的参数去请求你的后端服务器。</li><li>之后我<strong>将服务器返回的公钥存储起来</strong>，然后我伪造一个公钥给你。</li><li><strong>当你在请求的时候就是用的我给你的公钥加密的</strong>，这样一来我就可以<strong>通过我的私钥进行解密拿到明文数据</strong>。</li><li>然后我<strong>将拿到的数据在通过存储的服务器返回的公钥进行加密，返回给服务器。</strong></li><li>这样一来就完成了数据的拦截。</li></ul><p>所有不管是对称加密还是非对称加密都是不安全的。</p><h2 id="ca-证书" tabindex="-1"><a class="header-anchor" href="#ca-证书"><span>CA 证书</span></a></h2><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014144324807.png" alt="image-20221014144324807" tabindex="0" loading="lazy"><figcaption>image-20221014144324807</figcaption></figure><p>通过上述的<strong>对称加密</strong>和<strong>非对称加密</strong>，我们知道不管是哪种在网络传输过程中都会被人给拦截篡改，所以都不安全，为了解决这一问题就有了<strong>CA 证书</strong>这么一个认证机构。</p><p>首先他是怎么工作的：</p><ul><li>在服务器下发公钥时，服务器会提交一些<strong>资料（这个资料是在服务器的某个目录下的文件）<strong>给 CA 机构来</strong>验证身份</strong>。</li><li>身份验证成功后会<strong>CA 机构会将服务器提交的公钥进行加密</strong>，通过<strong>CA.私钥加算法</strong>来生成一个<strong>证书</strong>。</li><li>之后服务器就不会将公钥下发给客户端了，而是<strong>把证书给客户端</strong>。 <ul><li>这里在服务器下发证书的过程中，也是可以被拦截者给篡改的，也是可以解开的。</li><li>但如果拦截者解开了证书拿到了公钥，在对公钥进行加密返回给客户端，但这样是无法认证成功的，因为<strong>CA 的私钥是一种特殊的私钥，他是操作系统内置的私钥，CA 认证机构是不在网络中传输的</strong>，所以只要你篡改了，客户端和 CA 机构都是不认的。</li></ul></li><li>客户端拿到证书后通过<strong>CA 的公钥进行解密得到服务器的公钥</strong>。</li></ul><p>操作系统内置的证书：</p><p>Windows：cmd 输入 certmgr.msc</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014144636291.png" alt="image-20221014144636291" tabindex="0" loading="lazy"><figcaption>image-20221014144636291</figcaption></figure><p>这里有你所有的证书包括第三方下载的证书都在这。</p><h2 id="证书安装" tabindex="-1"><a class="header-anchor" href="#证书安装"><span>证书安装</span></a></h2>',27),g={href:"https://cloud.tencent.com/document/product/400/35244",target:"_blank",rel:"noopener noreferrer"},d=n(`<h2 id="已安装的-nginx-上开启-ssl-模块并配置-https" tabindex="-1"><a class="header-anchor" href="#已安装的-nginx-上开启-ssl-模块并配置-https"><span>已安装的 Nginx 上开启 SSL 模块并配置 https</span></a></h2><p>安装目录是 <strong>/usr/local/nginx</strong>，</p><p>源码解压目录是 <strong>/usr/local/src/nginx-1.22.0</strong></p><p>1、切换到 Nginx 安装目录下的 sbin 目录</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token regex-literal"><span class="token regex">/sbin/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、将 Nginx 停止运行</p><p>3、切换到源码解压目录</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>resource<span class="token operator">/</span>nginx<span class="token operator">-</span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、查看 Nginx 原有的模块配置</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span><span class="token constant">V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5、在**configure arguments:**后面显示的原有的 configure 参数如下：</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token operator">-</span><span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token regex-literal"><span class="token regex">/local/nginx</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014162914185.png" alt="image-20221014162914185" tabindex="0" loading="lazy"><figcaption>image-20221014162914185</figcaption></figure><p>6、在已有的配置基础上新增 **--with-http_ssl_module，**形成新的配置命令，并在源码目录运行下面的命令</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">-</span><span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>http_ssl_module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7、配置完成后，继续运行命令 <strong>make</strong></p><p><strong>切记：这里不要进行 make install，否则就是覆盖安装</strong></p><p>8、备份原有已安装好的 nginx 文件</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>cp <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token regex-literal"><span class="token regex">/sbin/nginx</span></span><span class="token punctuation">.</span>bak
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>9、将刚刚编译好的 nginx 文件覆盖掉原有的 nginx</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>cp <span class="token punctuation">.</span><span class="token operator">/</span>objs<span class="token operator">/</span>nginx <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token regex-literal"><span class="token regex">/sbin/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>10、查看是否已经加入成功</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span><span class="token constant">V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时看到 ssl 模块已经被加载</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>configure arguments<span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>http_ssl_module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014163203113.png" alt="image-20221014163203113" tabindex="0" loading="lazy"><figcaption>image-20221014163203113</figcaption></figure><p>11、配置 https Server</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
     <span class="token comment">#SSL 默认访问端口号为 443</span>
     <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
     <span class="token comment">#请填写绑定证书的域名</span>
     <span class="token directive"><span class="token keyword">server_name</span> cloud.tencent.com</span><span class="token punctuation">;</span>
     <span class="token comment">#请填写证书文件的相对路径或绝对路径</span>
     <span class="token directive"><span class="token keyword">ssl_certificate</span> cloud.tencent.com_bundle.crt</span><span class="token punctuation">;</span>
     <span class="token comment">#请填写私钥文件的相对路径或绝对路径</span>
     <span class="token directive"><span class="token keyword">ssl_certificate_key</span> cloud.tencent.com.key</span><span class="token punctuation">;</span>
     <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">5m</span></span><span class="token punctuation">;</span>
     <span class="token comment">#请按照以下协议配置</span>
     <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1.2 TLSv1.3</span><span class="token punctuation">;</span>
     <span class="token comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span>
     <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE</span><span class="token punctuation">;</span>
     <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
     <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
         <span class="token comment">#网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span>
         <span class="token comment">#例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。</span>
         <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
         <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>12、启动 Nginx，访问 https 域名，即可访问成功。</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>systemctl restart nginx<span class="token punctuation">.</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,30);function m(u,h){const a=t("ExternalLinkIcon");return i(),p("div",null,[c,s("p",null,[s("a",g,[l("腾讯云 open in new window"),o(a)])]),d])}const x=e(r,[["render",m],["__file","https.html.vue"]]),b=JSON.parse('{"path":"/posts/nginx/https.html","title":"Https 证书配置","lang":"zh-CN","frontmatter":{"icon":"nginx","order":6,"date":"2022-03-20T00:00:00.000Z","author":"h7ml","category":"nginx","tag":"nginx","title":"Https 证书配置","description":"Https 证书配置 不安全的 http 协议 http 在传输的过程中都是明文，这导致在客户端到服务器请求的过程中会被拦截数据导致数据泄露。 对称加密 image-20220907133558872image-20220907133558872 对称加密可以通过加密算法给数据进行安全一点的加密，但是这样也很容易破解。 客户端使用加密算法对数据进行加密...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/nginx/https.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/nginx/https.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"Https 证书配置"}],["meta",{"property":"og:description","content":"Https 证书配置 不安全的 http 协议 http 在传输的过程中都是明文，这导致在客户端到服务器请求的过程中会被拦截数据导致数据泄露。 对称加密 image-20220907133558872image-20220907133558872 对称加密可以通过加密算法给数据进行安全一点的加密，但是这样也很容易破解。 客户端使用加密算法对数据进行加密..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220907133558872.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"nginx"}],["meta",{"property":"article:published_time","content":"2022-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Https 证书配置\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220907133558872.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220915153358600.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014144324807.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014144636291.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014162914185.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20221014163203113.png\\"],\\"datePublished\\":\\"2022-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"Https 证书配置","slug":"https-证书配置","link":"#https-证书配置","children":[]},{"level":2,"title":"不安全的 http 协议","slug":"不安全的-http-协议","link":"#不安全的-http-协议","children":[{"level":3,"title":"对称加密","slug":"对称加密","link":"#对称加密","children":[]},{"level":3,"title":"非对称加密","slug":"非对称加密","link":"#非对称加密","children":[]}]},{"level":2,"title":"CA 证书","slug":"ca-证书","link":"#ca-证书","children":[]},{"level":2,"title":"证书安装","slug":"证书安装","link":"#证书安装","children":[]},{"level":2,"title":"已安装的 Nginx 上开启 SSL 模块并配置 https","slug":"已安装的-nginx-上开启-ssl-模块并配置-https","link":"#已安装的-nginx-上开启-ssl-模块并配置-https","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":4.94,"words":1482},"filePathRelative":"posts/nginx/https.md","localizedDate":"2022年3月20日","excerpt":"<h2>Https 证书配置</h2>\\n<h2>不安全的 http 协议</h2>\\n<p>http 在传输的过程中都是<strong>明文</strong>，这导致在客户端到服务器请求的<strong>过程中会被拦截数据导致数据泄露</strong>。</p>\\n<h3>对称加密</h3>\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220907133558872.png\\" alt=\\"image-20220907133558872\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220907133558872</figcaption></figure>","autoDesc":true}');export{x as comp,b as data};
