import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as o,d as n,e,a as t,f as r}from"./app-Cbix2SPG.js";const c={},l=r(`<h1 id="说说你对插入排序的理解-如何实现-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对插入排序的理解-如何实现-应用场景"><span>说说你对插入排序的理解？如何实现？应用场景？</span></a></h1><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/912adc10-267f-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、是什么" tabindex="-1"><a class="header-anchor" href="#一、是什么"><span>一、是什么</span></a></h2><p>插入排序（Insertion Sort），一般也被称为直接插入排序。对于少量元素的排序，它是一个有效、简单的算法</p><p>其主要的实现思想是将数据按照一定的顺序一个一个的插入到有序的表中，最终得到的序列就是已经排序好的数据</p><p>插入排序的工作方式像许多人排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下</p><p>然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置，该正确位置需要从右到左将它与已在手中的每张牌进行比较</p><p>例如一个无序数组 3、1、7、5、2、4、9、6，将其升序的结果则如下：</p><p>一开始有序表中无数据，直接插入 3</p><p>从第二个数开始，插入一个元素 1，然后和有序表中记录 3 比较，1&lt;3，所以插入到记录 3 的左侧</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/9d24f5f0-267f-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>向有序表插入记录 7 时，同有序表中记录 3 进行比较，3&lt;7，所以插入到记录 3 的右侧</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/a6a954e0-267f-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>向有序表中插入记录 5 时，同有序表中记录 7 进行比较，5&lt;7，同时 5&gt;3，所以插入到 3 和 7 中间</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/b1981940-267f-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>照此规律，依次将无序表中的记录 4，9 和 6 插入到有序表中</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/bc2ed290-267f-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、如何实现" tabindex="-1"><a class="header-anchor" href="#二、如何实现"><span>二、如何实现</span></a></h2><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置</p><p>如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面</p><figure><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用代码表示则如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> preIndex<span class="token punctuation">,</span> current<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>preIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      preIndex<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较<code>N- 1</code>次，时间复杂度为<code>O(n)</code></p><p>最坏的情况是待排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为<code>O(n^2)</code></p><p>通过上面了解，可以看到插入排序是一种稳定的排序方式</p><h2 id="三、应用场景" tabindex="-1"><a class="header-anchor" href="#三、应用场景"><span>三、应用场景</span></a></h2><p>插入排序时间复杂度是 O(n2)，适用于数据量不大，算法稳定性要求高，且数据局部或整体有序的数列排序</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,30),d={href:"https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/7214992",target:"_blank",rel:"noopener noreferrer"},m={href:"http://data.biancheng.net/view/65.html",target:"_blank",rel:"noopener noreferrer"};function u(g,h){const a=p("ExternalLinkIcon");return i(),o("div",null,[l,n("ul",null,[n("li",null,[n("a",d,[e("https://baike.baidu.com/item/插入排序/7214992"),t(a)])]),n("li",null,[n("a",m,[e("http://data.biancheng.net/view/65.html"),t(a)])])])])}const v=s(c,[["render",u],["__file","insertionSort.html.vue"]]),w=JSON.parse(`{"path":"/posts/interview/algorithm/insertionSort.html","title":"说说你对插入排序的理解？如何实现？应用场景？","lang":"zh-CN","frontmatter":{"icon":"question","description":"前端物语|面试物语-说说你对插入排序的理解？如何实现？应用场景？","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>说说你对插入排序的理解？如何实现？应用场景？","order":7,"star":7,"date":"2023-03-09T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["interview","algorithm"],"tag":["interview","algorithm"],"shortTitle":"前端物语|面试物语-说说你对插入排序的理解？如何实现？应用场景？","isOriginal":false,"head":[["meta",{"name":"keywords","content":"说说你对插入排序的理解？如何实现？应用场景？"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/interview/algorithm/insertionSort.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/interview/algorithm/insertionSort.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"说说你对插入排序的理解？如何实现？应用场景？"}],["meta",{"property":"og:description","content":"前端物语|面试物语-说说你对插入排序的理解？如何实现？应用场景？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"说说你对插入排序的理解？如何实现？应用场景？"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:published_time","content":"2023-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说你对插入排序的理解？如何实现？应用场景？\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/interview/912adc10-267f-11ec-a752-75723a64e8f5.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/9d24f5f0-267f-11ec-a752-75723a64e8f5.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/a6a954e0-267f-11ec-8e64-91fdec0f05a1.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/b1981940-267f-11ec-8e64-91fdec0f05a1.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/bc2ed290-267f-11ec-a752-75723a64e8f5.png\\",\\"https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif\\"],\\"datePublished\\":\\"2023-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"一、是什么","slug":"一、是什么","link":"#一、是什么","children":[]},{"level":2,"title":"二、如何实现","slug":"二、如何实现","link":"#二、如何实现","children":[]},{"level":2,"title":"三、应用场景","slug":"三、应用场景","link":"#三、应用场景","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":3.1,"words":929},"filePathRelative":"posts/interview/algorithm/insertionSort.md","localizedDate":"2023年3月9日","excerpt":"\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/interview/912adc10-267f-11ec-a752-75723a64e8f5.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、是什么</h2>\\n<p>插入排序（Insertion Sort），一般也被称为直接插入排序。对于少量元素的排序，它是一个有效、简单的算法</p>\\n<p>其主要的实现思想是将数据按照一定的顺序一个一个的插入到有序的表中，最终得到的序列就是已经排序好的数据</p>"}`);export{v as comp,w as data};
