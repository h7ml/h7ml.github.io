import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const p={},e=t(`<h1 id="如何编写-javascript-引擎" tabindex="-1"><a class="header-anchor" href="#如何编写-javascript-引擎"><span>如何编写 JavaScript 引擎？</span></a></h1><p>JavaScript 引擎是解释和执行 JavaScript 代码的核心组件。</p><h2 id="词法分析器" tabindex="-1"><a class="header-anchor" href="#词法分析器"><span>词法分析器</span></a></h2><p>词法分析器是编译器中的一个重要组成部分，其作用是将源程序中的字符流转换为词法单元流，以便后续的语法分析。设计词法分析器的基本步骤如下：</p><ol><li>确定词法单元的类型和模式词法单元是源程序中的最小语法单位，例如标识符、关键字、常量、运算符等。在设计词法分析器时，需要确定每种词法单元的类型和对应的正则表达式模式，以便识别源程序中的词法单元。</li></ol><p>例如，对于一个简单的算术表达式语言，可以定义如下的词法单元类型和模式：</p><ul><li>标识符：以字母或下划线开头，后跟任意个字母、数字或下划线。</li><li>数字常量：一个或多个数字组成的字符串。</li><li>运算符：加号、减号、乘号、除号等。</li><li>左右括号：左括号、右括号。</li></ul><ol start="2"><li>编写正则表达式模式确定词法单元类型和模式后，需要编写对应的正则表达式模式，以便识别源程序中的词法单元。正则表达式是一种描述字符串模式的语言，可以用来匹配符合某种模式的字符串。</li></ol><p>例如，对于标识符，可以使用正则表达式[a-zA-Z_][a-zA-Z0-9_]*来匹配以字母或下划线开头、后跟任意个字母、数字或下划线的字符串。</p><ol start="3"><li>实现词法分析器在实现词法分析器时，可以使用自动机或递归下降分析等算法，对源程序进行扫描和识别。具体实现方式可以参考以下步骤：</li></ol><ul><li>读入源程序字符流，逐个字符进行扫描。</li><li>对每个字符进行分类，判断其属于哪种词法单元。</li><li>根据词法单元类型和模式，使用正则表达式进行匹配。</li><li>如果匹配成功，则生成对应的词法单元，并将其加入词法单元流中；否则，报告词法错误。</li></ul><ol start="4"><li>输出词法单元流在词法分析器完成扫描和识别后，需要将生成的词法单元流输出给后续的语法分析器。词法单元流可以使用链表、数组等数据结构来表示。</li></ol><p>例如，对于一个简单的算术表达式语言，源程序&quot;1+2*(3-4)&quot;的词法单元流可以表示为：</p><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>数字常量</td><td>1</td></tr><tr><td>运算符</td><td>+</td></tr><tr><td>数字常量</td><td>2</td></tr><tr><td>运算符</td><td>*</td></tr><tr><td>左括号</td><td>(</td></tr><tr><td>数字常量</td><td>3</td></tr><tr><td>运算符</td><td>-</td></tr><tr><td>数字常量</td><td>4</td></tr><tr><td>右括号</td><td>)</td></tr></tbody></table><h2 id="设计词法分析器" tabindex="-1"><a class="header-anchor" href="#设计词法分析器"><span>设计词法分析器</span></a></h2><p>词法分析器是编译器的一个重要组成部分，用于将源代码转换成标记流（Token Stream）。下面是一个简单的词法分析器的设计：</p><ol><li>定义 Token 类，用于表示标记。Token 类应该包含以下属性：</li></ol><ul><li>type：标记类型，例如关键字、标识符、运算符等。</li><li>value：标记的值，例如标识符的名称、数字的值等。</li><li>line：标记所在的行号。</li></ul><ol start="2"><li>定义词法分析器类，用于将源代码转换成标记流。词法分析器类应该包含以下方法：</li></ol><ul><li>getNextToken()：从源代码中读取下一个标记，并返回一个 Token 对象。</li><li>tokenize()：将整个源代码转换成标记流。</li></ul><ol start="3"><li>在 getNextToken()方法中，可以按照以下步骤进行：</li></ol><ul><li>跳过空格、制表符、换行符等空白字符。</li><li>判断当前字符是否为数字，如果是数字则读取整个数字，并返回一个数字类型的 Token 对象。</li><li>判断当前字符是否为字母，如果是字母则读取整个标识符，并判断是否为关键字，如果是则返回一个关键字类型的 Token 对象，否则返回一个标识符类型的 Token 对象。</li><li>判断当前字符是否为运算符，如果是则返回一个运算符类型的 Token 对象。</li><li>如果当前字符不是数字、字母或运算符，则返回一个未知类型的 Token 对象。</li></ul><ol start="4"><li>在 tokenize()方法中，可以按照以下步骤进行：</li></ol><ul><li>读取整个源代码。</li><li>循环调用 getNextToken()方法，直到读取完所有的标记。</li><li>返回一个包含所有 Token 对象的数组。</li></ul><h2 id="设计语法分析器" tabindex="-1"><a class="header-anchor" href="#设计语法分析器"><span>设计语法分析器</span></a></h2><p>语法分析器是编译器的另一个重要组成部分，用于将标记流转换成抽象语法树（Abstract Syntax Tree，AST）。下面是一个简单的语法分析器的设计：</p><ol><li>定义 AST 节点类，用于表示抽象语法树的节点。AST 节点类应该包含以下属性：</li></ol><ul><li>type：节点类型，例如表达式、语句、变量声明等。</li><li>value：节点的值，例如变量名、常量值等。</li><li>children：子节点列表，用于表示节点的子节点。</li></ul><ol start="2"><li>定义语法分析器类，用于将标记流转换成抽象语法树。语法分析器类应该包含以下方法：</li></ol><ul><li>parse()：解析标记流，并返回一个 AST 根节点。</li><li>在 parse()方法中，可以按照以下步骤进行：</li></ul><ol start="3"><li>读取标记流中的第一个标记，并根据标记的类型创建一个根节点。</li></ol><ul><li>根据语法规则，递归调用子节点的解析方法，创建子节点，并将子节点添加到根节点的子节点列表中。</li><li>如果当前标记不符合语法规则，则抛出语法错误异常。</li><li>重复步骤 2 和 3，直到解析完整个标记流。</li></ul><ol start="4"><li>在 AST 节点类中，可以定义一些辅助方法，例如：</li></ol><ul><li>isLeaf()：判断当前节点是否为叶子节点。</li><li>getChildren()：返回当前节点的子节点列表。</li><li>getType()：返回当前节点的类型。</li><li>getValue()：返回当前节点的值。以上是一个简单的语法分析器的设计，实际上还需要考虑很多细节，例如处理优先级、左结合性、右结合性等特殊情况。</li></ul><h2 id="实现-javascript-运行时" tabindex="-1"><a class="header-anchor" href="#实现-javascript-运行时"><span>实现 JavaScript 运行时</span></a></h2><p>实现 JavaScript 运行时需要实现以下几个部分：</p><ol><li><p>词法分析器：读取 JavaScript 代码并将其转换成标记流（Token Stream）。</p></li><li><p>语法分析器：将标记流转换成抽象语法树（Abstract Syntax Tree，AST）。</p></li><li><p>执行引擎：遍历抽象语法树，并执行其中的代码。</p></li><li><p>内置对象和函数：实现 JavaScript 的内置对象和函数，例如 Object、Array、Function 等。</p><p>下面是一个简单的 JavaScript 运行时的实现：</p><ol><li><p>词法分析器：使用正则表达式匹配 JavaScript 代码中的标记，并返回一个标记流（Token Stream）。</p></li><li><p>语法分析器：使用递归下降算法（Recursive Descent Parsing）将标记流转换成抽象语法树（Abstract Syntax Tree，AST）。</p></li><li><p>执行引擎：遍历抽象语法树，并执行其中的代码。</p></li></ol><ul><li>对于变量声明语句，创建一个变量并赋初值，将变量存入当前作用域中。</li><li>对于赋值语句，找到变量，并将其值赋为表达式的值。</li><li>对于表达式语句，计算表达式的值并忽略结果。</li><li>对于条件语句（if 语句），根据条件表达式的值判断执行哪个分支。</li><li>对于循环语句（for、while 语句），根据条件表达式的值判断是否执行循环体。</li><li>对于函数声明语句，创建一个函数对象并将其存入当前作用域中。</li><li>对于函数调用表达式，找到函数，并执行函数体。</li><li>对于对象属性访问表达式，找到对象并获取属性值。</li><li>对于数组元素访问表达式，找到数组并获取元素值。</li></ul><ol start="4"><li>内置对象和函数：实现 JavaScript 的内置对象和函数，例如 Object、Array、Function 等。可以使用 JavaScript 语言本身来实现这些内置对象和函数。</li></ol></li></ol><p>以上是一个简单的 JavaScript 运行时的实现，实际上还需要考虑很多细节，例如作用域、闭包、类型转换等特殊情况。</p><h2 id="实现-javascript-解释器" tabindex="-1"><a class="header-anchor" href="#实现-javascript-解释器"><span>实现 JavaScript 解释器</span></a></h2><p>JavaScript 解释器的设计应该包括以下几个部分：</p><h3 id="词法分析器-将-javascript-代码转换为标记流" tabindex="-1"><a class="header-anchor" href="#词法分析器-将-javascript-代码转换为标记流"><span>词法分析器：将 JavaScript 代码转换为标记流</span></a></h3><p>词法分析（Lexical Analysis）：将代码分解成单个的词法单元（tokens），例如关键字、标识符、运算符等。这可以通过正则表达式或手写解析器实现</p><h3 id="语法分析器-将标记流转换为语法树" tabindex="-1"><a class="header-anchor" href="#语法分析器-将标记流转换为语法树"><span>语法分析器：将标记流转换为语法树</span></a></h3><p>语法分析（Parsing）：将词法单元转换成语法树（Abstract Syntax Tree，AST），并检查语法错误。这可以通过手写递归下降解析器、LL 或 LR 分析器等实现。</p><h3 id="语义分析器-对语法树进行语义分析" tabindex="-1"><a class="header-anchor" href="#语义分析器-对语法树进行语义分析"><span>语义分析器：对语法树进行语义分析</span></a></h3><p>语义分析（Semantic Analysis）：对 AST 进行语义分析，检查类型、作用域、函数调用等。这可以通过遍历 AST 并应用静态或动态分析算法实现。</p><h3 id="执行器-执行语法树并输出结果" tabindex="-1"><a class="header-anchor" href="#执行器-执行语法树并输出结果"><span>执行器：执行语法树并输出结果</span></a></h3><p>将 AST 转换成可执行的机器代码或字节码。这可以通过直接解释、编译成本地代码或编译成中间代码并交给虚拟机执行等方式实现。</p><details class="hint-container details"><summary>点击查看 JavaScript 解释器的实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 词法分析器</span>
<span class="token keyword">function</span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">// 匹配关键字和标识符</span>
    match <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\s+|let|if|else|while|for|[a-zA-Z]\\w*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 匹配数字</span>
    match <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 匹配运算符</span>
    match <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\+|\\-|\\*|\\/|\\=|\\&gt;|\\&lt;|\\!|\\&amp;|\\|)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;operator&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 匹配括号和分号</span>
    match <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\(|\\)|\\{|\\}|\\;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 无法匹配的字符</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unexpected character at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 语法分析器</span>
<span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 匹配数字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;NumberLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">;</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 匹配标识符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;let&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> tokens<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token punctuation">}</span><span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 匹配括号</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expected &#39;)&#39; at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 无法匹配的表达式</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unexpected token at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 匹配变量声明语句</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;let&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> tokens<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token punctuation">}</span><span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expected &#39;=&#39; at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      node<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expected &#39;;&#39; at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 匹配条件语句</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;if&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;IfStatement&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expected &#39;(&#39; at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      node<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expected &#39;)&#39; at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      pos<span class="token operator">++</span><span class="token punctuation">;</span>
      node<span class="token punctuation">.</span>consequent <span class="token operator">=</span> <span class="token function">parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;else&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pos<span class="token operator">++</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token function">parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 无法匹配的语句</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unexpected token at position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ast<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> ast<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  let x = 1;
  if (x &gt; 0) {
    console.log(&#39;Positive&#39;);
  } else {
    console.log(&#39;Non-positive&#39;);
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="实现-javascript-编译器" tabindex="-1"><a class="header-anchor" href="#实现-javascript-编译器"><span>实现 JavaScript 编译器</span></a></h2><h3 id="词法编译器-lexical-analyzer" tabindex="-1"><a class="header-anchor" href="#词法编译器-lexical-analyzer"><span>词法编译器（Lexical Analyzer）</span></a></h3><p>词法编译器（Lexical Analyzer）也被称为词法分析器（Lexer），是编译器中的一个组件，用于将源代码转换为令牌（Token）序列。令牌是编程语言中的基本单元，它们由词素（Lexeme）和令牌类型（Token Type）组成。</p><p>词法编译器通常由两个主要部分组成：令牌定义和扫描器。令牌定义是一组正则表达式，用于描述编程语言中的各种令牌类型。扫描器则根据这些正则表达式，对源代码进行扫描，并将其转换为令牌序列。</p><details class="hint-container details"><summary>点击查看词法编译器的实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">TOKEN_TYPES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">IDENTIFIER</span><span class="token operator">:</span> <span class="token string">&#39;IDENTIFIER&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">NUMBER</span><span class="token operator">:</span> <span class="token string">&#39;NUMBER&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">OPERATOR</span><span class="token operator">:</span> <span class="token string">&#39;OPERATOR&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">PUNCTUATION</span><span class="token operator">:</span> <span class="token string">&#39;PUNCTUATION&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">KEYWORD</span><span class="token operator">:</span> <span class="token string">&#39;KEYWORD&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">KEYWORDS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;if&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;else&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;while&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;var&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;let&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;const&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">OPERATORS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;==&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&amp;&amp;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;||&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PUNCTUATIONS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> char <span class="token operator">=</span> code<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 处理数字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">+=</span> char<span class="token punctuation">;</span>
        char <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TOKEN_TYPES</span><span class="token punctuation">.</span><span class="token constant">NUMBER</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 处理标识符和关键字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">+=</span> char<span class="token punctuation">;</span>
        char <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">KEYWORDS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TOKEN_TYPES</span><span class="token punctuation">.</span><span class="token constant">KEYWORD</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TOKEN_TYPES</span><span class="token punctuation">.</span><span class="token constant">IDENTIFIER</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 处理运算符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">OPERATORS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">OPERATORS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">+=</span> char<span class="token punctuation">;</span>
        char <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TOKEN_TYPES</span><span class="token punctuation">.</span><span class="token constant">OPERATOR</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 处理标点符号</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">PUNCTUATIONS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TOKEN_TYPES</span><span class="token punctuation">.</span><span class="token constant">PUNCTUATION</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> char <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      current<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    current<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>定义了一组令牌类型，包括标识符、数字、运算符、标点符号和关键字。然后，我们使用正则表达式和数组常量来定义这些令牌类型的规则。</p><p>tokenize 函数中，遍历源代码中的每个字符，并根据其类型生成相应的令牌。例如，如果字符是数字，则我们将其解析为数字令牌，并将其添加到令牌序列中。</p><h3 id="代码生成器-将语法树转换为可执行的机器代码" tabindex="-1"><a class="header-anchor" href="#代码生成器-将语法树转换为可执行的机器代码"><span>代码生成器：将语法树转换为可执行的机器代码</span></a></h3><p>代码生成器（Code Generator）是编译器中的一个组件，用于将抽象语法树（AST）转换为目标代码，例如机器代码、字节码或其他编程语言的代码。</p><p>代码生成器通常由两个主要部分组成：代码生成规则和代码生成器。代码生成规则是一组规则，用于描述如何将 AST 节点转换为目标代码。代码生成器则根据这些规则，对 AST 节点进行遍历，并将其转换为目标代码。</p><details class="hint-container details"><summary>点击查看代码生成器的实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>generate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;NumberLiteral&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>generate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid AST node: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="执行器-执行机器代码并输出结果" tabindex="-1"><a class="header-anchor" href="#执行器-执行机器代码并输出结果"><span>执行器：执行机器代码并输出结果</span></a></h3><p>执行器（Executor）是编译器中的一个组件，用于执行目标代码，例如机器代码或字节码，并输出结果。执行器通常由两个主要部分组成：解释器和虚拟机。</p><p>解释器是一种直接执行目标代码的方法，它将目标代码逐条解释并执行。虚拟机是一种模拟计算机硬件的方法，它将目标代码转换为一组指令，并在虚拟计算机上执行这些指令。</p><details class="hint-container details"><summary>点击查看 JavaScript 编译器的实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> bytecode <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> instructions <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">createVM</span><span class="token punctuation">(</span>instructions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createVM</span><span class="token punctuation">(</span><span class="token parameter">instructions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token punctuation">[</span><span class="token operator">++</span>sp<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>sp<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ip <span class="token operator">&lt;</span> instructions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> instruction <span class="token operator">=</span> instructions<span class="token punctuation">[</span>ip<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">switch</span> <span class="token punctuation">(</span>instruction<span class="token punctuation">.</span>opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;LOAD&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">push</span><span class="token punctuation">(</span>instruction<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&#39;ADD&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">push</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&#39;SUB&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">push</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&#39;MUL&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">push</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&#39;DIV&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">push</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&#39;PRINT&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid opcode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>instruction<span class="token punctuation">.</span>opcode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> run <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在这个例子中，我们定义了一个 execute 函数，它接受一个 JavaScript 源代码字符串作为输入，并将其编译为目标代码，然后使用虚拟机执行目标代码，并输出结果。</p><p>在 createVM 函数中，我们定义了一组虚拟机指令，包括 LOAD（将常量加载到栈中）、ADD（将栈顶两个值相加）、SUB（将栈顶两个值相减）、MUL（将栈顶两个值相乘）、DIV（将栈顶两个值相除）和 PRINT（打印栈顶的值）。然后，我们使用一个简单的栈来模拟虚拟机的堆栈，并在 run 函数中执行指令序列。</p><p>在 execute 函数中，我们首先将源代码编译为目标代码，然后将其解析为指令序列，并使用 createVM 函数创建一个虚拟机。最后，我们调用虚拟机的 run 函数，执行指令序列，并输出结果。</p>`,67),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","js-engine.html.vue"]]),d=JSON.parse(`{"path":"/posts/js-engine.html","title":"如何编写 JavaScript 引擎？","lang":"zh-CN","frontmatter":{"icon":"question","description":"前端物语|如何编写JavaScript引擎？","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>前端物语|如何编写JavaScript引擎？","order":3,"star":3,"date":"2022-10-07T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["engine","javascript"],"tag":["engine","javascript"],"shortTitle":"前端物语|如何编写JavaScript引擎？","isOriginal":false,"head":[["meta",{"name":"keywords","content":"前端物语|如何编写JavaScript引擎？"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/js-engine.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/js-engine.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"如何编写 JavaScript 引擎？"}],["meta",{"property":"og:description","content":"前端物语|如何编写JavaScript引擎？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"如何编写 JavaScript 引擎？"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"engine"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2022-10-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何编写 JavaScript 引擎？\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2022-10-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"词法分析器","slug":"词法分析器","link":"#词法分析器","children":[]},{"level":2,"title":"设计词法分析器","slug":"设计词法分析器","link":"#设计词法分析器","children":[]},{"level":2,"title":"设计语法分析器","slug":"设计语法分析器","link":"#设计语法分析器","children":[]},{"level":2,"title":"实现 JavaScript 运行时","slug":"实现-javascript-运行时","link":"#实现-javascript-运行时","children":[]},{"level":2,"title":"实现 JavaScript 解释器","slug":"实现-javascript-解释器","link":"#实现-javascript-解释器","children":[{"level":3,"title":"词法分析器：将 JavaScript 代码转换为标记流","slug":"词法分析器-将-javascript-代码转换为标记流","link":"#词法分析器-将-javascript-代码转换为标记流","children":[]},{"level":3,"title":"语法分析器：将标记流转换为语法树","slug":"语法分析器-将标记流转换为语法树","link":"#语法分析器-将标记流转换为语法树","children":[]},{"level":3,"title":"语义分析器：对语法树进行语义分析","slug":"语义分析器-对语法树进行语义分析","link":"#语义分析器-对语法树进行语义分析","children":[]},{"level":3,"title":"执行器：执行语法树并输出结果","slug":"执行器-执行语法树并输出结果","link":"#执行器-执行语法树并输出结果","children":[]}]},{"level":2,"title":"实现 JavaScript 编译器","slug":"实现-javascript-编译器","link":"#实现-javascript-编译器","children":[{"level":3,"title":"词法编译器（Lexical Analyzer）","slug":"词法编译器-lexical-analyzer","link":"#词法编译器-lexical-analyzer","children":[]},{"level":3,"title":"代码生成器：将语法树转换为可执行的机器代码","slug":"代码生成器-将语法树转换为可执行的机器代码","link":"#代码生成器-将语法树转换为可执行的机器代码","children":[]},{"level":3,"title":"执行器：执行机器代码并输出结果","slug":"执行器-执行机器代码并输出结果","link":"#执行器-执行机器代码并输出结果","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":13.53,"words":4060},"filePathRelative":"posts/js-engine.md","localizedDate":"2022年10月7日","excerpt":"\\n<p>JavaScript 引擎是解释和执行 JavaScript 代码的核心组件。</p>\\n<h2>词法分析器</h2>\\n<p>词法分析器是编译器中的一个重要组成部分，其作用是将源程序中的字符流转换为词法单元流，以便后续的语法分析。设计词法分析器的基本步骤如下：</p>\\n<ol>\\n<li>确定词法单元的类型和模式词法单元是源程序中的最小语法单位，例如标识符、关键字、常量、运算符等。在设计词法分析器时，需要确定每种词法单元的类型和对应的正则表达式模式，以便识别源程序中的词法单元。</li>\\n</ol>\\n<p>例如，对于一个简单的算术表达式语言，可以定义如下的词法单元类型和模式：</p>\\n<ul>\\n<li>标识符：以字母或下划线开头，后跟任意个字母、数字或下划线。</li>\\n<li>数字常量：一个或多个数字组成的字符串。</li>\\n<li>运算符：加号、减号、乘号、除号等。</li>\\n<li>左右括号：左括号、右括号。</li>\\n</ul>"}`);export{k as comp,d as data};
