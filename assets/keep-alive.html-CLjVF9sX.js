import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,d as e,e as a,a as t,f as s}from"./app-Cbix2SPG.js";const i={},d=s('<h2 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive"><span>keep-alive</span></a></h2><p><code>keep-alive</code>是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p><p><code>activated</code>和<code>deactivated</code>两个生命周期, 将会在<code>&lt;keep-alive&gt;</code>树内的所有嵌套组件中触发, 用来得知当前组件是否处于活跃状态。</p><ul><li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li><li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li><li>max - 数字。最多可以缓存多少组件实例。</li></ul><p>实现原理：</p>',5),u={href:"https://ustbhuangyi.github.io/vue-analysis/v2/extend/keep-alive.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8Akeep-alive%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.MarkDown",target:"_blank",rel:"noopener noreferrer"},k=s(`<h2 id="组件中-data-为什么是一个函数" tabindex="-1"><a class="header-anchor" href="#组件中-data-为什么是一个函数"><span>组件中 data 为什么是一个函数</span></a></h2><p>为什么组件中的 <code>data</code> 必须是一个函数，然后 return 一个对象，而 <code>new Vue</code> 实例里，<code>data</code> 可以直接是一个对象？</p><p>因为组件是用来复用的，且 JS 里<strong>对象是引用关系</strong>，如果组件中 <code>data</code> 是一个对象，那么这样作用域没有隔离，子组件中的 <code>data</code> 属性值会相互影响，如果组件中 <code>data</code> 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 <code>data</code> 属性值不会互相影响；而 <code>new Vue</code> 的实例，是不会被复用的，因此不存在引用对象的问题。</p><h2 id="父子组件钩子函数执行顺序" tabindex="-1"><a class="header-anchor" href="#父子组件钩子函数执行顺序"><span>父子组件钩子函数执行顺序</span></a></h2><p>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</p><ul><li>加载渲染过程</li></ul><p>父 <code>beforeCreate</code> -&gt; 父 <code>created</code> -&gt; 父 <code>beforeMount</code> -&gt; 子 <code>beforeCreate</code> -&gt; 子 <code>created</code> -&gt; 子 <code>beforeMount</code> -&gt; 子 <code>mounted</code> -&gt; 父 <code>mounted</code></p><ul><li>子组件更新过程</li></ul><p>父 <code>beforeUpdate</code> -&gt; 子 <code>beforeUpdate</code> -&gt; 子 <code>updated</code> -&gt; 父 <code>updated</code></p><ul><li>父组件更新过程</li></ul><p>父 <code>beforeUpdate</code> -&gt; 父 <code>updated</code></p><ul><li>销毁过程</li></ul><p>父 <code>beforeDestroy</code> -&gt; 子 <code>beforeDestroy</code> -&gt; 子 <code>destroyed</code> -&gt; 父 <code>destroyed</code></p><h2 id="父组件监听子组件的生命周期" tabindex="-1"><a class="header-anchor" href="#父组件监听子组件的生命周期"><span>父组件监听子组件的生命周期</span></a></h2><p>比如有父组件 <code>Parent</code> 和子组件 <code>Child</code>，如果父组件监听到子组件挂载 <code>mounted</code> 就做一些逻辑处理，可以通过以下写法实现：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>// Parent.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@mounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>

// Child.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;mounted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上需要手动通过 <code>$emit</code> 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 <code>@hook</code> 来监听即可，如下所示：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>// Parent.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name"><span class="token namespace">@hook:</span>mounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;父组件监听到 mounted 钩子函数 ...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

// Child.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子组件触发 mounted 钩子函数 ...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

// 以上输出顺序为： // 子组件触发 mounted 钩子函数 ... // 父组件监听到 mounted 钩子函数 ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然 <code>@hook</code> 方法不仅仅是可以监听 <code>mounted</code>，其它的生命周期事件，例如：<code>created</code>，<code>updated</code> 等都可以监听。</p>`,19);function v(m,g){const n=p("ExternalLinkIcon");return c(),l("div",null,[d,e("ul",null,[e("li",null,[e("a",u,[a("keep-alive"),t(n)])]),e("li",null,[e("a",r,[a("聊聊 keep-alive 组件的使用及其实现原理"),t(n)])])]),k])}const f=o(i,[["render",v],["__file","keep-alive.html.vue"]]),_=JSON.parse('{"path":"/posts/vue/keep-alive.html","title":"keep-alive","lang":"zh-CN","frontmatter":{"icon":"vue","order":3,"date":"2021-07-12T00:00:00.000Z","author":"h7ml","title":"keep-alive","category":"vue","tag":["vue","keep-alive"],"star":true,"lastUpdated":false,"description":"keep-alive keep-alive是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。 activated和deactivated两个生命周期, 将会在<keep-alive>树内的所有嵌套组件中触发, 用来得知当前组件是否处于活跃状态。 include - 字符串或正则表达式。只有名称匹配的组件会被缓存。 exc...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/vue/keep-alive.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/vue/keep-alive.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"keep-alive"}],["meta",{"property":"og:description","content":"keep-alive keep-alive是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。 activated和deactivated两个生命周期, 将会在<keep-alive>树内的所有嵌套组件中触发, 用来得知当前组件是否处于活跃状态。 include - 字符串或正则表达式。只有名称匹配的组件会被缓存。 exc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"keep-alive"}],["meta",{"property":"article:published_time","content":"2021-07-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"keep-alive\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"keep-alive","slug":"keep-alive","link":"#keep-alive","children":[]},{"level":2,"title":"组件中 data 为什么是一个函数","slug":"组件中-data-为什么是一个函数","link":"#组件中-data-为什么是一个函数","children":[]},{"level":2,"title":"父子组件钩子函数执行顺序","slug":"父子组件钩子函数执行顺序","link":"#父子组件钩子函数执行顺序","children":[]},{"level":2,"title":"父组件监听子组件的生命周期","slug":"父组件监听子组件的生命周期","link":"#父组件监听子组件的生命周期","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":2.49,"words":747},"filePathRelative":"posts/vue/keep-alive.md","localizedDate":"2021年7月12日","excerpt":"<h2>keep-alive</h2>\\n<p><code>keep-alive</code>是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p>\\n<p><code>activated</code>和<code>deactivated</code>两个生命周期, 将会在<code>&lt;keep-alive&gt;</code>树内的所有嵌套组件中触发, 用来得知当前组件是否处于活跃状态。</p>\\n<ul>\\n<li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>\\n<li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>\\n<li>max - 数字。最多可以缓存多少组件实例。</li>\\n</ul>","autoDesc":true}');export{f as comp,_ as data};
