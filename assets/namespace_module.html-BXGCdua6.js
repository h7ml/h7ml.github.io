import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,d as e,e as a,a as s,f as i}from"./app-Cbix2SPG.js";const l={},r=i(`<h1 id="说说对-typescript-中命名空间与模块的理解-区别" tabindex="-1"><a class="header-anchor" href="#说说对-typescript-中命名空间与模块的理解-区别"><span>说说对 TypeScript 中命名空间与模块的理解？区别？</span></a></h1><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/9378d760-137e-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、模块" tabindex="-1"><a class="header-anchor" href="#一、模块"><span>一、模块</span></a></h2><p><code>TypeScript</code> 与<code>ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p><p>相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的</p><p>例如我们在在一个 <code>TypeScript</code> 工程下建立一个文件 <code>1.ts</code>，声明一个变量<code>a</code>，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在另一个文件同样声明一个变量<code>a</code>，这时候会出现错误信息</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/interview/a239d970-137e-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>提示重复声明<code>a</code>变量，但是所处的空间是全局的</p><p>如果需要解决这个问题，则通过<code>import</code>或者<code>export</code>引入模块系统即可，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>typescript</code>中，<code>export</code>关键字可以导出变量或者类型，用法与<code>es6</code>模块一致，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> String<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>import</code> 引入模块，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> Person <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./export&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、命名空间" tabindex="-1"><a class="header-anchor" href="#二、命名空间"><span>二、命名空间</span></a></h2><p>命名空间一个最明确的目的就是解决重名问题</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p><p>这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中</p><p><code>TypeScript</code> 中命名空间使用 <code>namespace</code> 来定义，语法格式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> SomeNameSpaceName <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeInterfaceName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeClassName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上定义了一个命名空间 <code>SomeNameSpaceName</code>，如果我们需要在外部可以调用 <code>SomeNameSpaceName</code> 中的类和接口，则需要在类和接口添加 <code>export</code> 关键字</p><p>使用方式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>SomeNameSpaceName<span class="token punctuation">.</span>SomeClassName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命名空间本质上是一个对象，作用是将一系列相关的全局变量组织到一个对象的属性，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Letter <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成<code>js</code>如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Letter<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Letter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Letter<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  Letter<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  Letter<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  Letter<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Letter <span class="token operator">||</span> <span class="token punctuation">(</span>Letter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、区别" tabindex="-1"><a class="header-anchor" href="#三、区别"><span>三、区别</span></a></h2><ul><li><p>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中</p></li><li><p>像命名空间一样，模块可以包含代码和声明。 不同的是模块可以声明它的依赖</p></li><li><p>在正常的 TS 项目开发过程中并不建议用命名空间，但通常在通过 d.ts 文件标记 js 库类型的时候使用命名空间，主要作用是给编译器编写代码的时候参考使用</p></li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,32),d={href:"https://www.tslang.cn/docs/handbook/modules.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.tslang.cn/docs/handbook/namespaces.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.tslang.cn/docs/handbook/namespaces-and-modules.html",target:"_blank",rel:"noopener noreferrer"};function k(v,h){const n=p("ExternalLinkIcon");return o(),c("div",null,[r,e("ul",null,[e("li",null,[e("a",d,[a("https://www.tslang.cn/docs/handbook/modules.html"),s(n)])]),e("li",null,[e("a",u,[a("https://www.tslang.cn/docs/handbook/namespaces.html"),s(n)])]),e("li",null,[e("a",m,[a("https://www.tslang.cn/docs/handbook/namespaces-and-modules.html"),s(n)])])])])}const b=t(l,[["render",k],["__file","namespace_module.html.vue"]]),w=JSON.parse(`{"path":"/posts/interview/typescript/namespace_module.html","title":"说说对 TypeScript 中命名空间与模块的理解？区别？","lang":"zh-CN","frontmatter":{"icon":"question","description":"前端物语|面试物语-说说对 TypeScript 中命名空间与模块的理解？区别？","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>说说对 TypeScript 中命名空间与模块的理解？区别？","order":5,"star":5,"date":"2023-03-09T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["interview","typescript"],"tag":["interview","typescript"],"shortTitle":"前端物语|面试物语-说说对 TypeScript 中命名空间与模块的理解？区别？","isOriginal":false,"head":[["meta",{"name":"keywords","content":"说说对 TypeScript 中命名空间与模块的理解？区别？"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/interview/typescript/namespace_module.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/interview/typescript/namespace_module.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"说说对 TypeScript 中命名空间与模块的理解？区别？"}],["meta",{"property":"og:description","content":"前端物语|面试物语-说说对 TypeScript 中命名空间与模块的理解？区别？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"说说对 TypeScript 中命名空间与模块的理解？区别？"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:published_time","content":"2023-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说对 TypeScript 中命名空间与模块的理解？区别？\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/interview/9378d760-137e-11ec-8e64-91fdec0f05a1.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/interview/a239d970-137e-11ec-a752-75723a64e8f5.png\\"],\\"datePublished\\":\\"2023-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"一、模块","slug":"一、模块","link":"#一、模块","children":[]},{"level":2,"title":"二、命名空间","slug":"二、命名空间","link":"#二、命名空间","children":[]},{"level":2,"title":"三、区别","slug":"三、区别","link":"#三、区别","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":2.9,"words":870},"filePathRelative":"posts/interview/typescript/namespace_module.md","localizedDate":"2023年3月9日","excerpt":"\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/interview/9378d760-137e-11ec-8e64-91fdec0f05a1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、模块</h2>\\n<p><code>TypeScript</code> 与<code>ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p>"}`);export{b as comp,w as data};
