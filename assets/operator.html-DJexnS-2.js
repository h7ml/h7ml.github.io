import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as e}from"./app-Cbix2SPG.js";const p={},t=e(`<h1 id="javascript-运算符" tabindex="-1"><a class="header-anchor" href="#javascript-运算符"><span>JavaScript 运算符</span></a></h1><p>ECMAScript 中的操作符比较独特，包括字符串、数值、布尔值，甚至还有对象。应用给对象时通常会调用会调用<code>valueOf()</code>或<code>toString()</code>方法。</p><h2 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符"><span>一元运算符</span></a></h2><h3 id="递增-递减" tabindex="-1"><a class="header-anchor" href="#递增-递减"><span>递增/递减</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">++</span>n<span class="token punctuation">;</span> <span class="token comment">// 先自增 1，再运算</span>
n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 先运算，再自增 1</span>
<span class="token operator">--</span>n<span class="token punctuation">;</span> <span class="token comment">// n-- 同理</span>
<span class="token operator">!</span>n<span class="token punctuation">;</span> <span class="token comment">// 转换为 Boolean 值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作符在前，先自递增/递减后再进行运算。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token operator">--</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token keyword">let</span> num4 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作符在后，先运算再进行自递增/递减。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num3 <span class="token operator">=</span> num1<span class="token operator">--</span> <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token keyword">let</span> num4 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 是有效的数值形式：则转换为数值再应用改变。</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 不是有效的数值：则将变量的值设置为NaN 。</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 如果是false，则转换为0 再应用改变。如果是true，则转换为1 再应用改变。</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span> <span class="token comment">// 对于浮点值，加1 或减1。</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 开头说过，如果是对象，valueOf()方法取得可以操作的值，再应用上面的规则。如果是NaN，则调用toString()并再次应用其他规则。</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
s1<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 值变成数值3</span>
s2<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 值变成NaN</span>
b<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 值变成数值1</span>
f<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 值变成0.10000000000000009（因为浮点数不精确）</span>
o<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 值变成-2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个变量同时等于两个值" tabindex="-1"><a class="header-anchor" href="#一个变量同时等于两个值"><span>一个变量同时等于两个值</span></a></h3><p>参考上面所说的，如果是对象，操作符会先调用 valueOf 取值，重写 valueOf 即可使 o == 1 且 o == 2</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> o <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一元加和减" tabindex="-1"><a class="header-anchor" href="#一元加和减"><span>一元加和减</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;01&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">&#39;1.1&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span> <span class="token operator">+</span>s1<span class="token punctuation">;</span> <span class="token comment">// 值变成数值1</span>
s1 <span class="token operator">=</span> <span class="token operator">-</span>s1<span class="token punctuation">;</span> <span class="token comment">// 值变成数值-1</span>
s2 <span class="token operator">=</span> <span class="token operator">+</span>s2<span class="token punctuation">;</span> <span class="token comment">// 值变成数值1.1</span>
s2 <span class="token operator">=</span> <span class="token operator">-</span>s2<span class="token punctuation">;</span> <span class="token comment">// 值变成数值-1.1</span>
s3 <span class="token operator">=</span> <span class="token operator">+</span>s3<span class="token punctuation">;</span> <span class="token comment">// 值变成NaN</span>
b <span class="token operator">=</span> <span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// 值变成数值0</span>
f <span class="token operator">=</span> <span class="token operator">+</span>f<span class="token punctuation">;</span> <span class="token comment">// 不变，还是1.1</span>
f <span class="token operator">=</span> <span class="token operator">-</span>f<span class="token punctuation">;</span> <span class="token comment">// 变成-1.1</span>
o <span class="token operator">=</span> <span class="token operator">+</span>o<span class="token punctuation">;</span> <span class="token comment">// 值变成数值-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><ul><li><p>+ 加法比较特殊</p><ul><li>两边都是数字时，做数学运算</li><li>一边为字符串，进行字符串连接</li><li>一边为对象类型 object，将对象使用 toString 方法转换为字符串，进行连接</li></ul></li><li><p>- * / % 只能数学运算 隐式用 Number 转换 不能转 ---&gt; NaN</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1010&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1,2,310&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;joth&#39;</span> <span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Object]10&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -10</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">%</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">%</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h2><ul><li>大于 &gt;，小于 &lt;，大于等于 &gt;=，小于等于 &lt;=， 等于 ==，全等 =<mark>，不等于 !=，不全等 !</mark>。</li><li>== 等于时：只需要值相等，不用管数据类型，实际上也是通过 Number 进行类型转换</li><li>=== 全等时：不会进行数据类型转换 那么需要两边的数据类型和值都相等</li><li>特例 undefined == null 为真（ js 真理）undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;10&#39;</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token string">&#39;10&#39;</span> <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false 数据类型不同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><ul><li>非 ! 取反 非真为假 非假为真</li><li>与 &amp;&amp; 与运算见假则假</li><li>或 || 或运算见真则真</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// 与运算：与运算见假则假</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 或运算：或运算见真则真</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;10&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="短路运算" tabindex="-1"><a class="header-anchor" href="#短路运算"><span>短路运算</span></a></h2><ul><li>短路与： 第一个值为 true 返回第二个值， 第一个值为 false，则返回第一个值</li><li>短路或： 第一个值为 true 返回第一个值， 第一个值为 false，则返回第二个值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 短路与</span>
<span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token comment">// 短路或</span>
<span class="token number">10</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h2><ul><li>方法: ? : ---&gt; 判断条件 ? 当条件为真时 返回的值 ： 当条件为假时返回的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h2><ul><li>= 赋值 += -= *= /= %=</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>a <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 a = a + 5;</span>
a <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 a = a - 10;</span>
a <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 a = a * 3</span>
a <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 a = a / 2</span>
a <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 a = a % 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换"><span>隐式类型转换</span></a></h2><ul><li>+ - * / %</li><li>+ 转换方式比较多</li><li>- * / % 都是使用 Number 转数字 能转数字就运算 不能转数字就 NaN</li></ul><h2 id="括号-逗号运算符" tabindex="-1"><a class="header-anchor" href="#括号-逗号运算符"><span>括号/逗号运算符</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 返回最后一项</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>应用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>prev <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prev <span class="token operator">+</span> next<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指数运算符" tabindex="-1"><a class="header-anchor" href="#指数运算符"><span>指数运算符</span></a></h2><ul><li>ES2016 新增了一个指数运算符（**）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>

<span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 512，相当于 2 ** (3 ** 2)</span>
a <span class="token operator">**=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 a = a * a;</span>
b <span class="token operator">**=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 b = b * b * b;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位操作符" tabindex="-1"><a class="header-anchor" href="#位操作符"><span>位操作符</span></a></h2><ul><li><p>ECMAScript 中的所有数值都以 IEEE 754 64 位格式存储</p></li><li><p>但位操作并不直接应用到 64 位表示，而是先把值转换为 32 位整数，位操作之后再把结果转换为 64 位。（所以只需要考虑 32 位）</p></li><li><p>32 位，前面 31 位表示数值，32 位表示数值的符号，0 表示正，1 表示负。（称为符号位）</p></li><li><p>正值以二进制格式存储，31 位都是 2 的幂。（第一位 2º，第二位 2¹，以此类推）</p></li></ul><p>数值 18 用二进制来表示为 00000000000000000000000000010010（32 位数），前面的 0 可以省略 10010。</p><p>10010 = (2^4 <em>1)+(2^3</em> 0)+(2^2 <em>0)+(2^1</em> 1)+(2^0 * 0) = 18</p><ul><li>负数以二补数（补码）储存 <ol><li>以绝对值的二进制表示（-18 先确定 18 的二进制）</li><li>0 变成 1，1 变成 0（称为补数/补码）</li><li>给结果加 1</li></ol></li></ul><p>按上述步骤表示 -18：</p><p>第一步：表示绝对值 18</p><p>0000 0000 0000 0000 0000 0000 0001 0010</p><p>第二步：补码</p><p>1111 1111 1111 1111 1111 1111 1110 1101</p><p>第三部：给补数加 1</p><p>1111 1111 1111 1111 1111 1111 1110 1110 （这就是 -18 的二进制表示）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;-10010&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出&#39;-10010&#39;，这个过程会求处二补数，然后符合逻辑的表示出来。ECMA 中存在无符号的整数，也就是说无符号的整数比有符号的范围更大，因为符号位可以用来表示数值。</p><h3 id="按位非" tabindex="-1"><a class="header-anchor" href="#按位非"><span>按位非</span></a></h3><p>~ 来表示，作用是返回数值的补数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// 二进制00000000000000000000000000011001</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token operator">~</span>num1<span class="token punctuation">;</span> <span class="token comment">// 二进制11111111111111111111111111100110 这里取反后还减了 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的结果比<code>-num1 - 1</code>结果更快，位操作符是在底层表示进行的。</p><p>应用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">25.513</span><span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token operator">~</span>a<span class="token punctuation">;</span> <span class="token comment">// 25 取整</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">5.9</span><span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token operator">~</span>b<span class="token punctuation">;</span> <span class="token comment">// 5 取整</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>~a 反补减 1 得 -26，再~ 反补得到正 26 减 1 得到 25。</p><h3 id="按位与" tabindex="-1"><a class="header-anchor" href="#按位与"><span>按位与</span></a></h3><p>&amp; 来表示，两个数的位 1 1 得 1，0 1 得 0， 0 0 得 0。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>25 = 0000 0000 0000 0000 0000 0000 0001 1001</p><p>  3 = 0000 0000 0000 0000 0000 0000 0000 0011</p><p>只有都为 1 时二进制位才取 1</p><p>0000 0000 0000 0000 0000 0000 0000 0001</p><p>所以结果就是 1</p><h3 id="按位或" tabindex="-1"><a class="header-anchor" href="#按位或"><span>按位或</span></a></h3><p>| 来表示，看懂了按位与那么按位或也是同理。有一个位为 1 则为 1，都为 0 时则为 0。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span>
<span class="token comment">// 25 = 0000 0000 0000 0000 0000 0000 0001 1001</span>
<span class="token comment">//  3 = 0000 0000 0000 0000 0000 0000 0000 0011</span>
<span class="token comment">// 得   0000 0000 0000 0000 0000 0000 0001 1011</span>
<span class="token comment">// 11011 等于27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按位异或" tabindex="-1"><a class="header-anchor" href="#按位异或"><span>按位异或</span></a></h3><p>^ 来表示，它只有在一位是 1，一位是 0 时才会得 1。都是 0 或都是 1 则得 0。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 26</span>
<span class="token comment">// 25 = 0000 0000 0000 0000 0000 0000 0001 1001</span>
<span class="token comment">//  3 = 0000 0000 0000 0000 0000 0000 0000 0011</span>
<span class="token comment">// 得   0000 0000 0000 0000 0000 0000 0001 1010</span>
<span class="token comment">// 二进制码11010 等于26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相同的两个值，按位异或比按位或得出的结果小 1</p><h3 id="左移" tabindex="-1"><a class="header-anchor" href="#左移"><span>左移</span></a></h3><p>&lt;&lt; 表示，二进制位向左移动的位数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 10</span>
<span class="token keyword">let</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 1000000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十进制 64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2 的二进制 10，向左移 5，补了 5 个 0,1000000 即为 64。</p><p>但是左移会保留符号，-2 左移 5 得到 -64，并不是 64</p><h3 id="有符号右移" tabindex="-1"><a class="header-anchor" href="#有符号右移"><span>有符号右移</span></a></h3><p>&gt;&gt; 表示，与左移同理，也会保留符号。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 1000000</span>
<span class="token keyword">let</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十进制 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无符号右移" tabindex="-1"><a class="header-anchor" href="#无符号右移"><span>无符号右移</span></a></h3><p>&gt;&gt;&gt; 表示，</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 1000000</span>
<span class="token keyword">let</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十进制 2</span>

<span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">64</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 11111111111111111111111111000000</span>
<span class="token keyword">let</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示 134217726</span>
<span class="token comment">// 把符号位也当做值来位移了，导致结果相差很大</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89),o=[t];function l(c,i){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","operator.html.vue"]]),d=JSON.parse('{"path":"/posts/javascript/basic/operator.html","title":"JavaScript 运算符","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2023-01-11T00:00:00.000Z","author":"h7ml","category":"javascript","tag":"javascript","star":true,"description":"JavaScript 运算符 ECMAScript 中的操作符比较独特，包括字符串、数值、布尔值，甚至还有对象。应用给对象时通常会调用会调用valueOf()或toString()方法。 一元运算符 递增/递减 操作符在前，先自递增/递减后再进行运算。 操作符在后，先运算再进行自递增/递减。 一个变量同时等于两个值 参考上面所说的，如果是对象，操作符会...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/basic/operator.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/basic/operator.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 运算符"}],["meta",{"property":"og:description","content":"JavaScript 运算符 ECMAScript 中的操作符比较独特，包括字符串、数值、布尔值，甚至还有对象。应用给对象时通常会调用会调用valueOf()或toString()方法。 一元运算符 递增/递减 操作符在前，先自递增/递减后再进行运算。 操作符在后，先运算再进行自递增/递减。 一个变量同时等于两个值 参考上面所说的，如果是对象，操作符会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2023-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"一元运算符","slug":"一元运算符","link":"#一元运算符","children":[{"level":3,"title":"递增/递减","slug":"递增-递减","link":"#递增-递减","children":[]},{"level":3,"title":"一个变量同时等于两个值","slug":"一个变量同时等于两个值","link":"#一个变量同时等于两个值","children":[]},{"level":3,"title":"一元加和减","slug":"一元加和减","link":"#一元加和减","children":[]}]},{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":2,"title":"短路运算","slug":"短路运算","link":"#短路运算","children":[]},{"level":2,"title":"三目运算符","slug":"三目运算符","link":"#三目运算符","children":[]},{"level":2,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":2,"title":"隐式类型转换","slug":"隐式类型转换","link":"#隐式类型转换","children":[]},{"level":2,"title":"括号/逗号运算符","slug":"括号-逗号运算符","link":"#括号-逗号运算符","children":[]},{"level":2,"title":"指数运算符","slug":"指数运算符","link":"#指数运算符","children":[]},{"level":2,"title":"位操作符","slug":"位操作符","link":"#位操作符","children":[{"level":3,"title":"按位非","slug":"按位非","link":"#按位非","children":[]},{"level":3,"title":"按位与","slug":"按位与","link":"#按位与","children":[]},{"level":3,"title":"按位或","slug":"按位或","link":"#按位或","children":[]},{"level":3,"title":"按位异或","slug":"按位异或","link":"#按位异或","children":[]},{"level":3,"title":"左移","slug":"左移","link":"#左移","children":[]},{"level":3,"title":"有符号右移","slug":"有符号右移","link":"#有符号右移","children":[]},{"level":3,"title":"无符号右移","slug":"无符号右移","link":"#无符号右移","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":7.28,"words":2184},"filePathRelative":"posts/javascript/basic/operator.md","localizedDate":"2023年1月11日","excerpt":"\\n<p>ECMAScript 中的操作符比较独特，包括字符串、数值、布尔值，甚至还有对象。应用给对象时通常会调用会调用<code>valueOf()</code>或<code>toString()</code>方法。</p>\\n<h2>一元运算符</h2>\\n<h3>递增/递减</h3>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token operator\\">++</span>n<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 先自增 1，再运算</span>\\nn<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 先运算，再自增 1</span>\\n<span class=\\"token operator\\">--</span>n<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// n-- 同理</span>\\n<span class=\\"token operator\\">!</span>n<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 转换为 Boolean 值</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
