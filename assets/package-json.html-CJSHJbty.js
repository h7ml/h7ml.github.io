import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as r,d as n,e as s,a as t,f as e}from"./app-Cbix2SPG.js";const l={},c=n("h2",{id:"npm-package-json-属性详解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#npm-package-json-属性详解"},[n("span",null,[n("a",{href:"#npm-package-json%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3"},"#"),s(" npm package.json 属性详解")])])],-1),d={href:"https://www.cnblogs.com/tzyy/p/5193811.html",target:"_blank",rel:"noopener noreferrer"},u=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</span></a></h2><p><code>package.json</code>必须是一个严格的 json 文件，而不仅仅是 js 里边的一个对象。其中很多属性可以通过<code>npm-config</code>来生成</p><h2 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span><a href="#name">#</a> name</span></a></h2><p><code>package.json</code>中最重要的属性是<code>name</code>和<code>version</code> 两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个 npm 模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。 <code>name</code> 属性就是你的模块名称，下面是一些命名规则:</p>',4),m=e("<li><p><code>name</code>必须小于等于 214 个字节，包括前缀名称在内（如 xxx/xxxmodule）。</p></li><li><p><code>name</code>不能以&quot;_&quot;或&quot;.&quot;开头</p></li><li><p>不能含有大写字母</p></li><li><p><code>name</code>会成为 url 的一部分，不能含有 url 非法字符</p><p>下面是官网文档的一些建议：</p></li><li><p>不要使用和 node 核心模块一样的名称</p></li><li><p><code>name</code>中不要含有&quot;js&quot;和&quot;node&quot;。 It&#39;s assumed that it&#39;s js, since you&#39;re writing a package.json file, and you can specify the engine using the &quot;engines&quot; field. (See below.)</p></li><li><p><code>name</code>属性会成为模块 url、命令行中的一个参数或者一个文件夹名称，任何非 url 安全的字符在 name 中都不能使用，也不能以&quot;_&quot;或&quot;.&quot;开头</p></li><li><p><code>name</code>属性也许会被写在<code>require()</code>的参数中，所以最好取个简短而语义化的值。</p></li>",8),v=n("code",null,"name",-1),b={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},h=e(`<ul><li><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 发布一个包的时候，需要检验某个包名是否存在</span>
<span class="token function">npm</span> search <span class="token operator">&lt;</span>ModuleName<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2</p></li></ul>`,1),k=e(`<p><code>name</code>属性可以有一些前缀如 e.g. @myorg/mypackage.在 npm-scope(7)的文档中可以看到详细说明</p><h2 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span><a href="#version">#</a> version</span></a></h2><p><code>version</code>必须可以被 npm 依赖的一个<code>node-semver</code>模块解析。具体规则见下面的<code>dependencies</code>模块</p><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span><a href="#description">#</a> description</span></a></h2><p>一个描述，方便别人了解你的模块作用，搜索的时候也有用。</p><h2 id="keywords" tabindex="-1"><a class="header-anchor" href="#keywords"><span><a href="#keywords">#</a> keywords</span></a></h2><p>一个字符串数组，方便别人搜索到本模块</p><h2 id="homepage" tabindex="-1"><a class="header-anchor" href="#homepage"><span><a href="#homepage">#</a> homepage</span></a></h2><p>项目主页 url <strong>注意:</strong> 这个项目主页 url 和 url 属性不同，如果你填写了 url 属性，npm 注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从 npm 官方仓库获取，而是会重定向到 url 属性配置的地址。（原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）</p><h2 id="bugs" tabindex="-1"><a class="header-anchor" href="#bugs"><span><a href="#bugs">#</a> bugs</span></a></h2><p>填写一个 bug 提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/owner/project/issues&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;project@hostname.com&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4</p><p>url 和 email 可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了 url，npm bugs 命令会使用这个 url。</p><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span><a href="#license">#</a> license</span></a></h2><p>你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用 BSD-3-Clause 或 MIT 之类的协议，如下：</p>`,16),g={href:"https://spdx.org/licenses/",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="和用户相关的属性-author-contributors" tabindex="-1"><a class="header-anchor" href="#和用户相关的属性-author-contributors"><span><a href="#%E5%92%8C%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B1%9E%E6%80%A7-author-contributors">#</a> 和用户相关的属性: author, contributors</span></a></h2><p><code>author</code>是一个码农， <code>contributors</code>是一个码农数组。 <code>person</code>是一个有一些描述属性的对象，如下 like this:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Barney Rubble&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b@rubble.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://barnyrubble.tumblr.com/&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5</p><p>也可以按如下格式缩写，npm 会帮着转换:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&quot;Barney Rubble b@rubble.com (http://barnyrubble.tumblr.com/)&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1</p><p><code>email</code>和<code>url</code>属性实际上都是可以省略的。描述用户信息的还有一个<code>maintainers</code>（维护者）属性。</p><h2 id="files" tabindex="-1"><a class="header-anchor" href="#files"><span><a href="#files">#</a> files</span></a></h2><p><code>files</code>属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了）你也可以在模块根目录下创建一个<code>.npmignore</code>文件（windows 下无法直接创建以&quot;.&quot;开头的文件，使用 linux 命令行工具创建如 git bash），写在这个文件里边的文件即便被写在 files 属性里边也会被排除在外，这个文件的写法&quot;.gitignore&quot;类似。</p><h2 id="main" tabindex="-1"><a class="header-anchor" href="#main"><span><a href="#main">#</a> main</span></a></h2><p><code>main</code>属性指定了程序的主入口文件。意思是，如果你的模块被命名为 foo，用户安装了这个模块并通过 require(&quot;foo&quot;) 来使用这个模块，那么 require 返回的内容就是 main 属性指定的文件中 module.exports 指向的对象。它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。</p><h2 id="bin" tabindex="-1"><a class="header-anchor" href="#bin"><span><a href="#bin">#</a> bin</span></a></h2><p>很多模块有一个或多个需要配置到 PATH 路径下的可执行模块，npm 让这个工作变得十分简单（实际上 npm 本身也是通过 bin 属性安装为一个可执行命令的）如果要用 npm 的这个功能，在 package.json 里边配置一个 bin 属性。bin 属性是一个已命令名称为 key，本地文件名称为 value 的 map 如下：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;myapp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./cli.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3</p><p>模块安装的时候，若是全局安装，则 npm 会为 bin 中配置的文件在 bin 目录下创建一个软连接（对于 windows 系统，默认会在 C: \\Users\\username\\AppData\\Roaming\\npm 目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。因此，按上面的例子，当你安装 myapp 的时候，npm 就会为 cli.js 在/usr/local/bin/myapp 路径创建一个软链接。如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-program&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./path/to/program&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5</p><p>作用和如下写法相同:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-program&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;my-program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./path/to/program&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7</p><h2 id="man" tabindex="-1"><a class="header-anchor" href="#man"><span><a href="#man">#</a> man</span></a></h2><p>制定一个或通过数组制定一些文件来让 linux 下的 man 命令查找文档地址。如果只有一个文件被指定的话，安装后直接使用 man+模块名称，而不管 man 指定的文件的实际名称。例如:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;man&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./man/doc.1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7</p><p>通过 man foo 命令会得到 ./man/doc.1 文件的内容。 如果 man 文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;man&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./man/foo.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./man/bar.1&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7</p><p>会创建一些文件来作为 man foo 和 man foo-bar 命令的结果。 man 文件必须以数字结尾，或者如果被压缩了，以.gz 结尾。数字表示文件将被安装到 man 的哪个部分。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;man&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./man/foo.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./man/foo.2&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7</p><p>会创建 man foo 和 man 2 foo 两条命令。</p><h2 id="directories" tabindex="-1"><a class="header-anchor" href="#directories"><span><a href="#directories">#</a> directories</span></a></h2>`,34),f={href:"https://registry.npmjs.org/npm/latest",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"http://zoucz.com/blogimgs/2016-02-16/1455624810992.png",alt:"img",loading:"lazy"},null,-1),j=e(`<h3 id="directories-lib" tabindex="-1"><a class="header-anchor" href="#directories-lib"><span><a href="#directories-lib">#</a> directories.lib</span></a></h3><p>告诉用户模块中 lib 目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。</p><h3 id="directories-bin" tabindex="-1"><a class="header-anchor" href="#directories-bin"><span><a href="#directories-bin">#</a> directories.bin</span></a></h3><p>如果你在这里指定了 bin 目录，这个配置下面的文件会被加入到 bin 路径下，如果你已经在 package.json 中配置了 bin 目录，那么这里的配置将不起任何作用。</p><h3 id="directories-man" tabindex="-1"><a class="header-anchor" href="#directories-man"><span><a href="#directories-man">#</a> directories.man</span></a></h3><p>指定一个目录，目录里边都是 man 文件，这是一种配置 man 文件的语法糖。</p><h3 id="directories-doc" tabindex="-1"><a class="header-anchor" href="#directories-doc"><span><a href="#directories-doc">#</a> directories.doc</span></a></h3><p>在这个目录里边放一些 markdown 文件，可能最终有一天它们会被友好的展现出来（应该是在 npm 的网站上）</p><h3 id="directories-example" tabindex="-1"><a class="header-anchor" href="#directories-example"><span><a href="#directories-example">#</a> directories.example</span></a></h3><p>放一些示例脚本，或许某一天会有用 - -！</p><h2 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span><a href="#repository">#</a> repository</span></a></h2><p>指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/npm/npm.git&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;svn&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://v8.googlecode.com/svn/trunk/&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 8<br> 9<br> 10<br> 11</p><p>若你的模块放在 GitHub, GitHub gist, Bitbucket, or GitLab 的仓库里，npm install 的时候可以使用缩写标记来完成：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&quot;repository&quot;: &quot;npm/npm&quot;

&quot;repository&quot;: &quot;gist:11081aaa281&quot;

&quot;repository&quot;: &quot;bitbucket:example/repo&quot;

&quot;repository&quot;: &quot;gitlab:another/repo&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7</p><h2 id="scripts" tabindex="-1"><a class="header-anchor" href="#scripts"><span><a href="#scripts">#</a> scripts</span></a></h2>`,19),x={href:"https://docs.npmjs.com/misc/scripts",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span><a href="#config">#</a> config</span></a></h2><p>用来设置一些项目不怎么变化的项目配置，例如 port 等。 用户用的时候可以使用如下用法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http.createServer(...).listen(process.env.npm_package_config_port)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1</p>`,4),_={href:"https://docs.npmjs.com/misc/config",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8080&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4</p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span><a href="#dependencies">#</a> dependencies</span></a></h2>`,3),A={href:"https://docs.npmjs.com/misc/semver",target:"_blank",rel:"noopener noreferrer"},D=e(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>+ version 精确匹配版本
+ \\&gt;version 必须大于某个版本
+ \\&gt;=version 大于等于
+ &lt;version 小于
+ &lt;=versionversion 小于
+ ~version &quot;约等于&quot;，具体规则详见semver文档
+ ^version &quot;兼容版本&quot;具体规则详见semver文档
+ 1.2.x 仅一点二点几的版本
+ http://... 见下面url作为denpendencies的说明
+
    + 任何版本
+ &quot;&quot; 空字符，和\\*相同
+ version1 - version2 相当于 &gt;=version1 &lt;=version2.
+ range1 || range2 范围1和范围2满足任意一个都行
+ git... 见下面git url作为denpendencies的说明
+ user/repo See 见下面GitHub仓库的说明
+ tag
  发布的一个特殊的标签，见npm-tag的文档 [https://docs.npmjs.com/getting-started/using-tags (opens new window)](https://docs.npmjs.com/getting-started/using-tags)
+ path/path/path 见下面本地模块的说明 下面的写法都是可以的:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0 - 2.9999.9999&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=1.0.2 &lt;2.1.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;baz&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;1.0.2 &lt;=2.3.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;boo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;qux&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;asd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://asdf.com/asdf.tar.gz&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;til&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;elf&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.2.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;two&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.x&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;thr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.3.x&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lat&quot;</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dyl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;file:../dyl&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 8<br> 9<br> 10<br> 11<br> 12<br> 13<br> 14<br> 15</p><h2 id="urls-as-dependencies" tabindex="-1"><a class="header-anchor" href="#urls-as-dependencies"><span><a href="#urls-as-dependencies">#</a> URLs as Dependencies</span></a></h2><p>在版本范围的地方可以写一个 url 指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。</p><h2 id="git-urls-as-dependencies" tabindex="-1"><a class="header-anchor" href="#git-urls-as-dependencies"><span><a href="#git-urls-as-dependencies">#</a> Git URLs as Dependencies</span></a></h2><p>Git url 可以像下面一样:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>git://github.com/user/project.git#commit-ish
git+ssh://user@hostname:project.git#commit-ish
git+ssh://user@hostname/project.git#commit-ish
git+http://user@hostname/project/blah.git#commit-ish
git+https://user@hostname/project/blah.git#commit-ish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5</p><p>commit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是 master 分支。</p><h2 id="github-urls" tabindex="-1"><a class="header-anchor" href="#github-urls"><span><a href="#github-urls">#</a> GitHub URLs</span></a></h2><p>支持 github 的 username/modulename 的写法，#后边可以加后缀写明分支 hash 或标签：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;express&quot;</span><span class="token operator">:</span> <span class="token string">&quot;visionmedia/express&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;mocha&quot;</span><span class="token operator">:</span> <span class="token string">&quot;visionmedia/mocha#4727d357ea&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 8</p><h2 id="local-paths" tabindex="-1"><a class="header-anchor" href="#local-paths"><span><a href="#local-paths">#</a> Local Paths</span></a></h2><p>npm2.0.0 版本以上可以提供一个本地路径来安装一个本地的模块，通过 npm install xxx --save 来安装，格式如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>../foo/bar
~/foo/bar
./foo/bar
/foo/bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4</p><p>package.json 生成的相对路径如下:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;file:../foo/bar&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6</p><p>这种属性在离线开发或者测试需要用 npm install 的情况，又不想自己搞一个 npm server 的时候有用，但是发布模块到公共仓库时不应该使用这种属性。</p><h2 id="devdependencies" tabindex="-1"><a class="header-anchor" href="#devdependencies"><span><a href="#devdependencies">#</a> devDependencies</span></a></h2><p>如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。在这种情况下，最好的方法是把这些依赖添加到 devDependencies 属性的对象中。 这些模块会在 npm link 或者 npm install 的时候被安装，也可以像其他 npm 配置一样被管理，详见 npm 的 config 文档。对于一些跨平台的构建任务，例如把 CoffeeScript 编译成 JavaScript，就可以通过在 package.json 的 script 属性里边配置 prepublish 脚本来完成这个任务，然后需要依赖的 coffee-script 模块就写在 devDependencies 属性种。例如:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ethopia-waza&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a delightfully fruity coffee varietal&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;coffee-script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.6.3&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepublish&quot;</span><span class="token operator">:</span> <span class="token string">&quot;coffee -o lib/ -c src/waza.coffee&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/waza.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 8<br> 9<br> 10<br> 11</p><p>prepublish 脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行 npm install 也会执行这个脚本（见 npm script 文档），因此可以很方便的调试。</p><h2 id="peerdependencies" tabindex="-1"><a class="header-anchor" href="#peerdependencies"><span><a href="#peerdependencies">#</a> peerDependencies</span></a></h2><p>有时候做一些插件开发，比如 grunt 等工具的插件，它们往往是在 grunt 的某个版本的基础上开发的，而在他们的代码中并不会出现 require(&quot; grunt&quot;)这样的依赖，dependencies 配置里边也不会写上 grunt 的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置 peerDependencies：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tea-latte&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.3.5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;peerDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;tea&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.x&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7</p><p>上面这个配置确保再 npm install 的时候 tea-latte 会和 2.x 版本的 tea 一起安装，而且它们两个的依赖关系是同级的： ├── tea-latte@1.3.5 └── tea@2.2.0 这个配置的目的是让 npm 知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。</p><h2 id="bundleddependencies" tabindex="-1"><a class="header-anchor" href="#bundleddependencies"><span><a href="#bundleddependencies">#</a> bundledDependencies</span></a></h2><p>上面的单词少个 d，写成 bundleDependencies 也可以。 指定发布的时候会被一起打包的模块。</p><h2 id="optionaldependencies" tabindex="-1"><a class="header-anchor" href="#optionaldependencies"><span><a href="#optionaldependencies">#</a> optionalDependencies</span></a></h2><p>如果一个依赖模块可以被使用，同时你也希望在该模块找不到或无法获取时 npm 继续运行，你可以把这个模块依赖放到 optionalDependencies 配置中。这个配置的写法和 dependencies 的写法一样，不同的是这里边写的模块安装失败不会导致 npm install 失败。 当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> fooVersion <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo/package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>er<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">notGoodFooVersion</span><span class="token punctuation">(</span>fooVersion<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// .. then later in your program ..</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo<span class="token punctuation">.</span><span class="token function">doFooThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 8<br> 9<br> 10<br> 11<br> 12<br> 13<br> 14<br> 15</p><p>optionalDependencies 中的配置会覆盖 dependencies 中的配置，最好只在一个地方写。</p><h2 id="engines" tabindex="-1"><a class="header-anchor" href="#engines"><span><a href="#engines">#</a> engines</span></a></h2><p>你可以指定项目运行的 node 版本范围，如下： { &quot;engines&quot; : { &quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot; } } 和 dependencies 一样，如果你不指定版本范围或者指定为*，任何版本的 node 都可以。也可以指定一些 npm 版本可以正确的安装你的模块，例如： { &quot;engines&quot; : { &quot;npm&quot; : &quot;~1.0.20&quot; } } 要注意的是，除非你设置了 engine-strict 属性，engines 属性是仅供参考的。</p><h2 id="enginestrict" tabindex="-1"><a class="header-anchor" href="#enginestrict"><span><a href="#enginestrict">#</a> engineStrict</span></a></h2><p>注意：这个属性已经弃用，将在 npm 3.0.0 版本干掉。</p><h2 id="os" tabindex="-1"><a class="header-anchor" href="#os"><span><a href="#os">#</a> os</span></a></h2><p>可以指定你的模块只能在哪个操作系统上跑： &quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ] 也可以指定黑名单而不是白名单： &quot;os&quot; : [ &quot;! win32&quot; ] 服务的操作系统是由 process.platform 来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞...</p><h2 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu"><span><a href="#cpu">#</a> cpu</span></a></h2><p>限制模块只能在某某 cpu 架构下运行 &quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ] 同样可以设置黑名单: &quot;cpu&quot; : [ &quot;!arm&quot;, &quot;!mips&quot; ] cpu 架构通过 process.arch 判断</p><h2 id="preferglobal" tabindex="-1"><a class="header-anchor" href="#preferglobal"><span><a href="#preferglobal">#</a> preferGlobal</span></a></h2><p>如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为 true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。</p><h2 id="private" tabindex="-1"><a class="header-anchor" href="#private"><span><a href="#private">#</a> private</span></a></h2><p>如果这个属性被设置为 true，npm 将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的 npm 仓库，如一个内部的仓库，可与在下面的 publishConfig 中配置仓库参数。</p><h2 id="publishconfig" tabindex="-1"><a class="header-anchor" href="#publishconfig"><span><a href="#publishconfig">#</a> publishConfig</span></a></h2><p>这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置 tag 或仓库地址。</p><h2 id="default-values" tabindex="-1"><a class="header-anchor" href="#default-values"><span><a href="#default-values">#</a> DEFAULT VALUES</span></a></h2><p>npm 设置了一些默认参数，如： &quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;} 如果模块根目录下有一个 server.js 文件，那么 npm start 会默认运行这个文件。 &quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-gyp rebuild&quot;} 如果模块根目录下有 binding.gyp, npm 将默认用 node-gyp 来编译 preinstall 的脚本 &quot;contributors&quot;: [...] 若模块根目录下有 AUTHORS 文件，则 npm 会按 Name (url) 格式解析每一行的数据添加到 contributors 中，可以用#添加行注释</p>`,55),z={id:"参考文档列表-https-docs-npmjs-com",tabindex:"-1"},T={class:"header-anchor",href:"#参考文档列表-https-docs-npmjs-com"},B=n("a",{href:"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%E5%88%97%E8%A1%A8-https-docs-npmjs-com"},"#",-1),L={href:"https://docs.npmjs.com/",target:"_blank",rel:"noopener noreferrer"};function S(G,U){const a=p("ExternalLinkIcon");return i(),r("div",null,[c,n("blockquote",null,[n("p",null,[s("本文转自"),n("a",d,[s("https://www.cnblogs.com/tzyy/p/5193811.html (opens new window)"),t(a)]),s(" ，作者：TZYY")])]),u,n("ul",null,[m,n("li",null,[n("p",null,[s("创建一个模块前可以先到后边的网址查查"),v,s(" 是否已经被占用. "),n("a",b,[s("https://www.npmjs.com/ (opens new window)"),t(a)])]),h])]),k,n("p",null,[s("你可以在"),n("a",g,[s("https://spdx.org/licenses/ (opens new window)"),t(a)]),s("这个地址查阅协议列表 。")]),q,n("p",null,[s("CommonJs 通过 directories 来制定一些方法来描述模块的结构，看看 npm 的 package.json 文件"),n("a",f,[s("https://registry.npmjs.org/npm/latest"),t(a)]),s(" ，可以发现里边有这个字段的内容。 "),y,s(" 目前这个配置没有任何作用，将来可能会整出一些花样来。")]),j,n("p",null,[s("scripts 属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key 是生命周期中的事件，value 是要执行的命令。 具体的内容有 install start stop 等，详见 "),n("a",x,[s("https://docs.npmjs.com/misc/scripts (opens new window)"),t(a)])]),w,n("p",null,[s("可以通过 npm config set foo:port 80 来修改 config。详见"),n("a",_,[s("https://docs.npmjs.com/misc/config (opens new window)"),t(a)])]),E,n("p",null,[s("dependencies 属性是一个对象，配置模块依赖的模块列表，key 是模块名称，value 是版本范围，版本范围是一个字符，可以被一个或多个空格分割。 dependencies 也可以被指定为一个 git 地址或者一个压缩包地址。 不要把测试工具或 transpilers 写到 dependencies 中。下面是一些写法，详见"),n("a",A,[s("https://docs.npmjs.com/misc/semver (opens new window)"),t(a)])]),D,n("h2",z,[n("a",T,[n("span",null,[B,s(" 参考文档列表("),n("a",L,[s("https://docs.npmjs.com/"),t(a)]),s(")")])])])])}const Z=o(l,[["render",S],["__file","package-json.html.vue"]]),N=JSON.parse('{"path":"/posts/engineering/package-json.html","title":"package-lock.json","lang":"zh-CN","frontmatter":{"icon":"json","order":9,"date":"2021-05-27T00:00:00.000Z","author":"h7ml","title":"package-lock.json","category":"engineering","tag":"package.json","star":true,"description":"# npm package.json 属性详解 本文转自https://www.cnblogs.com/tzyy/p/5193811.html (opens new window) ，作者：TZYY # 概述 package.json必须是一个严格的 json 文件，而不仅仅是 js 里边的一个对象。其中很多属性可以通过npm-config来生成 # ...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/engineering/package-json.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/engineering/package-json.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"package-lock.json"}],["meta",{"property":"og:description","content":"# npm package.json 属性详解 本文转自https://www.cnblogs.com/tzyy/p/5193811.html (opens new window) ，作者：TZYY # 概述 package.json必须是一个严格的 json 文件，而不仅仅是 js 里边的一个对象。其中很多属性可以通过npm-config来生成 # ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://zoucz.com/blogimgs/2016-02-16/1455624810992.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"package.json"}],["meta",{"property":"article:published_time","content":"2021-05-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"package-lock.json\\",\\"image\\":[\\"http://zoucz.com/blogimgs/2016-02-16/1455624810992.png\\"],\\"datePublished\\":\\"2021-05-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"# npm package.json 属性详解","slug":"npm-package-json-属性详解","link":"#npm-package-json-属性详解","children":[]},{"level":2,"title":"# 概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"# name","slug":"name","link":"#name","children":[]},{"level":2,"title":"# version","slug":"version","link":"#version","children":[]},{"level":2,"title":"# description","slug":"description","link":"#description","children":[]},{"level":2,"title":"# keywords","slug":"keywords","link":"#keywords","children":[]},{"level":2,"title":"# homepage","slug":"homepage","link":"#homepage","children":[]},{"level":2,"title":"# bugs","slug":"bugs","link":"#bugs","children":[]},{"level":2,"title":"# license","slug":"license","link":"#license","children":[]},{"level":2,"title":"# 和用户相关的属性: author, contributors","slug":"和用户相关的属性-author-contributors","link":"#和用户相关的属性-author-contributors","children":[]},{"level":2,"title":"# files","slug":"files","link":"#files","children":[]},{"level":2,"title":"# main","slug":"main","link":"#main","children":[]},{"level":2,"title":"# bin","slug":"bin","link":"#bin","children":[]},{"level":2,"title":"# man","slug":"man","link":"#man","children":[]},{"level":2,"title":"# directories","slug":"directories","link":"#directories","children":[{"level":3,"title":"# directories.lib","slug":"directories-lib","link":"#directories-lib","children":[]},{"level":3,"title":"# directories.bin","slug":"directories-bin","link":"#directories-bin","children":[]},{"level":3,"title":"# directories.man","slug":"directories-man","link":"#directories-man","children":[]},{"level":3,"title":"# directories.doc","slug":"directories-doc","link":"#directories-doc","children":[]},{"level":3,"title":"# directories.example","slug":"directories-example","link":"#directories-example","children":[]}]},{"level":2,"title":"# repository","slug":"repository","link":"#repository","children":[]},{"level":2,"title":"# scripts","slug":"scripts","link":"#scripts","children":[]},{"level":2,"title":"# config","slug":"config","link":"#config","children":[]},{"level":2,"title":"# dependencies","slug":"dependencies","link":"#dependencies","children":[]},{"level":2,"title":"# URLs as Dependencies","slug":"urls-as-dependencies","link":"#urls-as-dependencies","children":[]},{"level":2,"title":"# Git URLs as Dependencies","slug":"git-urls-as-dependencies","link":"#git-urls-as-dependencies","children":[]},{"level":2,"title":"# GitHub URLs","slug":"github-urls","link":"#github-urls","children":[]},{"level":2,"title":"# Local Paths","slug":"local-paths","link":"#local-paths","children":[]},{"level":2,"title":"# devDependencies","slug":"devdependencies","link":"#devdependencies","children":[]},{"level":2,"title":"# peerDependencies","slug":"peerdependencies","link":"#peerdependencies","children":[]},{"level":2,"title":"# bundledDependencies","slug":"bundleddependencies","link":"#bundleddependencies","children":[]},{"level":2,"title":"# optionalDependencies","slug":"optionaldependencies","link":"#optionaldependencies","children":[]},{"level":2,"title":"# engines","slug":"engines","link":"#engines","children":[]},{"level":2,"title":"# engineStrict","slug":"enginestrict","link":"#enginestrict","children":[]},{"level":2,"title":"# os","slug":"os","link":"#os","children":[]},{"level":2,"title":"# cpu","slug":"cpu","link":"#cpu","children":[]},{"level":2,"title":"# preferGlobal","slug":"preferglobal","link":"#preferglobal","children":[]},{"level":2,"title":"# private","slug":"private","link":"#private","children":[]},{"level":2,"title":"# publishConfig","slug":"publishconfig","link":"#publishconfig","children":[]},{"level":2,"title":"# DEFAULT VALUES","slug":"default-values","link":"#default-values","children":[]},{"level":2,"title":"# 参考文档列表(https://docs.npmjs.com/)","slug":"参考文档列表-https-docs-npmjs-com","link":"#参考文档列表-https-docs-npmjs-com","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":14.4,"words":4321},"filePathRelative":"posts/engineering/package-json.md","localizedDate":"2021年5月27日","excerpt":"<h2><a class=\\"header-anchor\\" href=\\"#npm-package-json-属性详解\\"><span></span></a><a href=\\"#npm-package-json%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3\\">#</a> npm package.json 属性详解</h2>\\n<blockquote>\\n<p>本文转自<a href=\\"https://www.cnblogs.com/tzyy/p/5193811.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/tzyy/p/5193811.html (opens new window)</a> ，作者：TZYY</p>\\n</blockquote>","autoDesc":true}');export{Z as comp,N as data};
