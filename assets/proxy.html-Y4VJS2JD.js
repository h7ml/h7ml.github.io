import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-Cbix2SPG.js";const i={},t=e(`<h2 id="反向代理与负载均衡" tabindex="-1"><a class="header-anchor" href="#反向代理与负载均衡"><span>反向代理与负载均衡</span></a></h2><h2 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h2><p>当用户不能直接访问应用服务器时候，这时候就通过<code>Nginx</code>去带着你的参数去访问应用服务器，之后在把数据返回给网关（路由器），在由网关把数据传输到用户。</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909155253447.png" alt="image-20220909155253447" tabindex="0" loading="lazy"><figcaption>image-20220909155253447</figcaption></figure><h2 id="正向代理" tabindex="-1"><a class="header-anchor" href="#正向代理"><span>正向代理</span></a></h2><p>如果把外网的<code>Internet</code>想象成一个巨大的资源库，则内网中的客户端要访问<code>Internet</code>，则需要通过代理服务器来访问，这种代理服务就称为正向代理，下面是正向代理的原理图。</p><p>由于工作环境原因，日常工作只能局限于单位的局域网，如果想要访问互联网，怎么办呢？这就需要用到正向代理，本人经常用正向代理来进行上网。</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909155954732.png" alt="image-20220909155954732" tabindex="0" loading="lazy"><figcaption>image-20220909155954732</figcaption></figure><h2 id="传统公司系统架构" tabindex="-1"><a class="header-anchor" href="#传统公司系统架构"><span>传统公司系统架构</span></a></h2><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162133603.png" alt="image-20220909162133603" tabindex="0" loading="lazy"><figcaption>image-20220909162133603</figcaption></figure><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162405739.png" alt="image-20220909162405739" tabindex="0" loading="lazy"><figcaption>image-20220909162405739</figcaption></figure><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162157266.png" alt="image-20220909162157266" tabindex="0" loading="lazy"><figcaption>image-20220909162157266</figcaption></figure><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162405739.png" alt="image-20220909162405739" tabindex="0" loading="lazy"><figcaption>image-20220909162405739</figcaption></figure><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162246272.png" alt="image-20220909162246272" tabindex="0" loading="lazy"><figcaption>image-20220909162246272</figcaption></figure><h2 id="反向代理设置" tabindex="-1"><a class="header-anchor" href="#反向代理设置"><span>反向代理设置</span></a></h2><p>修改<code>nginx.conf</code> 配置。</p><blockquote><p>注意每个<code>{}</code>里面每一行结束都需写<code>;</code>。（坑）</p></blockquote><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
      <span class="token directive"><span class="token keyword">proxy_pass</span> http://www.atguigu.com/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>proxy_pass: 可以设置具体的主机 ip，也可以设置完整的域名。</p></li><li><p>设置域名时，一定要带上域名前缀</p></li></ul><p>例如<code>www.atguigu.com</code>和<code>atguigu.com</code>,意义就不一样了。</p><p><code>proxy_pass http://www.atguigu.com/</code></p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/202209111518300.png" alt="image-20220911151833258" tabindex="0" loading="lazy"><figcaption>image-20220911151833258</figcaption></figure><p><code>proxy_pass http://atguigu.com/</code></p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/202209111515886.png" alt="image-20220911151541839" tabindex="0" loading="lazy"><figcaption>image-20220911151541839</figcaption></figure><p>可以发现设置<code>proxy_pass http://atguigu.com/</code>后浏览器的地址拦就变了，不在是我们的 IP 站点而变成了代理的地址。</p><ul><li>Status Code: 302 Moved Temporarily（临时重定向）</li><li>Location: <code>http://www.atguigu.com/</code></li></ul><p>302 也就是临时重定向到另一个站点，这个站点就是 Location 的值。</p><p>还有一点就是在代理 https 的域名如果也这么设置也会重定向，例如<code>www.baidu.com</code>，就是 https 协议的域名。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code>proxy_pass http://www.baidu.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样设置也会重定向，后面会讲到 https 协议代理。</p><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h2><h3 id="什么是负载均衡" tabindex="-1"><a class="header-anchor" href="#什么是负载均衡"><span>什么是负载均衡</span></a></h3><p>所谓负载均衡，就是 Nginx 把请求均匀的分摊给上游的应用服务器，这样即使某一个服务器宕机也不会影响请求的处理，或者当应用服务器扛不住了，可以随时进行扩容</p><figure><img src="https://static.h7ml.cn/vitepress/assets/images/nginx/202209111606565.png" alt="image-20220911160604530" tabindex="0" loading="lazy"><figcaption>image-20220911160604530</figcaption></figure><h3 id="基于反向代理的负载均衡" tabindex="-1"><a class="header-anchor" href="#基于反向代理的负载均衡"><span>基于反向代理的负载均衡</span></a></h3><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">server</span> 10.211.55.11:80</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">server</span> 10.211.55.12:80</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment"># 虚拟主机 vhost</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
  <span class="token comment"># 域名 主机名</span>
  <span class="token directive"><span class="token keyword">server_name</span>  www.gopeak.cn</span><span class="token punctuation">;</span>

  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
    <span class="token comment"># root   /www/www;</span>
    <span class="token comment"># index  index.html index.htm;</span>
  <span class="token punctuation">}</span>

  <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="负载均衡策略" tabindex="-1"><a class="header-anchor" href="#负载均衡策略"><span>负载均衡策略</span></a></h2><h3 id="轮询" tabindex="-1"><a class="header-anchor" href="#轮询"><span>轮询</span></a></h3><p>默认情况下使用轮询方式，逐一转发，这种方式适用于无状态请求。</p><h3 id="weight-权重" tabindex="-1"><a class="header-anchor" href="#weight-权重"><span>weight(权重)</span></a></h3><p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">server</span> 10.211.55.11:80 weight=8 down</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">server</span> 10.211.55.12:80 weight=2</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">server</span> 10.211.55.13:80 weight=1 backup</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>down：表示当前的 server 暂时不参与负载</li><li>weight：默认为 1.weight 越大，负载的权重就越大。</li><li>backup： 其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器。</li></ul><p><strong>轮询的弊端</strong>：无法保持会话</p><h3 id="ip-hash" tabindex="-1"><a class="header-anchor" href="#ip-hash"><span>ip_hash</span></a></h3><p>根据客户端的 ip 地址转发同一台服务器，可以保持回话。</p><h3 id="least-conn" tabindex="-1"><a class="header-anchor" href="#least-conn"><span>least_conn</span></a></h3><p>最少连接访问</p><h3 id="url-hash" tabindex="-1"><a class="header-anchor" href="#url-hash"><span>url_hash</span></a></h3><p>根据用户访问的 url 定向转发请求</p><h3 id="fair" tabindex="-1"><a class="header-anchor" href="#fair"><span>fair</span></a></h3><p>根据后端服务器响应时间转发请求</p><h3 id="动静分离" tabindex="-1"><a class="header-anchor" href="#动静分离"><span>动静分离</span></a></h3><h4 id="配置反向代理" tabindex="-1"><a class="header-anchor" href="#配置反向代理"><span>配置反向代理</span></a></h4><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">ocation</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增加每一个-location" tabindex="-1"><a class="header-anchor" href="#增加每一个-location"><span>增加每一个 location</span></a></h4><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /css</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /usr/local/nginx/static</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token directive"><span class="token keyword">location</span> /images</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /usr/local/nginx/static</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token directive"><span class="token keyword">location</span> /js</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /usr/local/nginx/static</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用一个-location" tabindex="-1"><a class="header-anchor" href="#使用一个-location"><span>使用一个 location</span></a></h4><p>使用正则</p><h5 id="location-前缀" tabindex="-1"><a class="header-anchor" href="#location-前缀"><span><strong>location 前缀</strong></span></a></h5><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>/</code></td><td>通用匹配，任何请求都会匹配到</td></tr><tr><td><code>=</code></td><td>精准匹配，不是以指定模式开头</td></tr><tr><td><code>~</code></td><td>正则匹配，区分大小写</td></tr><tr><td><code>~*</code></td><td>正则匹配，不区分大小写</td></tr><tr><td><code>^~</code></td><td>非正则匹配，匹配以指定模式开头的 location</td></tr></tbody></table><h5 id="location-匹配顺序" tabindex="-1"><a class="header-anchor" href="#location-匹配顺序"><span><strong>location 匹配顺序</strong></span></a></h5><ul><li>多个正则 location 直接按书写顺序匹配，成功后就不会继续往后面匹配</li><li>普通（非正则）location 会一直往下，直到找到匹配度最高的（最大前缀匹配）</li><li>当普通 location 与正则 location 同时存在，如果正则匹配成功,则不会再执行普通匹配</li><li>所有类型 location 存在时，“=”匹配 &gt; “^~”匹配 &gt; 正则匹配 &gt; 普通（最大前缀匹配）</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ~*/(css|img|js)</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /usr/local/nginx/static</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="alias-与-root" tabindex="-1"><a class="header-anchor" href="#alias-与-root"><span><strong>alias 与 root</strong></span></a></h5><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /css</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">alias</span> /usr/local/nginx/static/css</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>root 用来设置根目录，而 alias 在接受请求的时候在路径上不会加上 location。</p><ul><li>1）alias 指定的目录是准确的，即 location 匹配访问的 path 目录下的文件直接是在 alias 目录下查找的；</li><li>2）root 指定 的目录是 location 匹配访问的 path 目录的上一级目录,这个 path 目录一定要是真实存在 root 指定目录下的；</li><li>3）使用 alias 标签的目录块中不能使用 rewrite 的 break（具体原因不明）；另外，alias 指定的目录后面必须要加上&quot;/&quot;符 号！！</li><li>4）alias 虚拟目录配置中，location 匹配的 path 目录如果后面不带&quot;/&quot;，那么访问的 url 地址中这个 path 目录后 面加不加&quot;/&quot;不影响访问，访问时它会自动加上&quot;/&quot;； 但是如果 location 匹配的 path 目录后面加上&quot;/&quot;，那么访问的 url 地 址中这个 path 目录必须要加上&quot;/&quot;，访问时它不会自动加上&quot;/&quot;。如果不加上&quot;/&quot;，访问就会失败！</li><li>5）root 目录配置 中，location 匹配的 path 目录后面带不带&quot;/&quot;，都不会影响访问。</li></ul>`,68),l=[t];function c(p,o){return a(),s("div",null,l)}const g=n(i,[["render",c],["__file","proxy.html.vue"]]),u=JSON.parse('{"path":"/posts/nginx/proxy.html","title":"反向代理与负载均衡","lang":"zh-CN","frontmatter":{"icon":"nginx","order":4,"date":"2022-03-20T00:00:00.000Z","author":"h7ml","category":"nginx","tag":"nginx","title":"反向代理与负载均衡","description":"反向代理与负载均衡 反向代理 当用户不能直接访问应用服务器时候，这时候就通过Nginx去带着你的参数去访问应用服务器，之后在把数据返回给网关（路由器），在由网关把数据传输到用户。 image-20220909155253447image-20220909155253447 正向代理 如果把外网的Internet想象成一个巨大的资源库，则内网中的客户端要...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/nginx/proxy.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/nginx/proxy.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"反向代理与负载均衡"}],["meta",{"property":"og:description","content":"反向代理与负载均衡 反向代理 当用户不能直接访问应用服务器时候，这时候就通过Nginx去带着你的参数去访问应用服务器，之后在把数据返回给网关（路由器），在由网关把数据传输到用户。 image-20220909155253447image-20220909155253447 正向代理 如果把外网的Internet想象成一个巨大的资源库，则内网中的客户端要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909155253447.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"nginx"}],["meta",{"property":"article:published_time","content":"2022-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反向代理与负载均衡\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909155253447.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909155954732.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162133603.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162405739.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162157266.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162405739.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909162246272.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/202209111518300.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/202209111515886.png\\",\\"https://static.h7ml.cn/vitepress/assets/images/nginx/202209111606565.png\\"],\\"datePublished\\":\\"2022-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"反向代理与负载均衡","slug":"反向代理与负载均衡","link":"#反向代理与负载均衡","children":[]},{"level":2,"title":"反向代理","slug":"反向代理","link":"#反向代理","children":[]},{"level":2,"title":"正向代理","slug":"正向代理","link":"#正向代理","children":[]},{"level":2,"title":"传统公司系统架构","slug":"传统公司系统架构","link":"#传统公司系统架构","children":[]},{"level":2,"title":"反向代理设置","slug":"反向代理设置","link":"#反向代理设置","children":[]},{"level":2,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[{"level":3,"title":"什么是负载均衡","slug":"什么是负载均衡","link":"#什么是负载均衡","children":[]},{"level":3,"title":"基于反向代理的负载均衡","slug":"基于反向代理的负载均衡","link":"#基于反向代理的负载均衡","children":[]}]},{"level":2,"title":"负载均衡策略","slug":"负载均衡策略","link":"#负载均衡策略","children":[{"level":3,"title":"轮询","slug":"轮询","link":"#轮询","children":[]},{"level":3,"title":"weight(权重)","slug":"weight-权重","link":"#weight-权重","children":[]},{"level":3,"title":"ip_hash","slug":"ip-hash","link":"#ip-hash","children":[]},{"level":3,"title":"least_conn","slug":"least-conn","link":"#least-conn","children":[]},{"level":3,"title":"url_hash","slug":"url-hash","link":"#url-hash","children":[]},{"level":3,"title":"fair","slug":"fair","link":"#fair","children":[]},{"level":3,"title":"动静分离","slug":"动静分离","link":"#动静分离","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1406},"filePathRelative":"posts/nginx/proxy.md","localizedDate":"2022年3月20日","excerpt":"<h2>反向代理与负载均衡</h2>\\n<h2>反向代理</h2>\\n<p>当用户不能直接访问应用服务器时候，这时候就通过<code>Nginx</code>去带着你的参数去访问应用服务器，之后在把数据返回给网关（路由器），在由网关把数据传输到用户。</p>\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/nginx/image-20220909155253447.png\\" alt=\\"image-20220909155253447\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220909155253447</figcaption></figure>","autoDesc":true}');export{g as comp,u as data};
