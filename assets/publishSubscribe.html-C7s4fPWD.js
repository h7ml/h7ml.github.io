import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,d as s,e as n,a as t,f as p}from"./app-Cbix2SPG.js";const l={},u=s("strong",null,"建议先看一下上篇",-1),r={href:"https://www.h7ml.cn/designPattern/observer.html",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"GoF",-1),d=s("code",null,"GoF",-1),v={href:"http://wiki.c2.com/?GangOfFour",target:"_blank",rel:"noopener noreferrer"},m={href:"http://wiki.c2.com/?DesignPatternsBook",target:"_blank",rel:"noopener noreferrer"},b=p(`<h1 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h1><p>假设我们在开发一款外卖网站，进入网站的时候，第一步需要去请求后端接口得到用户的常用外卖地址。然后再去请求其他接口、渲染页面。如果使用了观察者模式可能会这样写：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span>
<span class="token comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span>
<span class="token keyword">const</span> observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 注册观察者</span>
observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
obervers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">.</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// getAddress 异步请求</span>
<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> address <span class="token operator">=</span> res<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getAddress</code> 模块和其他 <code>A</code> 、<code>B</code>、<code>C</code> 三个模块已经实现了解耦，但仍需要维护 <code>observers</code> 这个数组来注册观察者，同时还需要知道各个模块提供了什么方法用于回调。</p><p>我们可以使用发布订阅模式，让 <code>getAddress</code> 模块和其他 <code>A</code> 、<code>B</code>、<code>C</code> 三个模块解耦的更加彻底。</p><h1 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式"><span>发布订阅模式</span></a></h1><p>回忆一下观察者模式：</p>`,7),g=s("strong",null,"observer pattern",-1),f={href:"https://en.wikipedia.org/wiki/Software_design_pattern",target:"_blank",rel:"noopener noreferrer"},h={href:"https://en.wikipedia.org/wiki/Object_(computer_science)#Objects_in_object-oriented_programming",target:"_blank",rel:"noopener noreferrer"},w=s("strong",null,"subject",-1),y=s("strong",null,"observers",-1),_={href:"https://en.wikipedia.org/wiki/Method_(computer_science)",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>观察者模式中，<code>Subject</code> 自己维护观察者列表进行注册和通知。</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220130170413954.png" alt="image-20220130170413954" tabindex="0" loading="lazy"><figcaption>image-20220130170413954</figcaption></figure><p>发布订阅模式的话，引入一个中间平台进行注册和通知，相当于从 <code>Subject</code> 中解耦出来。</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220130171806687.png" alt="image-20220130171806687" tabindex="0" loading="lazy"><figcaption>image-20220130171806687</figcaption></figure><p>观察者通过 <code>on</code> 向 <code>EventBus</code> 注册事件，然后 <code>Subject</code> 通过 <code>emit</code> 向 <code>EventBus</code> 发射事件，由 <code>EventBus</code> 来向观察者更新。</p><p>接下来实现一个简单的 <code>EventBus</code> 。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// event.js</span>
<span class="token keyword">const</span> observersMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observersMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    observersMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  observersMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>
    fns <span class="token operator">=</span> observersMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fns <span class="token operator">=</span> observersMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fns <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全部清空</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> findIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        findIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>findIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>findIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 同一种功能可能会见到不同名字，这里都导出去</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token punctuation">{</span>
  listen<span class="token punctuation">,</span>
  <span class="token literal-property property">attach</span><span class="token operator">:</span> listen<span class="token punctuation">,</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> listen<span class="token punctuation">,</span>

  remove<span class="token punctuation">,</span>
  <span class="token literal-property property">detach</span><span class="token operator">:</span> remove<span class="token punctuation">,</span>

  trigger<span class="token punctuation">,</span>
  <span class="token literal-property property">emit</span><span class="token operator">:</span> trigger<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过 <code>observersMap</code> 将不同的事件保存为不同的数组，<code>emit</code> 的时候得到对应的数组去调用即可。看下例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> WindLiang <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">writePost</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    EventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoMing <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我收到了&#39;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&#39; 并且点了个赞&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoYang <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我收到了&#39;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&#39; 并且转发了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoGang <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我收到了&#39;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&#39; 并且收藏&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoMing<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoYang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoGang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>

WindLiang<span class="token punctuation">.</span><span class="token function">writePost</span><span class="token punctuation">(</span><span class="token string">&#39;新文章-观察者模式，balabala&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h1><p>让我们改造下开头写的观察者模式的代码：</p><p>地址模块：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event.js&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// getAddress 异步请求</span>
<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> address <span class="token operator">=</span> res<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  EventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;ADDRESS&#39;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>A</code> 模块</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自己的逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>B</code> 模块</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自己的逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>C</code> 模块</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自己的逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">change</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>getAddress</code> 模块不再需要关心观察者有谁，它只需要向 <code>EventBus</code> 发射更新事件即可。</p><p>每个模块内部自己如果需要地址信息，只需要订阅相关事件，然后传入回调函数即可。</p><h1 id="特殊情况" tabindex="-1"><a class="header-anchor" href="#特殊情况"><span>特殊情况</span></a></h1><p>实际工程中可能遇到一些特殊场景，由于 <code>emit</code> 一般在一个异步事件中执行，如果这个异步事件突然执行的变快了，就可能造成某个事件先 <code>emit</code> 了，然后某个模块才进行了 <code>on</code> 。</p><p>此时我们可以对 <code>EventBus</code> 进行一定的改写，使得先订阅事件，后触发事件成为可能。</p>`,24),B={href:"https://www.h7ml.cn/designPattern/proxy.html",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// eventProxy.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token keyword">as</span> EventBusOriginal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> offlineStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// listen 之前的 emit 事件进行缓存</span>

<span class="token keyword">const</span> <span class="token function-variable function">triggerProxy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> EventBusOriginal<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>offlineStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> offlineStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">listenProxy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  EventBusOriginal<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>offlineStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> offlineStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  offlineStack <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> listen <span class="token operator">=</span> listenProxy <span class="token operator">||</span> EventBus<span class="token punctuation">.</span>listen<span class="token punctuation">;</span>
<span class="token keyword">const</span> trigger <span class="token operator">=</span> triggerProxy <span class="token operator">||</span> EventBus<span class="token punctuation">.</span>trigger<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>EventBusOriginal<span class="token punctuation">,</span>
  listen<span class="token punctuation">,</span>
  <span class="token literal-property property">attach</span><span class="token operator">:</span> listen<span class="token punctuation">,</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> listen<span class="token punctuation">,</span>

  trigger<span class="token punctuation">,</span>
  <span class="token literal-property property">emit</span><span class="token operator">:</span> trigger<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>trigger</code> 的时候，如果 <code>offlineStack</code> 不为 <code>null</code>，说明还没有调用过 <code>listen</code>，此时将当前事件保存起来。</p><p><code>listen</code> 的时候遍历之前保存的事件，并且将 <code>offlineStack</code> 置为 <code>null</code>，表示已经调用过 <code>listen</code> 了。</p><p>看一下效果：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./eventProxy.mjs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> WindLiang <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">writePost</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    EventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoMing <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我收到了&#39;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&#39; 并且点了个赞&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoYang <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我收到了&#39;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&#39; 并且转发了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoGang <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我收到了&#39;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&#39; 并且收藏&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

WindLiang<span class="token punctuation">.</span><span class="token function">writePost</span><span class="token punctuation">(</span><span class="token string">&#39;新文章-观察者模式，balabala&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoYang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我收到了新文章-观察者模式，balabala 并且转发了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然是先进行的 <code>emit</code> 后进行的 <code>on</code> 的，但依旧会正常执行。</p><p>上边的解决方案很粗略，只适用于有一个事件并且只有一个 <code>on</code> 的场景，不然的话比如下边的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>WindLiang<span class="token punctuation">.</span><span class="token function">writePost</span><span class="token punctuation">(</span><span class="token string">&#39;新文章-观察者模式，balabala&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoMing<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoYang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoGang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有 <code>XiaoMing.update</code> 会执行，后边两句就会错过第一次的 <code>emit</code> ，因为执行一次 <code>listen</code> 就把缓存清空了。</p><p>或者在 <code>writePost</code> 之前有了一次 <code>on</code> 了：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoMing<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
WindLiang<span class="token punctuation">.</span><span class="token function">writePost</span><span class="token punctuation">(</span><span class="token string">&#39;新文章-观察者模式，balabala&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoYang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
EventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;windliang&#39;</span><span class="token punctuation">,</span> XiaoGang<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样只有 <code>XiaoMing.update</code> 会执行，后边两句就会错过第一次的 <code>emit</code> 了，因为执行一次 <code>listen</code> 就把缓存清空了。</p><p>对于实际场景，我们还需要根据情况继续进行调整。</p><h1 id="总" tabindex="-1"><a class="header-anchor" href="#总"><span>总</span></a></h1><p>发布订阅模式相对于最原始的观察者模式将 <code>Subject</code> 和 <code>Observers</code> 进行了彻底解耦，<code>Subject</code> 不再需要关心谁订阅了它，<code>Observer</code> 只需要在自己内部订阅它所关心的事件即可。</p><p>通过封装好的 <code>EventBus</code> 也实现了更好的复用，不需要每个模块都去维护自己的观察者列表。</p><p>但同时也带来了坏处，所有的事件订阅分散在各个模块，没有一个全局视角知道某个事件被哪些模块订阅了，可能会导致程序难以理解和调试。</p>`,17);function x(P,S){const a=o("ExternalLinkIcon");return c(),i("div",null,[s("p",null,[u,n(),s("a",r,[n("观察者模式"),t(a)]),n(" ，发布订阅模式和观察者模式本质上还是一样的，并且发布订阅模式也没有在经典的设计模式书 "),k,n(" 中出现，很多地方也直接把两者看成一种设计模式了。")]),s("p",null,[d,n(" 的名字也有个有趣的故事，"),s("a",v,[n("这里"),t(a)]),n(" 贴过来：")]),s("blockquote",null,[s("p",null,[n("The authors of the "),s("a",m,[n("DesignPatternsBook"),t(a)]),n(` came to be known as the "Gang of Four." The name of the book ("Design Patterns: Elements of Reusable Object-Oriented Software") is too long for e-mail, so "book by the gang of four" became a shorthand name for it. After all, it isn't the ONLY book on patterns. That got shortened to "GOF book", which is pretty cryptic the first time you hear it.`)])]),b,s("blockquote",null,[s("p",null,[n("The "),g,n(" is a "),s("a",f,[n("software design pattern"),t(a)]),n(" in which an "),s("a",h,[n("object"),t(a)]),n(", named the "),w,n(", maintains a list of its dependents, called "),y,n(", and notifies them automatically of any state changes, usually by calling one of their "),s("a",_,[n("methods"),t(a)]),n(".")])]),j,s("p",null,[n("为了不改动原有逻辑，我们可以通过 "),s("a",B,[n("代理模式"),t(a)]),n(" 进行改写。")]),E])}const X=e(l,[["render",x],["__file","publishSubscribe.html.vue"]]),M=JSON.parse('{"path":"/posts/designPattern/publishSubscribe.html","title":"发布订阅模式","lang":"zh-CN","frontmatter":{"title":"发布订阅模式","category":["设计模式","frontend"],"author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","tag":["设计模式","frontend"],"date":"2022-01-30T11:04:52.000Z","description":"建议先看一下上篇 观察者模式 ，发布订阅模式和观察者模式本质上还是一样的，并且发布订阅模式也没有在经典的设计模式书 GoF 中出现，很多地方也直接把两者看成一种设计模式了。 GoF 的名字也有个有趣的故事，这里 贴过来： The authors of the DesignPatternsBook came to be known as the \\"Gan...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/designPattern/publishSubscribe.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/designPattern/publishSubscribe.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"发布订阅模式"}],["meta",{"property":"og:description","content":"建议先看一下上篇 观察者模式 ，发布订阅模式和观察者模式本质上还是一样的，并且发布订阅模式也没有在经典的设计模式书 GoF 中出现，很多地方也直接把两者看成一种设计模式了。 GoF 的名字也有个有趣的故事，这里 贴过来： The authors of the DesignPatternsBook came to be known as the \\"Gan..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"发布订阅模式"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:published_time","content":"2022-01-30T11:04:52.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发布订阅模式\\",\\"image\\":[\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220130170413954.png\\",\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220130171806687.png\\"],\\"datePublished\\":\\"2022-01-30T11:04:52.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":5.97,"words":1791},"filePathRelative":"posts/designPattern/publishSubscribe.md","localizedDate":"2022年1月30日","excerpt":"<p><strong>建议先看一下上篇</strong> <a href=\\"https://www.h7ml.cn/designPattern/observer.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">观察者模式</a> ，发布订阅模式和观察者模式本质上还是一样的，并且发布订阅模式也没有在经典的设计模式书 <code>GoF</code> 中出现，很多地方也直接把两者看成一种设计模式了。</p>\\n<p><code>GoF</code> 的名字也有个有趣的故事，<a href=\\"http://wiki.c2.com/?GangOfFour\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这里</a> 贴过来：</p>","autoDesc":true}');export{X as comp,M as data};
