import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const e={},p=t(`<h2 id="什么是-redux" tabindex="-1"><a class="header-anchor" href="#什么是-redux"><span>什么是 Redux</span></a></h2><p>Redux 是一个用于 JavaScript 应用程序的状态管理库，它帮助我们有效地管理应用程序的状态，并使组件之间的数据传递更加简单和可控。Redux 使用单一的数据存储（store）来保存整个应用程序的状态，并通过 Reducers 和 Actions 来处理状态的变化。</p><h2 id="redux-的核心概念" tabindex="-1"><a class="header-anchor" href="#redux-的核心概念"><span>Redux 的核心概念</span></a></h2><p>Redux 的单一数据流是指整个应用程序中的数据状态（state）存储在一个单一的 JavaScript 对象中，通常称为&quot;Store&quot;。这个 Store 是唯一的，并且整个应用程序共享它。所有的数据改变都通过派发（dispatch）&quot;Action&quot;来完成，Action 是一个包含描述改变的信息的简单对象。然后，这些 Action 会被传递给 Reducer 函数，Reducer 会根据 Action 的类型来更新 Store 中的数据状态。组件可以订阅（subscribe）Store 的状态变化，以便在状态改变时重新渲染自己。</p><h3 id="store" tabindex="-1"><a class="header-anchor" href="#store"><span>Store：</span></a></h3><p>整个应用程序只有一个 Store，它是一个包含应用程序状态的 JavaScript 对象。在 Redux 中，我们使用 createStore 函数来创建这个 Store，并将一个根 Reducer 传递给它。</p><h3 id="action" tabindex="-1"><a class="header-anchor" href="#action"><span>Action：</span></a></h3><p>Action 是一个普通的 JavaScript 对象，它描述了发生的事件和带有的数据。Action 必须包含一个 type 字段，用于标识它的类型。其他字段可以用来传递任意数据。</p><h3 id="dispatch" tabindex="-1"><a class="header-anchor" href="#dispatch"><span>Dispatch：</span></a></h3><p>当应用程序中的某个组件需要改变状态时，它会调用 store.dispatch(action)方法来派发一个 Action。</p><h3 id="reducer" tabindex="-1"><a class="header-anchor" href="#reducer"><span>Reducer：</span></a></h3><p>Reducer 是一个纯函数，它接收当前的状态和一个 Action 作为参数，并根据 Action 的类型来返回一个新的状态。Reducer 不会直接修改原始状态，而是返回一个全新的状态对象。Redux 应用中可以有多个 Reducer，但最终它们会被合并成一个根 Reducer，并传递给 createStore 函数。</p><h3 id="state-更新" tabindex="-1"><a class="header-anchor" href="#state-更新"><span>State 更新：</span></a></h3><p>当 Action 被派发时，Redux 会调用根 Reducer 函数，并将当前的状态和 Action 传递给它。Reducer 函数根据 Action 的类型来更新状态，并返回一个新的状态对象。Redux 会用新的状态对象替换原始状态，从而更新整个应用程序的状态。</p><h3 id="订阅" tabindex="-1"><a class="header-anchor" href="#订阅"><span>订阅：</span></a></h3><p>组件可以通过 store.subscribe(listener)方法来订阅 Store 的状态变化。一旦状态发生改变，订阅的监听器（listener）就会被调用，组件可以在这里进行重新渲染，从而反映最新的状态。</p><h3 id="view-渲染" tabindex="-1"><a class="header-anchor" href="#view-渲染"><span>View 渲染：</span></a></h3><p>组件通过订阅 Store 的状态变化来实时更新自己的数据，并重新渲染视图。</p><p>这个单一数据流的过程确保了整个应用程序的数据流动是可预测且一致的。所有的状态都存储在一个中央的 Store 中，由 Reducer 函数进行管理和更新，而不是分散在各个组件中。这种架构使得应用程序的状态变得易于调试、测试和维护，同时也降低了数据流动的复杂性。</p><p>总的来说，Redux 的单一数据流模式提供了一种简单、可预测和可维护的状态管理方案，使得 React 应用程序开发更加高效和优雅。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> redux react-redux <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建-store" tabindex="-1"><a class="header-anchor" href="#创建-store"><span>创建 store</span></a></h3><p>在 Redux 中，我们通过创建一个 Store 来保存应用程序的状态。一个 Redux 应用只有一个全局唯一的 Store，类似于全局变量存储仓库。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;./reducer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-reducer" tabindex="-1"><a class="header-anchor" href="#创建-reducer"><span>创建 reducer</span></a></h3><p>Reducer 是一个纯函数，用于处理应用程序状态的变化。它接收当前的状态和一个 Action，根据 Action 的类型来更新状态。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> defaultStore <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inputValue</span><span class="token operator">:</span> <span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;前端&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;前端物语&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> defaultStore<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;value/changeInput&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-action" tabindex="-1"><a class="header-anchor" href="#创建-action"><span>创建 action</span></a></h3><p>Action 是一个普通的 JavaScript 对象，它描述了发生的事件和带有的数据。Action 必须包含一个 type 字段，用于标识它的类型。其他字段可以用来传递任意数据。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">changeInputAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;value/changeInput&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">payload</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件中使用" tabindex="-1"><a class="header-anchor" href="#组件中使用"><span>组件中使用</span></a></h3><p>在组件中，我们可以通过 React 的 useState 来获取 Store 中的状态，并且使用 store.subscribe 来订阅状态变化，以便在状态发生变化时更新组件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./App.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;antd&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;antd/dist/antd.css&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>appData<span class="token punctuation">,</span> setAppData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setAppData</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ... 省略其它代码</span>

  <span class="token keyword">const</span> <span class="token function-variable function">changeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;value/changeInput&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">payload</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;Write Something&#39;</span><span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeInputValue<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token comment">/* ... 省略其它代码 */</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>我们可以看到 Redux 的基本使用方法。组件通过订阅 Store 的状态变化来实时更新自己的数据，通过 dispatch 一个 action 来触发状态的更新。</p><h2 id="高级使用" tabindex="-1"><a class="header-anchor" href="#高级使用"><span>高级使用</span></a></h2><p>在高级使用部分，我们将介绍 Redux 中的 Action Creator 和拆分 Reducer。</p><h3 id="action-creator" tabindex="-1"><a class="header-anchor" href="#action-creator"><span>Action Creator</span></a></h3><p>Action Creator 是一个函数，用来创建 Action 对象。它封装了创建 Action 的过程，使得代码更加简洁和易于维护。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> defaultStore <span class="token operator">=</span> <span class="token string">&#39;Write something&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">inputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> defaultStore<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;value/changeInput&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newState <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">inputValueAction</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function-variable function">changeInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;value/changeInput&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">payload</span><span class="token operator">:</span> input<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> inputValue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拆分-reducer" tabindex="-1"><a class="header-anchor" href="#拆分-reducer"><span>拆分 Reducer</span></a></h3><p>当应用变得庞大复杂时，单一的 Reducer 可能会变得过于庞大。为了保持代码的清晰和易于维护，我们可以将 Reducer 进行拆分，分成多个子 Reducer，然后再合并成一个 Root Reducer</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// reducers/inputValue.js</span>
<span class="token keyword">const</span> defaultStore <span class="token operator">=</span> <span class="token string">&#39;Write something&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> defaultStore<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;value/changeInput&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newState <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// reducers/list.js</span>
<span class="token keyword">const</span> defaultStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;搞114514&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;坐下北泽JR&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> defaultStore<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;list/addItem&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// reducers/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> inputValue <span class="token keyword">from</span> <span class="token string">&quot;./inputValue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> list <span class="token keyword">from</span> <span class="token string">&quot;./list&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    inputValue<span class="token punctuation">,</span>
    list
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-root-reducer" tabindex="-1"><a class="header-anchor" href="#使用-root-reducer"><span>使用 Root Reducer</span></a></h3><p>在根组件中，我们可以使用 combineReducers 函数将所有子 Reducer 合并成一个 Root Reducer，并传递给 createStore 函数来创建 Store</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux"><span>react-redux</span></a></h2><p>当我们使用 React 来开发应用时，结合 Redux 可以更好地管理应用状态。react-redux 是 Redux 官方推荐的用于在 React 应用中集成 Redux 的官方库。它提供了一些高阶组件和钩子函数，帮助我们简化 Redux 在 React 中的使用。</p><p>主要有两个核心组件：Provider 和 connect。</p><h3 id="provider" tabindex="-1"><a class="header-anchor" href="#provider"><span>Provider</span></a></h3><p>Provider 组件是一个顶层组件，它接受 Redux 的 store 作为 props，并使得整个应用程序中的所有组件都能够访问到 Redux 的 store。通过 Provider 组件，我们无需手动将 store 传递给每个需要使用它的组件，而是让 React 的 Context 机制来帮助我们自动传递 store。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入Redux的store</span>

<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Root</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Root<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 Provider 将 Redux 的 store 传递给整个应用程序，从而让 App 组件及其子组件都可以访问到 Redux 的 store。</p><h3 id="connect" tabindex="-1"><a class="header-anchor" href="#connect"><span>connect</span></a></h3><p>react-redux 提供了 connect 函数，它允许我们将组件连接到 Redux 的 store，从而可以访问 store 中的状态和派发 action。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以通过props访问store中的状态</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> inputValue<span class="token punctuation">,</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token comment">// ... 省略其它代码</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// mapStateToProps函数：将store中的状态映射为组件的props</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">inputValue</span><span class="token operator">:</span> state<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>
  <span class="token literal-property property">list</span><span class="token operator">:</span> state<span class="token punctuation">.</span>list<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 connect 函数将 App 组件连接到 Redux 的 store，通过 mapStateToProps 函数将 store 中的状态映射为组件的 props。现在，App 组件可以通过 props 来访问 Redux 的状态，同时还可以通过 dispatch 方法派发 action 来更新状态。</p><h3 id="使用-connect-函数更新状态" tabindex="-1"><a class="header-anchor" href="#使用-connect-函数更新状态"><span>使用 connect 函数更新状态</span></a></h3><p>除了通过 mapStateToProps 函数访问状态外，connect 函数还可以接收第二个参数 mapDispatchToProps，它允许我们将 action creators 封装成函数，并作为 props 传递给组件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputValueAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入action creators</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以通过props访问store中的状态和action creators</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> inputValue<span class="token punctuation">,</span> list<span class="token punctuation">,</span> changeInputValue <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token comment">// ... 省略其它代码</span>

  <span class="token keyword">const</span> <span class="token function-variable function">changeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用封装后的action creator来派发action</span>
    <span class="token function">changeInputValueAction</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// ... 省略其它代码</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// mapStateToProps函数：将store中的状态映射为组件的props</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">inputValue</span><span class="token operator">:</span> state<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>
  <span class="token literal-property property">list</span><span class="token operator">:</span> state<span class="token punctuation">.</span>list<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// mapDispatchToProps函数：将action creators映射为组件的props</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">changeInputValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>inputValueAction<span class="token punctuation">.</span><span class="token function">changeInput</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 mapDispatchToProps 函数将 inputValueAction.changeInput 封装为 changeInputValue 函数，并将它作为 props 传递给 App 组件。现在，App 组件可以通过 changeInputValue 来派发 action，并更新 Redux 的状态。通过 react-redux 库的提供的 Provider 和 connect 函数，我们可以更加方便地在 React 应用中集成 Redux，并在组件中访问和更新状态，使得应用开发更加高效和简洁。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>在高级使用部分，我们引入了 Action Creator 来封装创建 Action 的过程，使代码更加简洁。同时，我们将 Reducer 进行了拆分，通过 combineReducers 函数合并成一个 Root Reducer，从而保持代码的清晰和易于维护。</p><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h2><p>Redux 是一个强大的状态管理库，可以帮助我们更好地管理 React 应用程序的状态。在初体验中，我们了解了 Redux 的基本使用方法，包括创建 Store、创建 Reducer 和在组件中调用 Store。在高级使用中，我们学习了 Action Creator 和拆分 Reducer 的技巧，使得 Redux 在应对大型复杂应用时更加灵活和高效。</p>`,67),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","redux.html.vue"]]),k=JSON.parse(`{"path":"/posts/react/redux.html","title":"Redux初体验及高级使用","lang":"zh-CN","frontmatter":{"icon":"react","order":1,"date":"2024-08-05T00:00:00.000Z","author":"h7ml","title":"Redux初体验及高级使用","description":"Redux初体验及高级使用","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>nestjs  控制反转（IOC）与依赖注入（DI）","star":1,"image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","shortTitle":"Redux初体验及高级使用","category":["Redux","react"],"tag":["Redux","react"],"head":[["meta",{"name":"keywords","content":"Redux初体验及高级使用"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/react/redux.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/react/redux.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"Redux初体验及高级使用"}],["meta",{"property":"og:description","content":"Redux初体验及高级使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-05T05:10:02.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"Redux初体验及高级使用"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"Redux"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:published_time","content":"2024-08-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-05T05:10:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redux初体验及高级使用\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2024-08-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-05T05:10:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"什么是 Redux","slug":"什么是-redux","link":"#什么是-redux","children":[]},{"level":2,"title":"Redux 的核心概念","slug":"redux-的核心概念","link":"#redux-的核心概念","children":[{"level":3,"title":"Store：","slug":"store","link":"#store","children":[]},{"level":3,"title":"Action：","slug":"action","link":"#action","children":[]},{"level":3,"title":"Dispatch：","slug":"dispatch","link":"#dispatch","children":[]},{"level":3,"title":"Reducer：","slug":"reducer","link":"#reducer","children":[]},{"level":3,"title":"State 更新：","slug":"state-更新","link":"#state-更新","children":[]},{"level":3,"title":"订阅：","slug":"订阅","link":"#订阅","children":[]},{"level":3,"title":"View 渲染：","slug":"view-渲染","link":"#view-渲染","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"创建 store","slug":"创建-store","link":"#创建-store","children":[]},{"level":3,"title":"创建 reducer","slug":"创建-reducer","link":"#创建-reducer","children":[]},{"level":3,"title":"创建 action","slug":"创建-action","link":"#创建-action","children":[]},{"level":3,"title":"组件中使用","slug":"组件中使用","link":"#组件中使用","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"高级使用","slug":"高级使用","link":"#高级使用","children":[{"level":3,"title":"Action Creator","slug":"action-creator","link":"#action-creator","children":[]},{"level":3,"title":"拆分 Reducer","slug":"拆分-reducer","link":"#拆分-reducer","children":[]},{"level":3,"title":"使用 Root Reducer","slug":"使用-root-reducer","link":"#使用-root-reducer","children":[]}]},{"level":2,"title":"react-redux","slug":"react-redux","link":"#react-redux","children":[{"level":3,"title":"Provider","slug":"provider","link":"#provider","children":[]},{"level":3,"title":"connect","slug":"connect","link":"#connect","children":[]},{"level":3,"title":"使用 connect 函数更新状态","slug":"使用-connect-函数更新状态","link":"#使用-connect-函数更新状态","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}],"git":{"createdTime":1691205518000,"updatedTime":1691212202000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":2}]},"readingTime":{"minutes":8.42,"words":2526},"filePathRelative":"posts/react/redux.md","localizedDate":"2024年8月5日","excerpt":"<h2>什么是 Redux</h2>\\n<p>Redux 是一个用于 JavaScript 应用程序的状态管理库，它帮助我们有效地管理应用程序的状态，并使组件之间的数据传递更加简单和可控。Redux 使用单一的数据存储（store）来保存整个应用程序的状态，并通过 Reducers 和 Actions 来处理状态的变化。</p>\\n<h2>Redux 的核心概念</h2>\\n<p>Redux 的单一数据流是指整个应用程序中的数据状态（state）存储在一个单一的 JavaScript 对象中，通常称为\\"Store\\"。这个 Store 是唯一的，并且整个应用程序共享它。所有的数据改变都通过派发（dispatch）\\"Action\\"来完成，Action 是一个包含描述改变的信息的简单对象。然后，这些 Action 会被传递给 Reducer 函数，Reducer 会根据 Action 的类型来更新 Store 中的数据状态。组件可以订阅（subscribe）Store 的状态变化，以便在状态改变时重新渲染自己。</p>"}`);export{d as comp,k as data};
