import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as t,c,a as l,f as e}from"./app-Cbix2SPG.js";const o={},i=e(`<h2 id="实现-requestidlecallback" tabindex="-1"><a class="header-anchor" href="#实现-requestidlecallback"><span>实现 requestIdleCallback</span></a></h2><h3 id="浏览器一帧" tabindex="-1"><a class="header-anchor" href="#浏览器一帧"><span>浏览器一帧</span></a></h3><p>当前大多数的屏幕刷新率都是 <code>60hz</code>，也就是每秒屏幕刷新 <code>60</code> 次，低于 <code>60hz</code> 人眼就会感知卡顿掉帧等情况，同样我们前端浏览器所说的 <code>FPS（frame per second）</code>是浏览器每秒刷新的次数，理论上 <code>FPS</code> 越高人眼觉得界面越流畅，在两次屏幕硬件刷新之间，浏览器正好进行一次刷新（重绘），网页也会很流畅，当然这种是理想模式， 如果两次硬件刷新之间浏览器重绘多次是没意义的，只会消耗资源，如果浏览器重绘一次的时间是硬件多次刷新的时间，那么人眼将感知卡顿掉帧等， 所以浏览器对一次重绘的渲染工作需要在 <code>16ms（1000ms/60）</code>之内完成，也就是说每一次重绘小于 16ms 才不会卡顿掉帧。</p><p><strong>浏览器的一帧说的就是一次完整的重绘。</strong></p><p>一次重绘浏览器需要做哪些事情？</p><figure><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame.awebp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="认识-requestidlecallback" tabindex="-1"><a class="header-anchor" href="#认识-requestidlecallback"><span>认识 requestIdleCallback</span></a></h3><p>在执行优先级较低的任务时，可以考虑使用 <code>window.requestIdleCallback()</code>，意为交予任务给浏览器，浏览器有空闲的时候执行而不是立即执行这些任务。</p><p>这样这些优先级较低的任务就不阻碍主线程的任务，以达到性能优化的效果。</p><figure><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame2.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workLoop<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 优先级较低的工作</span>
<span class="token keyword">function</span> <span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token parameter">deadline</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果帧内有富余的时间，或者超时 则执行任务</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> deadline<span class="token punctuation">.</span>didTimeout<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> works<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行的函数....</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 有未完成的任务 则重新调度</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>works<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workLoop<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>callback</code>: 一个在事件循环空闲时即将被调用的函数的引用。函数会接收到一个名为 <code>IdleDeadline</code> 的参数，这个参数可以获取当前空闲时间以及回调是否在超时时间前已经执行的状态。其中 <code>IdleDeadline</code> 对象包含： <ul><li><code>didTimeout</code>，布尔值，表示任务是否超时，结合 <code>timeRemaining</code> 使用。</li><li><code>timeRemaining()</code>，表示当前帧剩余的时间，也可理解为留给任务的时间还有多少。</li></ul></li><li><code>timeout</code>: 表示超过这个时间后，如果任务还没执行，则强制执行，不必等待空闲。尚未通过超时毫秒数调用回调，那么回调会在下一次空闲时期被强制执行。如果明确在某段时间内执行回调，可以设置 <code>timeout</code> <code>值。在浏览器繁忙的时候，requestIdleCallback</code> 超时执行就和 <code>setTimeout</code> 效果一样。</li></ul><h3 id="浏览器什么时候有空闲时段" tabindex="-1"><a class="header-anchor" href="#浏览器什么时候有空闲时段"><span>浏览器什么时候有空闲时段</span></a></h3><h5 id="场景一" tabindex="-1"><a class="header-anchor" href="#场景一"><span>场景一</span></a></h5><p>当浏览器一帧渲染所用时间小于屏幕刷新率（对于具有 60Hz 的设备，一帧间隔应该小于 16ms）时间，到下一帧渲染渲染开始时出现的空闲时间，如图 idle period，</p><figure><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame2.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="场景二" tabindex="-1"><a class="header-anchor" href="#场景二"><span>场景二</span></a></h5><p>当浏览器没有可渲染的任务，主线程一直处于空闲状态，事件队列为空。为了避免在不可预测的任务（例如用户输入的处理）中引起用户可察觉的延迟，这些空闲周期的长度应限制为最大值 <code>50ms</code>，也就是 <code>timeRemaining</code> 最大不超过 50（也就是 20fps，这也是 <code>react polyfill</code> 的原因之一），当空闲时段结束时，可以调度另一个空闲时段，如果它保持空闲，那么空闲时段将更长，后台任务可以在更长时间段内发生。如图:</p><figure><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame3.awebp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="react-如何实现-requestidlecallback" tabindex="-1"><a class="header-anchor" href="#react-如何实现-requestidlecallback"><span>react 如何实现 requestIdleCallback</span></a></h3><p>前面提到 <code>requestIdleCallback</code> 工作只有 <code>20FPS</code>，一般对用户来感觉来说，需要到 <code>60FPS</code> 才是流畅的, 即一帧时间为 <code>16.7 ms</code>，所以这也是 react 团队自己实现 <code>requestIdleCallback</code> 的原因。</p><p><strong>实现大致思路是在 requestAnimationFrame 获取一桢的开始时间，触发一个 postMessage，在空闲的时候调用 idleTick 来完成异步任务。</strong></p>`,22),p=e('<h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>requestIdleCallback</code> 需要注意的：</p><ul><li><code>requestIdleCallback</code> 是屏幕渲染之后执行的。</li><li>一些低优先级的任务可使用 <code>requestIdleCallback</code> 等浏览器不忙的时候来执行，同时因为时间有限，它所执行的任务应该尽量是能够量化，细分的微任务（micro task）比较适合 <code>requestIdleCallback</code>。</li><li><code>requestIdleCallback</code> 不会和帧对齐，所以涉及到 DOM 的操作和动画最好放在 <code>requestAnimationFrame</code> 中执行，<code>requestAnimationFrame</code> 在重新渲染屏幕之前执行。</li><li><code>Promise</code> 也不建议在这里面进行，因为 <code>Promise</code> 的回调属性 <code>Event loop</code> 中优先级较高的一种微任务，会在 <code>requestIdleCallback</code> 结束时立即执行，不管此时是否还有富余的时间，这样有很大可能会让一帧超过 16 ms。</li></ul>',3);function r(d,u){const a=s("Tabs");return t(),c("div",null,[i,l(a,{id:"85",data:[]}),p])}const h=n(o,[["render",r],["__file","requestIdleCallback.html.vue"]]),b=JSON.parse('{"path":"/posts/react/requestIdleCallback.html","title":"requestIdleCallback","lang":"zh-CN","frontmatter":{"icon":"react","order":4,"date":"2021-07-12T00:00:00.000Z","author":"h7ml","title":"requestIdleCallback","category":"react","tag":["react","requestIdleCallback"],"star":true,"lastUpdated":false,"description":"实现 requestIdleCallback 浏览器一帧 当前大多数的屏幕刷新率都是 60hz，也就是每秒屏幕刷新 60 次，低于 60hz 人眼就会感知卡顿掉帧等情况，同样我们前端浏览器所说的 FPS（frame per second）是浏览器每秒刷新的次数，理论上 FPS 越高人眼觉得界面越流畅，在两次屏幕硬件刷新之间，浏览器正好进行一次刷新（重绘...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/react/requestIdleCallback.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/react/requestIdleCallback.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"requestIdleCallback"}],["meta",{"property":"og:description","content":"实现 requestIdleCallback 浏览器一帧 当前大多数的屏幕刷新率都是 60hz，也就是每秒屏幕刷新 60 次，低于 60hz 人眼就会感知卡顿掉帧等情况，同样我们前端浏览器所说的 FPS（frame per second）是浏览器每秒刷新的次数，理论上 FPS 越高人眼觉得界面越流畅，在两次屏幕硬件刷新之间，浏览器正好进行一次刷新（重绘..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame.awebp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"requestIdleCallback"}],["meta",{"property":"article:published_time","content":"2021-07-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"requestIdleCallback\\",\\"image\\":[\\"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame.awebp\\",\\"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame2.webp\\",\\"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame2.webp\\",\\"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/browser-frame3.awebp\\"],\\"datePublished\\":\\"2021-07-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"实现 requestIdleCallback","slug":"实现-requestidlecallback","link":"#实现-requestidlecallback","children":[{"level":3,"title":"浏览器一帧","slug":"浏览器一帧","link":"#浏览器一帧","children":[]},{"level":3,"title":"认识 requestIdleCallback","slug":"认识-requestidlecallback","link":"#认识-requestidlecallback","children":[]},{"level":3,"title":"浏览器什么时候有空闲时段","slug":"浏览器什么时候有空闲时段","link":"#浏览器什么时候有空闲时段","children":[]},{"level":3,"title":"react 如何实现 requestIdleCallback","slug":"react-如何实现-requestidlecallback","link":"#react-如何实现-requestidlecallback","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":6.03,"words":1808},"filePathRelative":"posts/react/requestIdleCallback.md","localizedDate":"2021年7月12日","excerpt":"<h2>实现 requestIdleCallback</h2>\\n<h3>浏览器一帧</h3>\\n<p>当前大多数的屏幕刷新率都是 <code>60hz</code>，也就是每秒屏幕刷新 <code>60</code> 次，低于 <code>60hz</code> 人眼就会感知卡顿掉帧等情况，同样我们前端浏览器所说的 <code>FPS（frame per second）</code>是浏览器每秒刷新的次数，理论上 <code>FPS</code> 越高人眼觉得界面越流畅，在两次屏幕硬件刷新之间，浏览器正好进行一次刷新（重绘），网页也会很流畅，当然这种是理想模式， 如果两次硬件刷新之间浏览器重绘多次是没意义的，只会消耗资源，如果浏览器重绘一次的时间是硬件多次刷新的时间，那么人眼将感知卡顿掉帧等， 所以浏览器对一次重绘的渲染工作需要在 <code>16ms（1000ms/60）</code>之内完成，也就是说每一次重绘小于 16ms 才不会卡顿掉帧。</p>","autoDesc":true}');export{h as comp,b as data};
