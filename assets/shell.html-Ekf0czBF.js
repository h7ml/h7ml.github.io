import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as p,d as s,e as n,a as l,f as a}from"./app-Cbix2SPG.js";const c={},d=a(`<h2 id="shell" tabindex="-1"><a class="header-anchor" href="#shell"><span>Shell</span></a></h2><h2 id="shell-概述" tabindex="-1"><a class="header-anchor" href="#shell-概述"><span>Shell 概述</span></a></h2><figure><img src="https://static.h7ml.cn/vitepress/assets/images/linux/image-20221026104446000.png" alt="image-20221026104446000" tabindex="0" loading="lazy"><figcaption>image-20221026104446000</figcaption></figure><ul><li>Linux 提供的 Shell 解析器有</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token operator">/</span>bin<span class="token operator">/</span>sh
<span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sh
<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token operator">/</span>bin<span class="token operator">/</span>tcsh
<span class="token operator">/</span>bin<span class="token operator">/</span>csh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>bash 和 sh 的关系</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>┌─<span class="token punctuation">[</span>root@<span class="token number">193_168_88_100</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">/</span>bin<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span>二 <span class="token number">10</span>月 <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">]</span>
└─<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> ll <span class="token operator">|</span> grep bash
 bash
 bashbug <span class="token operator">-&gt;</span> bashbug<span class="token operator">-</span><span class="token number">64</span>
 bashbug<span class="token operator">-</span><span class="token number">64</span>
 sh <span class="token operator">-&gt;</span> bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Centos 默认的解析器是 bash</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>┌─<span class="token punctuation">[</span>root@<span class="token number">193_168_88_100</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">/</span>bin<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span>二 <span class="token number">10</span>月 <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">]</span>
└─<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> echo <span class="token variable">$SHELL</span>
<span class="token operator">/</span>bin<span class="token operator">/</span>zsh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-入门" tabindex="-1"><a class="header-anchor" href="#shell-入门"><span>Shell 入门</span></a></h2><p>脚本格式</p><h3 id="第一个-shell" tabindex="-1"><a class="header-anchor" href="#第一个-shell"><span>第一个 Shell</span></a></h3><p><strong>脚本：helloworld.s</strong></p><p>创建一个 Shell 脚本，输出 helloworld</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>touch helloworld<span class="token punctuation">.</span>sh
vim helloworld<span class="token punctuation">.</span>sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,15),r={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},u=a(`<div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&quot;helloworld&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>脚本的常用执行方式</strong></p><h4 id="第一种" tabindex="-1"><a class="header-anchor" href="#第一种"><span>第一种</span></a></h4><p>采用 bash 或 sh+脚本的相对路径或绝对路径（不用赋予脚本+x 权限） sh+脚本的相对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>sh <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>sh+脚本的绝对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>sh <span class="token operator">/</span>home<span class="token operator">/</span>atguigu<span class="token operator">/</span>shells<span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>bash+脚本的相对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>bash <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>bash+脚本的绝对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>bash <span class="token operator">/</span>home<span class="token operator">/</span>atguigu<span class="token operator">/</span>shells<span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二种" tabindex="-1"><a class="header-anchor" href="#第二种"><span>第二种</span></a></h4><p>采用输入脚本的绝对路径或相对路径执行脚本**（必须具有可执行权限+x)**</p><p>首先要赋予 <code>helloworld.sh</code> 脚本的+x 权限</p><p><strong>执行脚本</strong></p><p>相对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>绝对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token operator">/</span>home<span class="token operator">/</span>atguigu<span class="token operator">/</span>shells<span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>WARNING</p><p>注意：第一种执行方法，本质是 bash 解析器帮你执行脚本，所以脚本本身不需要执行 权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p><h4 id="第三种" tabindex="-1"><a class="header-anchor" href="#第三种"><span>第三种</span></a></h4><p>在脚本的路径前加上“.”或者 sourc</p><p>有以下脚本</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ cat test<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
<span class="token constant">A</span><span class="token operator">=</span><span class="token number">5</span>
echo <span class="token variable">$A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别使用 sh，bash，./ 和 . 的方式来执行，结果如下：</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ bash test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ sh test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span> test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因：</strong></p><ul><li>前两种方式都是在当前 <code>shell</code> 中打开一个子 <code>shell</code> 来执行脚本内容，当脚本内容结束，则子 <code>shell</code> 关闭，回到父 <code>shell</code> 中。</li><li>第三种，也就是使用在脚本路径前加“.”或者 <code>source</code> 的方式，**可以使脚本内容在当前<code>shell</code> 里执行，而无需打开子 <code>shell！</code>**这也是为什么我们每次要修改完<code>/etc/profile</code> 文件以后，需要 <code>source</code> 一下的原因。</li><li>开子 <code>shell</code> 与不开子 <code>shell</code> 的区别就在于，环境变量的继承关系，如在子 <code>shell</code> 中设置的当前变量，父 <code>shell</code> 是不可见的</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h2 id="系统预定义变量" tabindex="-1"><a class="header-anchor" href="#系统预定义变量"><span>系统预定义变量</span></a></h2><p>常用系统变量 $HOME、$PWD、$SHELL、$USER...</p><ul><li>查看系统变量的值</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$HOME</span>
<span class="token operator">/</span>home<span class="token operator">/</span>atguigu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>显示当前 Shell 中所有变量：set</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ set
<span class="token constant">BASH</span><span class="token operator">=</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token constant">BASH_ALIASES</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">BASH_ARGC</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">BASH_ARGV</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义变量" tabindex="-1"><a class="header-anchor" href="#自定义变量"><span>自定义变量</span></a></h2><p><strong>基本语法</strong></p><ul><li>定义变量：变量名=变量值，<strong>注意，=号前后不能有空格</strong></li><li>撤销变量：unset 变量名</li><li>声明静态变量：readonly 变量，<strong>注意：不能 unset</strong></li></ul><p><strong>变量定义规则</strong></p><ul><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头，<strong>环境变量名建议大写</strong>。</li><li>等号两侧不能有空格</li><li>在 bash 中，<strong>变量默认类型都是字符串类型，无法直接进行数值运算</strong>。</li><li>变量的值<strong>如果有空格，需要使用双引号或单引号括起来</strong></li></ul><p><strong>案例实操</strong></p><ul><li>定义变量 A</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token constant">A</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给变量 A 重新赋值</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token constant">A</span><span class="token operator">=</span><span class="token number">8</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>撤销变量 A</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ unset <span class="token constant">A</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明静态的变量 B=2，不能 unset</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ readonly <span class="token constant">B</span><span class="token operator">=</span><span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$B</span>
<span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token constant">B</span><span class="token operator">=</span><span class="token number">9</span>
<span class="token operator">-</span>bash<span class="token operator">:</span> <span class="token constant">B</span><span class="token operator">:</span> readonly variable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ <span class="token constant">C</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ echo <span class="token variable">$C</span>
<span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>变量的值如果有空格，需要使用双引号或单引号括起来</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ <span class="token constant">D</span><span class="token operator">=</span><span class="token constant">I</span> love banzhang
<span class="token operator">-</span>bash<span class="token operator">:</span> world<span class="token operator">:</span> command not found
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ <span class="token constant">D</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;I love banzhang&quot;</span></span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ echo <span class="token variable">$D</span>
<span class="token constant">I</span> love banzhang
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可把变量提升为全局环境变量，可供其他 Shell 程序使用，<strong>export 变量名</strong></li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim helloworld<span class="token punctuation">.</span>sh

<span class="token comment"># 在 helloworld.sh 文件中增加 echo $B</span>

<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&quot;helloworld&quot;</span></span>
echo <span class="token variable">$B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发现并没有打印输出变量 B 的值。</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ export <span class="token constant">B</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
helloworld
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>在子 <code>Shell</code> 中声明或者改变全局的变量<strong>都不会影响父 <code>Shell</code> 中的变量</strong></p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><h3 id="单引号" tabindex="-1"><a class="header-anchor" href="#单引号"><span>单引号</span></a></h3><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><h3 id="双引号" tabindex="-1"><a class="header-anchor" href="#双引号"><span>双引号</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">your_name</span><span class="token operator">=</span><span class="token string">&quot;runoob&quot;</span>
<span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&quot;Hello, I know you are <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">$your_name</span><span class="token entity" title="\\&quot;">\\&quot;</span>! <span class="token entity" title="\\n">\\n</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token variable">$str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p><code>bash</code>支持一维数组**（不支持多维数组）<strong>，并且</strong>没有限定数组的大小**。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h3 id="定义数组" tabindex="-1"><a class="header-anchor" href="#定义数组"><span>定义数组</span></a></h3><p>在 Shell 中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为：</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>value0 value1 value2 value3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>
value0
value1
value2
value3
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以单独定义数组的各个分量：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>array_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>value0
array_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value1
array_name<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>valuen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="读取数组" tabindex="-1"><a class="header-anchor" href="#读取数组"><span>读取数组</span></a></h3><p>读取数组元素值的一般格式是：</p><p>例如：</p><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><h3 id="获取数组的长度" tabindex="-1"><a class="header-anchor" href="#获取数组的长度"><span>获取数组的长度</span></a></h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token operator">*</span><span class="token comment"># 取得数组元素的个数*</span>
length<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token comment">#array_name[@]}</span>
<span class="token operator">*</span><span class="token comment"># 或者*</span>
length<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token comment">#array_name[*]}</span>
<span class="token operator">*</span><span class="token comment"># 取得数组单个元素的长度*</span>
lengthn<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token comment">#array_name[n]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊变量" tabindex="-1"><a class="header-anchor" href="#特殊变量"><span>特殊变量</span></a></h2><h3 id="n" tabindex="-1"><a class="header-anchor" href="#n"><span>$n</span></a></h3><p>功能描述：n 为数字，$0 代表该脚本名称，<code>$1-$9</code> 代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如<code>\${10}</code></p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ touch parameter<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim parameter<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$n==========&#39;</span></span>
echo $<span class="token number">0</span>
echo $<span class="token number">1</span>
echo $<span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ chmod <span class="token number">777</span> parameter<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh cls xz
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh
cls
xz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>$</span></a></h3><p>功能描述：获取所有输<strong>入参数个数</strong>，常用于循环，判断参数的个数是否正确以及加强脚本的健壮性</p><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim parameter<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$n==========&#39;</span></span>
echo $<span class="token number">0</span>
echo $<span class="token number">1</span>
echo $<span class="token number">2</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$#==========&#39;</span></span>
echo $<span class="token comment">#</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ chmod <span class="token number">777</span> parameter<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh cls xz
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh
cls
xz
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$<span class="token comment">#==========</span>
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="、" tabindex="-1"><a class="header-anchor" href="#、"><span>$*、$@</span></a></h3><ul><li><code>$*</code> 这个变量代表<strong>命令行中所有的参数</strong>，<code>$*</code>把所有的参数<strong>看成一个整体</strong></li><li><code>$@</code> 这个变量也代表<strong>命令行中所有的参数</strong>，不过<code>$@</code>把<strong>每个参数区分对待</strong></li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim parameter<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$n==========&#39;</span></span>
echo $<span class="token number">0</span>
echo $<span class="token number">1</span>
echo $<span class="token number">2</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$#==========&#39;</span></span>
echo $<span class="token comment">#</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$*==========&#39;</span></span>
echo $<span class="token operator">*</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$@==========&#39;</span></span>
echo $@
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh a b c d e f g
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh
a
b
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$<span class="token comment">#==========</span>
<span class="token number">7</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$<span class="token operator">*=</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
a b c d e f g
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$@<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
a b c d e f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>$？</span></a></h3><p><code>$？</code><strong>最后一次执行的命令的返回状态</strong>。如果这个变量的值为 0，证明上一 个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明 上一个命令执行不正确了。</p>`,101),v={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
hello world
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo $<span class="token operator">?</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>运算符有两种写法</p><ul><li><code>((表达式))</code></li><li><code>[ 表达式 ]</code> 注意 [] 里面左右要有空格</li></ul><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \\* $b</code> 结果为 200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table><blockquote><p>**注意：**条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong>。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + $b<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;a + b : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a - $b<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;a - b : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a <span class="token punctuation">\\</span>* $b<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;a * b : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $b / $a<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;b / a : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $b % $a<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;b % a : <span class="token variable">$val</span>&quot;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token number">10</span> <span class="token operator">-</span>eq <span class="token number">20</span><span class="token operator">:</span> a 不等于 b
<span class="token number">10</span> <span class="token operator">-</span>ne <span class="token number">20</span><span class="token operator">:</span> a 不等于 b
<span class="token number">10</span> <span class="token operator">-</span>gt <span class="token number">20</span><span class="token operator">:</span> a 不大于 b
<span class="token number">10</span> <span class="token operator">-</span>lt <span class="token number">20</span><span class="token operator">:</span> a 小于 b
<span class="token number">10</span> <span class="token operator">-</span>ge <span class="token number">20</span><span class="token operator">:</span> a 小于 b
<span class="token number">10</span> <span class="token operator">-</span>le <span class="token number">20</span><span class="token operator">:</span> a 小于或等于 b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><ul><li>乘号<code>(*)</code>前边必须加反斜杠()才能实现乘法运算；</li><li><code>if...then...fi</code> 是条件语句，后续将会讲解。</li><li>在 <code>MAC</code> 中 <code>shell</code> 的 <code>expr</code> 语法是：<strong><code>$((表达式))</code></strong>，此处表达式中的 <code>&quot;*&quot;</code> 不需要转义符号 &quot;&quot; 。</li></ul><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h2><p><strong>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</strong>。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -eq <span class="token variable">$b</span> : a 等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -eq <span class="token variable">$b</span>: a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ne</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ne <span class="token variable">$b</span>: a 不等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ne <span class="token variable">$b</span> : a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -gt <span class="token variable">$b</span>: a 大于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -gt <span class="token variable">$b</span>: a 不大于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -lt <span class="token variable">$b</span>: a 小于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -lt <span class="token variable">$b</span>: a 不小于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ge</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ge <span class="token variable">$b</span>: a 大于或等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ge <span class="token variable">$b</span>: a 小于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-le</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -le <span class="token variable">$b</span>: a 小于或等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -le <span class="token variable">$b</span>: a 大于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">20</span> <span class="token operator">:</span> a 不等于 b
<span class="token number">10</span> 小于 <span class="token number">100</span> 且 <span class="token number">20</span> 大于 <span class="token number">15</span> <span class="token operator">:</span> 返回 <span class="token boolean">true</span>
<span class="token number">10</span> 小于 <span class="token number">100</span> 或 <span class="token number">20</span> 大于 <span class="token number">100</span> <span class="token operator">:</span> 返回 <span class="token boolean">true</span>
<span class="token number">10</span> 小于 <span class="token number">5</span> 或 <span class="token number">20</span> 大于 <span class="token number">100</span> <span class="token operator">:</span> 返回 <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::TIP</p><p>这里我们使用 <code>((表达式))</code> 来做判断的话。在 <code>((表达式))</code> 中就可以写 <code>&lt;,&gt;,&lt;=,&gt;=,=</code>这些数学的运算符号</p><p>:::</p><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><p>| 运算符 | 说明 | 举例 |<br> | ------ | ---------- | ------------------------------------------- | --------- | -------------- | --- | ------------------------ |<br> | &amp;&amp; | 逻辑的 AND | [[$a -lt 100 &amp;&amp; $b -gt 100]] 返回 false |<br> | | | | 逻辑的 OR | [[$a -lt 100 | | $b -gt 100]] 返回 true |</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">!</span>/bin/bash

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$b</span> <span class="token parameter variable">-gt</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 true&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 false&quot;</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">100</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token parameter variable">-gt</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 true&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 false&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符"><span>字符串运算符</span></a></h2><p>下表列出了常用的字符串运算符，假定变量 a 为 &quot;abc&quot;，变量 b 为 &quot;efg&quot;：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否不相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为 0，为 0 返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为 0，不为 0 返回 true。</td><td>[ -n &quot;$a&quot; ] 返回 true。</td></tr><tr><td>$</td><td>检测字符串是否不为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">&quot;abc&quot;</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">&quot;efg&quot;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> = <span class="token variable">$b</span> : a 等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> = <span class="token variable">$b</span>: a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> != <span class="token variable">$b</span> : a 不等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> != <span class="token variable">$b</span>: a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$a</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-z <span class="token variable">$a</span> : 字符串长度为 0&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-z <span class="token variable">$a</span> : 字符串长度不为 0&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-n <span class="token variable">$a</span> : 字符串长度不为 0&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-n <span class="token variable">$a</span> : 字符串长度为 0&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> : 字符串不为空&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> : 字符串为空&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>abc <span class="token operator">=</span> efg<span class="token operator">:</span> a 不等于 b
abc <span class="token operator">!=</span> efg <span class="token operator">:</span> a 不等于 b
<span class="token operator">-</span>z abc <span class="token operator">:</span> 字符串长度不为 <span class="token number">0</span>
<span class="token operator">-</span>n abc <span class="token operator">:</span> 字符串长度不为 <span class="token number">0</span>
abc <span class="token operator">:</span> 字符串不为空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件测试运算符" tabindex="-1"><a class="header-anchor" href="#文件测试运算符"><span>文件测试运算符</span></a></h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 变量 file 表示文件 /var/www/runoob/test.sh，它的大小为 100 字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：</span>
<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;/var/www/runoob/test.sh&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可读&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可读&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-w</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可写&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可写&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可执行&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可执行&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件为普通文件&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件为特殊文件&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件是个目录&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不是个目录&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不为空&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件为空&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件存在&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不存在&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code>文件可读
文件可写
文件可执行
文件为普通文件
文件不是个目录
文件不为空
文件存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流程控制-重点" tabindex="-1"><a class="header-anchor" href="#流程控制-重点"><span>流程控制（重点）</span></a></h2><h2 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else"><span>if else</span></a></h2><h3 id="fi" tabindex="-1"><a class="header-anchor" href="#fi"><span>fi</span></a></h3><p>if 语句语法格式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写成一行（适用于终端命令提示符）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;ssh&quot;</span><span class="token variable">)</span></span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TIP</p><p>末尾的 <strong>fi</strong> 就是 <strong>if</strong> 倒过来拼写，后面还会遇到类似的。</p><p>简单的说就是和<code>JS</code>中的 <code>if() { }</code> 这里的 <code>{}</code> 代表一个区域表示<code>if</code>成立了执行这个区域里面的代码，但在<code>Shell</code>中 <code>{}</code> 有这其他的含义，所以 <strong><code>if</code> 代表开始 <code>fi</code> 代表结束把中间的代码框起来表示<code>if</code>成立后执行的代码。</strong></p><p><strong>其中 if 后的语句成功执行就会跳转到 then 后的语句，否则不跳转</strong>，then 表示判断成功后要执行的语句。</p><h3 id="if-else-1" tabindex="-1"><a class="header-anchor" href="#if-else-1"><span>if else</span></a></h3><p>if else 语法格式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
<span class="token keyword">else</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-else-if-else" tabindex="-1"><a class="header-anchor" href="#if-else-if-else"><span>if else-if else</span></a></h3><p><code>if else-if else</code> 语法格式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition1
<span class="token keyword">then</span>
    command1
<span class="token keyword">elif</span> condition2
<span class="token keyword">then</span>
    command2
<span class="token keyword">else</span>
    commandN
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if else 的 <strong>[...]</strong> 判断语句中大于使用 <strong>-gt</strong>，小于使用 <strong>-lt</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token parameter variable">-gt</span> <span class="token string">&quot;<span class="token variable">$b</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 <strong>((...))</strong> 作为判断语句，大于和小于可以直接使用 <strong>&gt;</strong> 和 <strong>&lt;</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下实例判断两个变量是否相等：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 大于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 小于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;没有符合的条件&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><p>if else 语句经常与 test 命令结合使用，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">num1</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token number">2</span>*3<span class="token punctuation">]</span>
<span class="token assign-left variable">num2</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token number">1</span>+5<span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token builtin class-name">test</span> $<span class="token punctuation">[</span>num1<span class="token punctuation">]</span> <span class="token parameter variable">-eq</span> $<span class="token punctuation">[</span>num2<span class="token punctuation">]</span>
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数字相等!&#39;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数字不相等!&#39;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><h2 id="case-esac" tabindex="-1"><a class="header-anchor" href="#case-esac"><span>case ... esac</span></a></h2><p><strong><code>case ... esac</code></strong> 为多选择语句，<strong>与其他语言中的 <code>switch ... case</code> 语句类似</strong>，是一种多分支选择结构，每个 <code>case</code> 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 <code>case ... esac</code> 语句，<code>esac</code>（就是 <code>case</code> 反过来）作为结束标记。</p><p>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p><p><strong><code>case ... esac</code></strong> 语法格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">case</span> 值 <span class="token keyword">in</span>
模式1<span class="token punctuation">)</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
模式2<span class="token punctuation">)</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>case</code> 工作方式如上所示，取值后面必须为单词 <strong>in</strong>，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 <strong>;;</strong>。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>下面的脚本提示输入 1 到 4，与每一种模式进行匹配：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;输入 1 到 4 之间的数字:&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;你输入的数字为:&#39;</span>
<span class="token builtin class-name">read</span> aNum
<span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>
    <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 1&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 2&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 3&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 4&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你没有输入 1 到 4 之间的数字&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入不同的内容，会有不同的结果，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>输入 <span class="token number">1</span> 到 <span class="token number">4</span> 之间的数字:
你输入的数字为:
<span class="token number">3</span>
你选择了 <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h2><p>与其他编程语言类似，<code>Shell</code>支持<code>for</code>循环。</p><p><strong>写法一</strong></p><p><code>for</code>循环一般格式为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> item1 item2 <span class="token punctuation">..</span>. itemN
<span class="token keyword">do</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写成一行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> item1 item2 <span class="token punctuation">..</span>. itemN<span class="token punctuation">;</span> <span class="token keyword">do</span> command1<span class="token punctuation">;</span> command2… <span class="token keyword">done</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TIP</p><p>这里 <code>do</code> 和 <code>done</code> 就和 <code>{ }</code> 一样来确定范围</p><p>当变量值在列表里，<code>for</code> 循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的 <code>shell</code> 命令和语句。<code>in</code> 列表可以包含替换、字符串和文件名。</p><p><code>in</code>列表是可选的，如果不用它，for 循环使用命令行的位置参数。</p><p>例如，顺序输出当前列表中的数字：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">loop</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;The value is: <span class="token variable">$loop</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>The value is: <span class="token number">1</span>
The value is: <span class="token number">2</span>
The value is: <span class="token number">3</span>
The value is: <span class="token number">4</span>
The value is: <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺序输出字符串中的字符：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">str</span> <span class="token keyword">in</span> This is a string
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$str</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><p><strong>写法二</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> 初始值<span class="token punctuation">;</span>循环控制条件<span class="token punctuation">;</span>变量变化 <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
程序
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 1 加到 100 ,<code>for1.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$sum</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal" data-title="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ chmod <span class="token number">777</span> for1<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>for1<span class="token punctuation">.</span>sh
<span class="token number">5050</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句"><span>while 语句</span></a></h2><p><code>while</code> 循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> condition
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是一个基本的 <code>while</code> 循环，测试条件是：如果 <code>int</code> 小于等于 5，那么条件返回真。<code>int</code> 从 1 开始，每次循环处理时，<code>int</code> 加 1。运行上述脚本，返回数字 1 到 5，然后终止。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>
    <span class="token builtin class-name">let</span> <span class="token string">&quot;int++&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行脚本，输出：</p>`,105),k=s("code",null,"Bash let",-1),m={href:"https://www.runoob.com/linux/linux-comm-let.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<p><code>while</code>循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量<code>FILM</code>，按<code>&lt;Ctrl-D&gt;</code>结束循环。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;按下 &lt;CTRL-D&gt; 退出&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;输入你最喜欢的网站名: &#39;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">read</span> FILM
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;是的！<span class="token variable">$FILM</span> 是一个好网站&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无限循环" tabindex="-1"><a class="header-anchor" href="#无限循环"><span>无限循环</span></a></h3><p>无限循环语法格式：</p><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token boolean">true</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><h2 id="until-循环" tabindex="-1"><a class="header-anchor" href="#until-循环"><span>until 循环</span></a></h2><p><code>until</code> 循环执行一系列命令直至条件为 true 时停止。</p><p><code>until</code> 循环与 <code>while</code> 循环在处理方式上刚好相反。</p><p>一般 <code>while</code> 循环优于 <code>until</code> 循环，但在某些时候—也只是极少数情况下，<code>until</code> 循环更加有用。</p><p><code>until</code> 语法格式:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">until</span> condition
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>condition</code> 一般为条件表达式，如果返回值为 <code>false</code>，则继续执行循环体内的语句，否则跳出循环。</p><p>以下实例我们使用 <code>until</code> 命令来输出 <code>0 ~ 9</code> 的数字：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">10</span> <span class="token punctuation">]</span>
<span class="token keyword">do</span>
   <span class="token builtin class-name">echo</span> <span class="token variable">$a</span>
   <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + <span class="token number">1</span><span class="token variable">\`</span></span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><h2 id="跳出循环" tabindex="-1"><a class="header-anchor" href="#跳出循环"><span>跳出循环</span></a></h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell 使用两个命令来实现该功能：<strong>break</strong> 和 <strong>continue</strong>。</p><h3 id="break-命令" tabindex="-1"><a class="header-anchor" href="#break-命令"><span>break 命令</span></a></h3><p>break 命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于 5。要跳出这个循环，返回到 shell 提示符下，需要使用 break 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">while</span> <span class="token builtin class-name">:</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;输入 1 到 5 之间的数字:&quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>
        <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字为 <span class="token variable">$aNum</span>!&quot;</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span>
            <span class="token builtin class-name">break</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>输入 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的数字:3
你输入的数字为 <span class="token number">3</span><span class="token operator">!</span>
输入 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的数字:7
你输入的数字不是 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的<span class="token operator">!</span> 游戏结束
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="continue" tabindex="-1"><a class="header-anchor" href="#continue"><span>continue</span></a></h3><p><code>continue</code> 命令与 <code>break</code> 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><p>对上面的例子进行修改：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">while</span> <span class="token builtin class-name">:</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;输入 1 到 5 之间的数字: &quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>
        <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字为 <span class="token variable">$aNum</span>!&quot;</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字不是 1 到 5 之间的!&quot;</span>
            <span class="token builtin class-name">continue</span>
            <span class="token builtin class-name">echo</span> <span class="token string">&quot;游戏结束&quot;</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码发现，当输入大于 5 的数字时，该例中的循环不会结束，语句 <strong>echo &quot;游戏结束&quot;</strong> 永远不会被执行。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义"><span>函数定义</span></a></h2><p><code>linux shell</code> 可以用户定义函数，然后在 shell 脚本中可以随便调用。</p><p><code>shell</code>中函数的定义格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token keyword">function</span> <span class="token punctuation">]</span> funname <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token punctuation">{</span>

    action<span class="token punctuation">;</span>

    <span class="token punctuation">[</span>return int<span class="token punctuation">;</span><span class="token punctuation">]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>1、可以带<code>function fun()</code> 定义，也可以直接<code>fun()</code> 定义,不带任何参数。</li><li>2、参数返回，可以显示加：<code>return</code> 返回，如果不加，将以最后一条命令运行结果，作为返回值。 <code>return</code>后跟数值<code>n(0-255）</code></li></ul><p>下面的例子定义了一个函数并进行调用：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">demoFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;这是我的第一个 shell 函数!&quot;</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数开始执行-----&quot;</span>
demoFun
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数执行完毕-----&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-----函数开始执行-----
这是我的第一个 shell 函数<span class="token operator">!</span>
-----函数执行完毕-----
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面定义一个带有<code>return</code>语句的函数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">funWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第一个数字: &quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第二个数字: &quot;</span>
    <span class="token builtin class-name">read</span> anotherNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;两个数字分别为 <span class="token variable">$aNum</span> 和 <span class="token variable">$anotherNum</span> !&quot;</span>
    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$aNum<span class="token operator">+</span>$anotherNum<span class="token variable">))</span></span>
<span class="token punctuation">}</span>
funWithReturn
<span class="token builtin class-name">echo</span> <span class="token string">&quot;输入的两个数字之和为 <span class="token variable">$?</span> !&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出类似下面：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>这个函数会对输入的两个数字进行相加运算<span class="token punctuation">..</span>.
输入第一个数字:
<span class="token number">1</span>
输入第二个数字:
<span class="token number">2</span>
两个数字分别为 <span class="token number">1</span> 和 <span class="token number">2</span> <span class="token operator">!</span>
输入的两个数字之和为 <span class="token number">3</span> <span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数返回值在调用该函数后通过 <code>$?</code> 来获得。</p><p>TIP</p><p>注意：<strong>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分</strong>，直至<code>shell</code>解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p><h2 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数"><span>函数参数</span></a></h2><p>在<code>Shell</code>中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，$2 表示第二个参数...</p><p>带参数的函数示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">funWithParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数为 <span class="token variable">$1</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数为 <span class="token variable">$2</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">$10</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">\${10}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十一个参数为 <span class="token variable">\${11}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;参数总数有 <span class="token variable">$#</span> 个!&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;作为一个字符串输出所有参数 <span class="token variable">$*</span> !&quot;</span>
<span class="token punctuation">}</span>
funWithParam <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>第一个参数为 <span class="token number">1</span> <span class="token operator">!</span>
第二个参数为 <span class="token number">2</span> <span class="token operator">!</span>
第十个参数为 <span class="token number">10</span> <span class="token operator">!</span>
第十个参数为 <span class="token number">34</span> <span class="token operator">!</span>
第十一个参数为 <span class="token number">73</span> <span class="token operator">!</span>
参数总数有 <span class="token number">11</span> 个<span class="token operator">!</span>
作为一个字符串输出所有参数 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span> <span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>注意，<code>$10</code> 不能获取第十个参数，<strong>获取第十个参数需要<code>\${10}</code>。当<code>n&gt;=10</code>时，需要使用<code>\${n}</code>来获取参数</strong>。</p><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本或函数的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程 ID 号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的 ID 号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$-</td><td>显示 Shell 使用的当前选项，与 set 命令功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="获取函数的返回值" tabindex="-1"><a class="header-anchor" href="#获取函数的返回值"><span>获取函数的返回值</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">getsum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">#局部变量</span>
    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>$<span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token variable"><span class="token punctuation">((</span>sum<span class="token operator">+=</span>i<span class="token punctuation">))</span></span>
    <span class="token keyword">done</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$sum</span>
    <span class="token builtin class-name">return</span> <span class="token variable">$?</span> <span class="token comment"># 这里$?就是 echo $sum 执行的结果</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">read</span> m
<span class="token builtin class-name">read</span> n
<span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>getsum $m $n<span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;The sum is <span class="token variable">$total</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>函数没有<code>return</code>的时候返回值是<strong>最后一行代码的执行结果</strong>。</p><h2 id="正侧表达式" tabindex="-1"><a class="header-anchor" href="#正侧表达式"><span>正侧表达式</span></a></h2><h2 id="基本正侧表达式" tabindex="-1"><a class="header-anchor" href="#基本正侧表达式"><span>基本正侧表达式</span></a></h2><p>正则表达式和通配符的区别：</p><ul><li>正则表达式用来在文件中匹配符合条件的字符串，正则是包含匹配. <code>grep</code>、<code>awk</code>、<code>sed</code> 等命令可以支持正则表达式。</li><li>通配符<code>（ ？[]）</code>是用来匹配符合条件的文件名<code>*</code>，通配符是完全匹配。<code>ls</code>、<code>find</code>、<code>cp</code> 等命令不支持正则表达式，所有只能使用 <code>shell</code> 自己的通配符来进行匹配了。</li></ul><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td><code>*</code></td><td>前一个字符匹配 0 次或者任意多次</td></tr><tr><td><code>.</code></td><td>匹配除了换行符外任意一个字符</td></tr><tr><td><code>^</code></td><td>匹配行首，</td></tr><tr><td>例如：<code>^hello</code>会匹配以<code>hello</code>开头的行。</td><td></td></tr><tr><td><code>$</code></td><td>匹配行首，</td></tr><tr><td>例如：<code>hello$</code>会匹配以<code>hello</code>开头的行。</td><td></td></tr><tr><td><code>[ ]</code></td><td>匹配括号中指定的任意一个字符，只匹配一个字符</td></tr><tr><td><code>[ ^]</code></td><td>匹配除中括号的字符意外的任意一个字符。</td></tr><tr><td>例如：<code>[^0-9]</code>匹配任意一个非数字字符。</td><td></td></tr><tr><td><code>\\</code></td><td>转义符。用于将特殊符号的含义取消</td></tr><tr><td><code>{n}</code></td><td>表示其前面的字符签好出现 n 次。</td></tr><tr><td>例如：<code>[0-9]{4}</code>匹配 4 位数字，<code>[1][3-8][0-9]{9}</code> 匹配手机号码</td><td></td></tr><tr><td><code>{n,}</code></td><td>表示七千亩的字符出现不小于 n 次。</td></tr><tr><td>例如：<code>[0-9]{2,}</code>表示两位及以上的数字</td><td></td></tr><tr><td><code>{n,m}</code></td><td>表示其前面的字符至少出现 n 次，最多出现 m 次。</td></tr><tr><td>例如：<code>[a-z]{6,8}</code>匹配 6 到 8 为的小写子母。</td><td></td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token string">&quot;a*&quot;</span> test_rule.txt
<span class="token comment">#匹配所有内容，包括空白行</span>
<span class="token function">grep</span> <span class="token string">&quot;aaaa*&quot;</span> test_rule.txt
<span class="token comment">#匹配最少包含三个连续a的字符串</span>
<span class="token function">grep</span> <span class="token string">&quot;s..d&quot;</span> test_rule.txt
<span class="token comment">#匹配在s和d两个子母之间的有两个字符的单词</span>
<span class="token function">grep</span> <span class="token string">&quot;s.*d&quot;</span> test_rule.txt
<span class="token comment">#匹配在s和d之间有任意字符的单词所在的行</span>
<span class="token function">grep</span> <span class="token string">&quot;^M&quot;</span> test_rule.txt
<span class="token comment">#匹配以大写子母M开头的行</span>
<span class="token function">grep</span> <span class="token string">&quot;n$&quot;</span> test_rule.txt
<span class="token comment">#匹配以小写n结尾的行</span>
<span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;^$&quot;</span> test_rule.txt
<span class="token comment">#匹配空白行</span>
<span class="token function">grep</span> <span class="token string">&quot;^[a-z]&quot;</span> test_rule.txt
<span class="token comment">#匹配以小写子母开头的行</span>
<span class="token function">grep</span> <span class="token string">&quot;\\.$&quot;</span> test_rule.txt
<span class="token comment">#匹配以.结尾的行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用正侧表达式" tabindex="-1"><a class="header-anchor" href="#常用正侧表达式"><span>常用正侧表达式</span></a></h2><p>| 字符 | 描述 |<br> | --- | --- | --- | --- |<br> | <code>\\</code> | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。 |<br> | 例如：<code>“n”</code>匹配字符<code>“n”</code>。<code>“\\n”</code>匹配一个换行符。序列<code>“\\\\”</code>匹配<code>“\\”</code>而<code>“\\(”</code>则匹配<code>“(”</code>。 |<br> | <code>^</code> | 匹配输入字符串的开始位置。如果设置了 <code>RegExp</code> 对象的 <code>Multiline</code> 属性，<code>^</code>也匹配<code>“\\n”</code>或<code>“\\r”</code>之后的位置。 |<br> | <code>$</code> | 匹配输入字符串的结束位置。如果设置了 <code>RegExp</code> 对象的 <code>Multiline</code> 属性，$也匹配<code>“\\n”</code>或<code>“\\r”</code>之前的位置。 |<br> | <code>*</code> | 匹配前面的子表达式零次或多次。 |<br> | 例如：<code>zo*</code>能匹配<code>“z”</code>以及<code>“zoo”</code>。<code>*</code>等价于<code>{0,}</code>。 |<br> | <code>+</code> | 匹配前面的子表达式一次或多次。 |<br> | 例如：<code>“zo+”</code>能匹配<code>“zo”</code>以及<code>“zoo”</code>，但不能匹配<code>“z”</code>。<code>+</code>等价于<code>{1,}</code>。 |<br> | <code>?</code> | 匹配前面的子表达式零次或一次。 |<br> | 例如：<code>“do(es)?”</code>可以匹配<code>“do”</code>或<code>“does”</code>中的<code>“do”</code>。<code>?</code>等价于<code>{0,1}</code>。 |<br> | <code>{n}</code> | <code>n</code> 是一个非负整数。匹配确定的 <code>n</code> 次。 |<br> | 例如：<code>“o{2}”</code>不能匹配<code>“Bob”</code>中的<code>“o”</code>，但是能匹配<code>“food”</code>中的两个 o。 |<br> | <code>{n,}</code> | <code>n</code> 是一个非负整数。至少匹配 <code>n</code> 次。 |<br> | 例如：<code>“o{2,}”</code>不能匹配<code>“Bob”</code>中的<code>“o”</code>，但能匹配<code>“foooood”</code>中的所有 <code>o</code>。<code>“o{1,}”</code>等价于<code>“o+”</code>。<code>“o{0,}”</code>则等价于<code>“o*”</code>。 |<br> | <code>{n,m}</code> | <code>m</code> 和 <code>n</code> 均为非负整数，其中 <code>n&lt;=m</code>。最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次。 |<br> | 例如：<code>“o{1,3}”</code>将匹配<code>“fooooood”</code>中的前三个 <code>o</code>。<code>“o{0,1}”</code>等价于<code>“o?”</code>。请注意在逗号和两个数之间不能有空格。 |<br> | <code>?</code> | 当该字符紧跟在任何一个其他限制符<code>（*,+,?，{n}，{n,}，{n,m}）</code>后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。 |<br> | 例如：对于字符串<code>“oooo”</code>，<code>“o+?”</code>将匹配单个<code>“o”</code>，而<code>“o+”</code>将匹配所有“o”。 |<br> | <code>.</code> | 匹配除<code>“\\n”</code>之外的任何单个字符。要匹配包括<code>“\\n”</code>在内的任何字符，请使用像<code>“[.\\n]”</code>的模式。 |<br> | <code>(pattern)</code> | 匹配 <code>pattern</code> 并获取这一匹配。所获取的匹配可以从产生的 <code>Matches</code> 集合得到，在 <code>VBScript</code> 中使用 <code>SubMatches</code> 集合，在 <code>JScript</code> 中则使用<code>$0…$9</code> 属性。要匹配圆括号字符，请使用“”或“”或“”。 |<br> | <code>(?:pattern)</code> | 匹配 <code>pattern</code> 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符<code>“( | )”</code>来组合一个模式的各个部分是很有用。 |<br> | 例如<code>“industr(?:y | ies)”</code>就是一个比<code>“industry | industries”</code>更简略的表达式。 |<br> | <code>(?=pattern)</code> | 正向预查，在任何匹配 <code>pattern</code> 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 |<br> | 例如：<code>“Windows(?=95 | 98 | NT | 2000)”</code>能匹配<code>“Windows2000”</code>中的<code>“Windows”</code>，但不能匹配<code>“Windows3.1”</code>中的<code>“Windows”</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |<br> | <code>(?!pattern)</code> | 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 |<br> | 例如<code>“Windows(?!95 | 98 | NT | 2000)”</code>能匹配<code>“Windows3.1”</code>中的<code>“Windows”</code>，但不能匹配<code>“Windows2000”</code>中的<code>“Windows”</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始 |<br> | <code>x | y</code> | 匹配 x 或 y。 |<br> | 例如：<code>“z | food”</code>能匹配<code>“z”</code>或<code>“food”</code>。<code>“(z | f)ood”</code>则匹配<code>“zood”</code>或<code>“food”</code>。 |<br> | <code>[xyz]</code> | 字符集合。匹配所包含的任意一个字符。 |<br> | 例如：<code>“[abc]”</code>可以匹配<code>“plain”</code>中的<code>“a”</code>。 |<br> | <code>[^xyz]</code> | 负值字符集合。匹配未包含的任意字符。 |<br> | 例如：<code>“[^abc]”</code>可以匹配<code>“plain”</code>中的<code>“p”</code>。 |<br> | <code>[a-z]</code> | 字符范围。匹配指定范围内的任意字符。 |<br> | 例如：<code>“[a-z]”</code>可以匹配<code>“a”</code>到<code>“z”</code>范围内的任意小写字母字符。 |<br> | <code>[^a-z]</code> | 负值字符范围。匹配任何不在指定范围内的任意字符。 |<br> | 例如：<code>“[^a-z]”</code>可以匹配任何不在<code>“a”</code>到<code>“z”</code>范围内的任意字符。 |<br> | <code>\\b</code> | 匹配一个单词边界，也就是指单词和空格间的位置。 |<br> | 例如：<code>“er\\b”</code>可以匹配<code>“never”</code>中的<code>“er”</code>，但不能匹配<code>“verb”</code>中的<code>“er”</code>。 |<br> | <code>\\B</code> | 匹配非单词边界。<code>“er\\B</code>”能匹配<code>“verb”</code>中的<code>“er”</code>，但不能匹配<code>“never”</code>中的<code>“er”</code>。 |<br> | <code>\\cx</code> | 匹配由 <code>x</code> 指明的控制字符。 |<br> | 例如：<code>\\cM</code> 匹配一个 <code>Control-M</code> 或回车符。<code>x</code> 的值必须为 <code>A-Z</code> 或 <code>a-z</code> 之一。否则，将 <code>c</code> 视为一个原义的<code>“c”</code>字符。 |<br> | <code>\\d</code> | 匹配一个数字字符。等价于<code>[0-9]</code>。 |<br> | <code>\\D</code> | 匹配一个非数字字符。等价于<code>[^0-9]</code>。 |<br> | <code>\\f</code> | 匹配一个换页符。等价于<code>\\x0c</code> 和<code>\\cL</code>。 |<br> | <code>\\n</code> | 匹配一个换行符。等价于<code>\\x0a</code> 和<code>\\cJ</code>。 |<br> | <code>\\r</code> | 匹配一个回车符。等价于<code>\\x0d</code> 和<code>\\cM</code>。 |<br> | <code>\\s</code> | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[\\f\\n\\r\\t\\v]</code>。 |<br> | <code>\\S</code> | 匹配任何非空白字符。等价于<code>[^\\f\\n\\r\\t\\v]</code>。 |<br> | <code>\\t</code> | 匹配一个制表符。等价于<code>\\x09</code> 和<code>\\cI</code>。 |<br> | <code>\\v</code> | 匹配一个垂直制表符。等价于<code>\\x0b</code> 和<code>\\cK</code>。 |<br> | <code>\\w</code> | 匹配包括下划线的任何单词字符。等价于<code>“[A-Za-z0-9_]”</code>。 |<br> | <code>\\W</code> | 匹配任何非单词字符。等价于<code>“[^a-za-z0-9_]”</code>。 |<br> | <code>\\xn</code> | 匹配 <code>n</code>，其中 <code>n</code> 为十六进制转义值。十六进制转义值必须为确定的两个数字长。 |<br> | 例如：<code>“\\x41”</code>匹配<code>“A”</code>。<code>“\\x041”</code>则等价于<code>“\\x04&amp;1”</code>。正则表达式中可以使用 <code>ASCII</code> 编码。. |<br> | <code>\\num</code> | 匹配 <code>num</code>，其中 <code>num</code> 是一个正整数。对所获取的匹配的引用。 |<br> | 例如：<code>“(.)\\1”</code>匹配两个连续的相同字符。 |<br> | <code>\\n</code> | 标识一个八进制转义值或一个向后引用。如果<code>\\n</code> 之前至少 <code>n</code> 个获取的子表达式，则 <code>n</code> 为向后引用。否则，如果 <code>n</code> 为八进制数字<code>（0-7）</code>，则 <code>n</code> 为一个八进制转义值。 |<br> | <code>\\nm</code> | 标识一个八进制转义值或一个向后引用。如果<code>\\nm</code> 之前至少有 <code>nm</code> 个获得子表达式，则 <code>nm</code> 为向后引用。如果<code>\\nm</code> 之前至少有 <code>n</code> 个获取，则 <code>n</code> 为一个后跟文字 <code>m</code> 的向后引用。如果前面的条件都不满足，若 <code>n</code> 和 <code>m</code> 均为八进制数字<code>（0-7）</code>，则<code>\\nm</code> 将匹配八进制转义值 <code>nm</code>。 |<br> | <code>\\nml</code> | 如果 <code>n</code> 为八进制数字<code>（0-3）</code>，且 <code>m</code> 和 <code>l</code> 均为八进制数字<code>（0-7）</code>，则匹配八进制转义值 <code>nml</code>。 |<br> | <code>\\un</code> | 匹配 <code>n</code>，其中 <code>n</code> 是一个用四个十六进制数字表示的 <code>Unicode</code> 字符。 |<br> | 例如：<code>\\u00A9</code> 匹配版权符号<code>（?）</code>。 |</p><h2 id="文本处理工具" tabindex="-1"><a class="header-anchor" href="#文本处理工具"><span>文本处理工具</span></a></h2><h2 id="cut-命令" tabindex="-1"><a class="header-anchor" href="#cut-命令"><span>cut 命令</span></a></h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cut</span>  <span class="token punctuation">[</span>-bn<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token function">cut</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token function">cut</span> <span class="token punctuation">[</span>-df<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用说明:</strong></p><p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p><p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p><p><strong>参数:</strong></p><ul><li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li><li>-c ：以字符为单位进行分割。</li><li>-d ：自定义分隔符，默认为制表符。</li><li>-f ：与-d 一起使用，指定显示哪个区域。</li><li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的 范围之内，该字符将被写出；否则，该字符将被排除</li></ul><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>当你执行 who 命令时，会输出类似如下的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">who</span>
rocrocket :0           <span class="token number">2009</span>-01-08 <span class="token number">11</span>:07
rocrocket pts/0        <span class="token number">2009</span>-01-08 <span class="token number">11</span>:23 <span class="token punctuation">(</span>:0.0<span class="token punctuation">)</span>
rocrocket pts/1        <span class="token number">2009</span>-01-08 <span class="token number">14</span>:15 <span class="token punctuation">(</span>:0.0<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想提取每一行的第 3 个字节，就这样：</p><h2 id="awk-命令" tabindex="-1"><a class="header-anchor" href="#awk-命令"><span>awk 命令</span></a></h2><h3 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token punctuation">[</span>选项参数<span class="token punctuation">]</span> <span class="token string">&#39;script&#39;</span> <span class="token assign-left variable">var</span><span class="token operator">=</span>value file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
或
<span class="token function">awk</span> <span class="token punctuation">[</span>选项参数<span class="token punctuation">]</span> <span class="token parameter variable">-f</span> scriptfile <span class="token assign-left variable">var</span><span class="token operator">=</span>value file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>选项参数说明：</strong></p><ul><li><code>-F fs or --field-separator fs</code> 指定输入文件折分隔符，fs 是一个字符串或者是一个正则表达式，如-F:。</li><li><code>-v var=value or --asign var=value</code> 赋值一个用户定义变量。</li><li><code>-f scripfile or --file scriptfile</code> 从脚本文件中读取<code>awk</code>命令。</li><li><code>-mf nnn and -mr nnn</code> 对<code>nnn</code>值设置内在限制，<code>-mf</code>选项限制分配给<code>nnn</code>的最大块数目；<code>-mr</code>选项限制记录的最大数目。这两个功能是 Bell 实验室版<code>awk</code>的扩展功能，在标准<code>awk</code>中不适用。</li><li><code>-W compact or --compat, -W traditional or --traditional</code> 在兼容模式下运行<code>awk</code>。所以<code>gawk</code>的行为和标准的<code>awk</code>完全一样，所有的<code>awk</code>扩展都被忽略。</li><li><code>-W copyleft or --copyleft, -W copyright or --copyright</code> 打印简短的版权信息。</li><li><code>-W help or --help, -W usage or --usage</code> 打印全部<code>awk</code>选项和每个选项的简短说明。</li><li><code>-W lint or --lint</code> 打印不能向传统<code>unix</code>平台移植的结构的警告。</li><li><code>-W lint-old or --lint-old</code> 打印关于不能向传统<code>unix</code>平台移植的结构的警告。</li><li><code>-W posix</code> 打开兼容模式。但有以下限制，不识别：/x、函数关键字、<code>func</code>、换码序列以及当<code>fs</code>是一个空格时，将新行作为一个域分隔符；操作符<strong>和</strong>=不能代替<sup>和</sup>=；<code>fflush</code>无效。</li><li><code>-W re-interval or --re-inerval</code> 允许间隔正则表达式的使用，参考(<code>grep</code>中的<code>Posix</code>字符类)，如括号表达式<code>[[:alpha:]]</code>。</li><li><code>-W source program-text or --source program-text</code> 使用 p<code>rogram-text</code>作为源代码，可与-f 命令混用。</li><li><code>-W version or --version</code> 打印 bug 报告信息的版本。</li></ul><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p>log.txt 文本内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">2</span> this is a <span class="token builtin class-name">test</span>
<span class="token number">3</span> Do you like <span class="token function">awk</span>
This&#39;s a <span class="token builtin class-name">test</span>
<span class="token number">10</span> There are orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法一：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{[pattern] action}&#39;</span> <span class="token punctuation">{</span>filenames<span class="token punctuation">}</span>   <span class="token comment"># 行匹配语句 awk &#39;&#39; 只能用单引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 每行按空格或TAB分割，输出文本中的1、4项</span>
 $ <span class="token function">awk</span> <span class="token string">&#39;{print $1,$4}&#39;</span> log.txt
 ---------------------------------------------
 <span class="token number">2</span> a
 <span class="token number">3</span> like
 This<span class="token string">&#39;s
 10 orange,apple,mongo
 # 格式化输出
 $ awk &#39;</span><span class="token punctuation">{</span>printf <span class="token string">&quot;%-8s %-10s<span class="token entity" title="\\n">\\n</span>&quot;</span>,<span class="token variable">$1</span>,<span class="token variable">$4</span><span class="token punctuation">}</span><span class="token string">&#39; log.txt
 ---------------------------------------------
 2        a
 3        like
 This&#39;</span>s
 <span class="token number">10</span>       orange,apple,mongo

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法二：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-F</span>  <span class="token comment">#-F相当于内置变量FS, 指定分割字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 使用&quot;,&quot;分割</span>
 $  <span class="token function">awk</span> -F, <span class="token string">&#39;{print $1,$2}&#39;</span>   log.txt
 ---------------------------------------------
 <span class="token number">2</span> this is a <span class="token builtin class-name">test</span>
 <span class="token number">3</span> Do you like <span class="token function">awk</span>
 This<span class="token string">&#39;s a test
 10 There are orange apple
 # 或者使用内建变量
 $ awk &#39;</span>BEGIN<span class="token punctuation">{</span>FS<span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span><span class="token punctuation">}</span><span class="token string">&#39;     log.txt
 ---------------------------------------------
 2 this is a test
 3 Do you like awk
 This&#39;</span>s a <span class="token builtin class-name">test</span>
 <span class="token number">10</span> There are orange apple
 <span class="token comment"># 使用多个分隔符.先使用空格分割，然后对分割结果再使用&quot;,&quot;分割</span>
 $ <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;[ ,]&#39;</span>  <span class="token string">&#39;{print $1,$2,$5}&#39;</span>   log.txt
 ---------------------------------------------
 <span class="token number">2</span> this <span class="token builtin class-name">test</span>
 <span class="token number">3</span> Are <span class="token function">awk</span>
 This&#39;s a
 <span class="token number">10</span> There apple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法三：</p><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> $ <span class="token function">awk</span> <span class="token parameter variable">-va</span><span class="token operator">=</span><span class="token number">1</span> <span class="token string">&#39;{print $1,$1+a}&#39;</span> log.txt
 ---------------------------------------------
 <span class="token number">2</span> <span class="token number">3</span>
 <span class="token number">3</span> <span class="token number">4</span>
 This<span class="token string">&#39;s 1
 10 11
 $ awk -va=1 -vb=s &#39;</span><span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$1</span>+a,<span class="token variable">$1b</span><span class="token punctuation">}</span><span class="token string">&#39; log.txt
 ---------------------------------------------
 2 3 2s
 3 4 3s
 This&#39;</span>s <span class="token number">1</span> This&#39;ss
 <span class="token number">10</span> <span class="token number">11</span> 10s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法四：</p><p>实例：</p><h3 id="运算符-1" tabindex="-1"><a class="header-anchor" href="#运算符-1"><span>运算符</span></a></h3><p>| 运算符 | 描述 |<br> | --------------------------- | -------------------------------- | --- | ------ |<br> | = += -= *= /= %= ^= **= | 赋值 |<br> | ?: | C 条件表达式 |<br> | | | | 逻辑或 |<br> | &amp;&amp; | 逻辑与 |<br> | ~ 和 !~ | 匹配正则表达式和不匹配正则表达式 |<br> | &lt; &lt;= &gt; &gt;= != == | 关系运算符 |<br> | 空格 | 连接 |<br> | + - | 加，减 |<br> | * / % | 乘，除与求余 |<br> | + - ! | 一元加，减和逻辑非 |<br> | ^ *** | 求幂 |<br> | ++ -- | 增加或减少，作为前缀或后缀 |<br> | $ | 字段引用 |<br> | in | 数组成员 |</p><p>过滤第一列大于 2 的行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$1&gt;2&#39;</span> log.txt    <span class="token comment">#命令</span>
<span class="token comment">#输出</span>
<span class="token number">3</span> Do you like <span class="token function">awk</span>
This&#39;s a <span class="token builtin class-name">test</span>
<span class="token number">10</span> There are orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤第一列等于 2 的行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$1==2 {print $1,$3}&#39;</span> log.txt    <span class="token comment">#命令</span>
<span class="token comment">#输出</span>
<span class="token number">2</span> is
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤第一列大于 2 并且第二列等于&#39;Are&#39;的行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; {print $1,$2,$3}&#39;</span> log.txt    <span class="token comment">#命令</span>
<span class="token comment">#输出</span>
<span class="token number">3</span> Are you
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="内建变量" tabindex="-1"><a class="header-anchor" href="#内建变量"><span>内建变量</span></a></h3><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$n</code></td><td>当前记录的第 n 个字段，字段间由<code>FS</code>分隔</td></tr><tr><td><code>$0</code></td><td>完整的输入记录</td></tr><tr><td><code>ARGC</code></td><td>命令行参数的数目</td></tr><tr><td><code>ARGIND</code></td><td>命令行中当前文件的位置(从 0 开始算)</td></tr><tr><td><code>ARGV</code></td><td>包含命令行参数的数组</td></tr><tr><td><code>CONVFMT</code></td><td>数字转换格式(默认值为<code>%.6g</code>)<code>ENVIRON</code>环境变量关联数组</td></tr><tr><td><code>ERRNO</code></td><td>最后一个系统错误的描述</td></tr><tr><td><code>FIELDWIDTHS</code></td><td>字段宽度列表(用空格键分隔)</td></tr><tr><td><code>FILENAME</code></td><td>当前文件名</td></tr><tr><td><code>FNR</code></td><td>各文件分别计数的行号</td></tr><tr><td><code>FS</code></td><td>字段分隔符(默认是任何空格)</td></tr><tr><td><code>IGNORECASE</code></td><td>如果为真，则进行忽略大小写的匹配</td></tr><tr><td><code>NF</code></td><td>一条记录的字段的数目</td></tr><tr><td><code>NR</code></td><td>已经读出的记录数，就是行号，从 1 开始</td></tr><tr><td><code>OFMT</code></td><td>数字的输出格式(默认值是<code>%.6g)</code></td></tr><tr><td><code>OFS</code></td><td>输出字段分隔符，默认值与输入字段分隔符一致。</td></tr><tr><td><code>ORS</code></td><td>输出记录分隔符(默认值是一个换行符)</td></tr><tr><td><code>RLENGTH</code></td><td>由<code>match</code>函数所匹配的字符串的长度</td></tr><tr><td><code>RS</code></td><td>记录分隔符(默认是一个换行符)</td></tr><tr><td><code>RSTART</code></td><td>由<code>match</code>函数所匹配的字符串的第一个位置</td></tr><tr><td><code>SUBSEP</code></td><td>数组下标分隔符(默认值是<code>/034</code>)</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;BEGIN{printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\\n&quot;} {printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}&#39;</span>  log.txt
FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS
---------------------------------------------
log.txt    <span class="token number">2</span>    <span class="token number">1</span>         <span class="token number">5</span>    <span class="token number">1</span>
log.txt    <span class="token number">2</span>    <span class="token number">2</span>         <span class="token number">5</span>    <span class="token number">2</span>
log.txt    <span class="token number">2</span>    <span class="token number">3</span>         <span class="token number">3</span>    <span class="token number">3</span>
log.txt    <span class="token number">2</span>    <span class="token number">4</span>         <span class="token number">4</span>    <span class="token number">4</span>
$ <span class="token function">awk</span> -F<span class="token punctuation">\\</span>&#39; <span class="token string">&#39;BEGIN{printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\\n&quot;} {printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}&#39;</span>  log.txt
FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS
---------------------------------------------
log.txt    <span class="token number">2</span>    <span class="token number">1</span>    <span class="token string">&#39;    1    1
log.txt    2    2    &#39;</span>    <span class="token number">1</span>    <span class="token number">2</span>
log.txt    <span class="token number">2</span>    <span class="token number">3</span>    <span class="token string">&#39;    2    3
log.txt    2    4    &#39;</span>    <span class="token number">1</span>    <span class="token number">4</span>
<span class="token comment"># 输出顺序号 NR, 匹配文本行号</span>
$ <span class="token function">awk</span> <span class="token string">&#39;{print NR,FNR,$1,$2,$3}&#39;</span> log.txt
---------------------------------------------
<span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> this is
<span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> Are you
<span class="token number">3</span> <span class="token number">3</span> This<span class="token string">&#39;s a test
4 4 10 There are
# 指定输出分割符
$  awk &#39;</span><span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$5</span><span class="token punctuation">}</span><span class="token string">&#39; OFS=&quot; $ &quot;  log.txt
---------------------------------------------
2 $ this $ test
3 $ Are $ awk
This&#39;</span>s $ a $
<span class="token number">10</span> $ There $
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="使用正则-字符串匹配" tabindex="-1"><a class="header-anchor" href="#使用正则-字符串匹配"><span>使用正则，字符串匹配</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 输出第二列包含 &quot;th&quot;，并打印第二列与第四列</span>
$ <span class="token function">awk</span> <span class="token string">&#39;$2 ~ /th/ {print $2,$4}&#39;</span> log.txt
---------------------------------------------
this a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>~ 表示模式开始。// 中是模式。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 输出包含 &quot;re&quot; 的行</span>
$ <span class="token function">awk</span> <span class="token string">&#39;/re/ &#39;</span> log.txt
---------------------------------------------
<span class="token number">3</span> Do you like <span class="token function">awk</span>
<span class="token number">10</span> There are orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="忽略大小写" tabindex="-1"><a class="header-anchor" href="#忽略大小写"><span>忽略大小写</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;BEGIN{IGNORECASE=1} /this/&#39;</span> log.txt
---------------------------------------------
<span class="token number">2</span> this is a <span class="token builtin class-name">test</span>
This&#39;s a <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="模式取反" tabindex="-1"><a class="header-anchor" href="#模式取反"><span>模式取反</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$2 !~ /th/ {print $2,$4}&#39;</span> log.txt
---------------------------------------------
Are like
a
There orange,apple,mongo
$ <span class="token function">awk</span> <span class="token string">&#39;!/th/ {print $2,$4}&#39;</span> log.txt
---------------------------------------------
Are like
a
There orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="awk-脚本" tabindex="-1"><a class="header-anchor" href="#awk-脚本"><span>awk 脚本</span></a></h3><p>关于 awk 脚本，我们需要注意两个关键词 BEGIN 和 END。</p>`,130),g=s("ul",null,[s("li",{这里面放的是执行前的语句:""},"BEGIN"),s("li",{这里面放的是处理完所有的行后要执行的语句:""},"END"),s("li",{这里面放的是处理每一行时要执行的语句:""})],-1),f=a(`<p>假设有这么一个文件（学生成绩表）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> score.txt
Marry   <span class="token number">2143</span> <span class="token number">78</span> <span class="token number">84</span> <span class="token number">77</span>
Jack    <span class="token number">2321</span> <span class="token number">66</span> <span class="token number">78</span> <span class="token number">45</span>
Tom     <span class="token number">2122</span> <span class="token number">48</span> <span class="token number">77</span> <span class="token number">71</span>
Mike    <span class="token number">2537</span> <span class="token number">87</span> <span class="token number">97</span> <span class="token number">95</span>
Bob     <span class="token number">2415</span> <span class="token number">40</span> <span class="token number">57</span> <span class="token number">62</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的 awk 脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> cal.awk
<span class="token comment">#!/bin/awk -f</span>
<span class="token comment">#运行前</span>
BEGIN <span class="token punctuation">{</span>
    math <span class="token operator">=</span> <span class="token number">0</span>
    english <span class="token operator">=</span> <span class="token number">0</span>
    computer <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token builtin class-name">printf</span> <span class="token string">&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL<span class="token entity" title="\\n">\\n</span>&quot;</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;---------------------------------------------<span class="token entity" title="\\n">\\n</span>&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">#运行中</span>
<span class="token punctuation">{</span>
    <span class="token assign-left variable">math</span><span class="token operator">+=</span><span class="token variable">$3</span>
    <span class="token assign-left variable">english</span><span class="token operator">+=</span><span class="token variable">$4</span>
    <span class="token assign-left variable">computer</span><span class="token operator">+=</span><span class="token variable">$5</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;%-6s %-6s %4d %8d %8d %8d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token variable">$1</span>, <span class="token variable">$2</span>, <span class="token variable">$3</span>,<span class="token variable">$4</span>,<span class="token variable">$5</span>, <span class="token variable">$3</span>+<span class="token variable">$4</span>+<span class="token variable">$5</span>
<span class="token punctuation">}</span>
<span class="token comment">#运行后</span>
END <span class="token punctuation">{</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;---------------------------------------------<span class="token entity" title="\\n">\\n</span>&quot;</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;  TOTAL:%10d %8d %8d <span class="token entity" title="\\n">\\n</span>&quot;</span>, math, english, computer
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;AVERAGE:%10.2f %8.2f %8.2f<span class="token entity" title="\\n">\\n</span>&quot;</span>, math/NR, english/NR, computer/NR
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看一下执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token parameter variable">-f</span> cal.awk score.txt
NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL
---------------------------------------------
Marry  <span class="token number">2143</span>     <span class="token number">78</span>       <span class="token number">84</span>       <span class="token number">77</span>      <span class="token number">239</span>
Jack   <span class="token number">2321</span>     <span class="token number">66</span>       <span class="token number">78</span>       <span class="token number">45</span>      <span class="token number">189</span>
Tom    <span class="token number">2122</span>     <span class="token number">48</span>       <span class="token number">77</span>       <span class="token number">71</span>      <span class="token number">196</span>
Mike   <span class="token number">2537</span>     <span class="token number">87</span>       <span class="token number">97</span>       <span class="token number">95</span>      <span class="token number">279</span>
Bob    <span class="token number">2415</span>     <span class="token number">40</span>       <span class="token number">57</span>       <span class="token number">62</span>      <span class="token number">159</span>
---------------------------------------------
  TOTAL:       <span class="token number">319</span>      <span class="token number">393</span>      <span class="token number">350</span>
AVERAGE:     <span class="token number">63.80</span>    <span class="token number">78.60</span>    <span class="token number">70.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="另外一些实例" tabindex="-1"><a class="header-anchor" href="#另外一些实例"><span>另外一些实例</span></a></h3><p>AWK 的 hello world 程序为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>BEGIN <span class="token punctuation">{</span> print <span class="token string">&quot;Hello, world!&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>计算文件大小</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> *.txt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sum+=$5} END {print sum}&#39;</span>
--------------------------------------------------
<span class="token number">666581</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从文件中找出长度大于 80 的行：</p><p>打印九九乘法表</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;H;g&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">RS</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token string">&#39;{for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\\n&quot;:&quot;\\t&quot;)}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="发送消息案例" tabindex="-1"><a class="header-anchor" href="#发送消息案例"><span>发送消息案例</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/zsh</span>

<span class="token comment"># 查看用户是否登录</span>
<span class="token assign-left variable">login_user</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span>  <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ print $1}&#39;</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$login_user</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$1</span> 不在线&quot;</span>
 <span class="token builtin class-name">echo</span> “脚本退出”
 <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># 查看用户是否开启了消息功能</span>
<span class="token assign-left variable">is_allowwed</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span>  <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ print $1}&#39;</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$is_allowwed</span> <span class="token operator">!=</span> <span class="token string">&#39;+&#39;</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$1</span> 没有开启消息功能&quot;</span>
 <span class="token builtin class-name">echo</span> “脚本退出”
 <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># 确认是否消息发送</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$2</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;没有消息发送&quot;</span>
 <span class="token builtin class-name">echo</span> “脚本退出”
 <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># 从参数中获取要发送的消息</span>
<span class="token assign-left variable">whole_msg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $* <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot; &quot;</span> <span class="token parameter variable">-f</span> <span class="token number">2</span>-<span class="token variable">)</span></span>

<span class="token comment"># 获取用户登录的终端</span>
<span class="token assign-left variable">user_terminal</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">)</span></span>

<span class="token comment"># 写入发送的消息</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$whole_msg</span> <span class="token operator">|</span> <span class="token function">write</span> <span class="token variable">$login_user</span> <span class="token variable">$user_terminal</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;发送失败“
else
 echo &quot;</span>发送成功&quot;
<span class="token keyword">fi</span>
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function $(y,w){const e=i("ExternalLinkIcon");return o(),p("div",null,[d,s("p",null,[n("在 "),s("a",r,[n("helloworld.sh"),l(e)]),n(" 中输入如下内容")]),u,s("p",null,[n("判断 "),s("a",v,[n("helloworld.sh"),l(e)]),n(" 脚本是否正确执")]),b,s("p",null,[n("以上实例使用了 "),k,n(" 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅："),s("a",m,[n("Bash let 命令 open in new window"),l(e)]),n("。")]),h,g,f])}const S=t(c,[["render",$],["__file","shell.html.vue"]]),N=JSON.parse('{"path":"/posts/linux/shell.html","title":"Linux-Shell编程","lang":"zh-CN","frontmatter":{"icon":"linux","order":1,"date":"2021-06-27T00:00:00.000Z","author":"h7ml","title":"Linux-Shell编程","category":"linux","tag":"linux","description":"Shell Shell 概述 image-20221026104446000image-20221026104446000 Linux 提供的 Shell 解析器有 bash 和 sh 的关系 Centos 默认的解析器是 bash Shell 入门 脚本格式 第一个 Shell 脚本：helloworld.s 创建一个 Shell 脚本，输出 hel...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/linux/shell.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/linux/shell.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"Linux-Shell编程"}],["meta",{"property":"og:description","content":"Shell Shell 概述 image-20221026104446000image-20221026104446000 Linux 提供的 Shell 解析器有 bash 和 sh 的关系 Centos 默认的解析器是 bash Shell 入门 脚本格式 第一个 Shell 脚本：helloworld.s 创建一个 Shell 脚本，输出 hel..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.h7ml.cn/vitepress/assets/images/linux/image-20221026104446000.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2021-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-Shell编程\\",\\"image\\":[\\"https://static.h7ml.cn/vitepress/assets/images/linux/image-20221026104446000.png\\"],\\"datePublished\\":\\"2021-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"Shell","slug":"shell","link":"#shell","children":[]},{"level":2,"title":"Shell 概述","slug":"shell-概述","link":"#shell-概述","children":[]},{"level":2,"title":"Shell 入门","slug":"shell-入门","link":"#shell-入门","children":[{"level":3,"title":"第一个 Shell","slug":"第一个-shell","link":"#第一个-shell","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"系统预定义变量","slug":"系统预定义变量","link":"#系统预定义变量","children":[]},{"level":2,"title":"自定义变量","slug":"自定义变量","link":"#自定义变量","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[{"level":3,"title":"单引号","slug":"单引号","link":"#单引号","children":[]},{"level":3,"title":"双引号","slug":"双引号","link":"#双引号","children":[]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"定义数组","slug":"定义数组","link":"#定义数组","children":[]},{"level":3,"title":"读取数组","slug":"读取数组","link":"#读取数组","children":[]},{"level":3,"title":"获取数组的长度","slug":"获取数组的长度","link":"#获取数组的长度","children":[]}]},{"level":2,"title":"特殊变量","slug":"特殊变量","link":"#特殊变量","children":[{"level":3,"title":"$n","slug":"n","link":"#n","children":[]},{"level":3,"title":"$","slug":"","link":"#","children":[]},{"level":3,"title":"$*、$@","slug":"、","link":"#、","children":[]},{"level":3,"title":"$？","slug":"-1","link":"#-1","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":2,"title":"字符串运算符","slug":"字符串运算符","link":"#字符串运算符","children":[]},{"level":2,"title":"文件测试运算符","slug":"文件测试运算符","link":"#文件测试运算符","children":[]},{"level":2,"title":"流程控制（重点）","slug":"流程控制-重点","link":"#流程控制-重点","children":[]},{"level":2,"title":"if else","slug":"if-else","link":"#if-else","children":[{"level":3,"title":"fi","slug":"fi","link":"#fi","children":[]},{"level":3,"title":"if else","slug":"if-else-1","link":"#if-else-1","children":[]},{"level":3,"title":"if else-if else","slug":"if-else-if-else","link":"#if-else-if-else","children":[]}]},{"level":2,"title":"case ... esac","slug":"case-esac","link":"#case-esac","children":[]},{"level":2,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":2,"title":"while 语句","slug":"while-语句","link":"#while-语句","children":[{"level":3,"title":"无限循环","slug":"无限循环","link":"#无限循环","children":[]}]},{"level":2,"title":"until 循环","slug":"until-循环","link":"#until-循环","children":[]},{"level":2,"title":"跳出循环","slug":"跳出循环","link":"#跳出循环","children":[{"level":3,"title":"break 命令","slug":"break-命令","link":"#break-命令","children":[]},{"level":3,"title":"continue","slug":"continue","link":"#continue","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"函数定义","slug":"函数定义","link":"#函数定义","children":[]},{"level":2,"title":"函数参数","slug":"函数参数","link":"#函数参数","children":[]},{"level":2,"title":"获取函数的返回值","slug":"获取函数的返回值","link":"#获取函数的返回值","children":[]},{"level":2,"title":"正侧表达式","slug":"正侧表达式","link":"#正侧表达式","children":[]},{"level":2,"title":"基本正侧表达式","slug":"基本正侧表达式","link":"#基本正侧表达式","children":[]},{"level":2,"title":"常用正侧表达式","slug":"常用正侧表达式","link":"#常用正侧表达式","children":[]},{"level":2,"title":"文本处理工具","slug":"文本处理工具","link":"#文本处理工具","children":[]},{"level":2,"title":"cut 命令","slug":"cut-命令","link":"#cut-命令","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]},{"level":2,"title":"awk 命令","slug":"awk-命令","link":"#awk-命令","children":[{"level":3,"title":"语法","slug":"语法-1","link":"#语法-1","children":[]},{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"运算符","slug":"运算符-1","link":"#运算符-1","children":[]},{"level":3,"title":"内建变量","slug":"内建变量","link":"#内建变量","children":[]},{"level":3,"title":"使用正则，字符串匹配","slug":"使用正则-字符串匹配","link":"#使用正则-字符串匹配","children":[]},{"level":3,"title":"忽略大小写","slug":"忽略大小写","link":"#忽略大小写","children":[]},{"level":3,"title":"模式取反","slug":"模式取反","link":"#模式取反","children":[]},{"level":3,"title":"awk 脚本","slug":"awk-脚本","link":"#awk-脚本","children":[]},{"level":3,"title":"另外一些实例","slug":"另外一些实例","link":"#另外一些实例","children":[]}]},{"level":2,"title":"发送消息案例","slug":"发送消息案例","link":"#发送消息案例","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":37.24,"words":11173},"filePathRelative":"posts/linux/shell.md","localizedDate":"2021年6月27日","excerpt":"<h2>Shell</h2>\\n<h2>Shell 概述</h2>\\n<figure><img src=\\"https://static.h7ml.cn/vitepress/assets/images/linux/image-20221026104446000.png\\" alt=\\"image-20221026104446000\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20221026104446000</figcaption></figure>\\n<ul>\\n<li>Linux 提供的 Shell 解析器有</li>\\n</ul>\\n<div class=\\"language-crystal\\" data-ext=\\"crystal\\" data-title=\\"crystal\\"><pre class=\\"language-crystal\\"><code><span class=\\"token operator\\">/</span>bin<span class=\\"token operator\\">/</span>sh\\n<span class=\\"token operator\\">/</span>bin<span class=\\"token operator\\">/</span>bash\\n<span class=\\"token operator\\">/</span>usr<span class=\\"token operator\\">/</span>bin<span class=\\"token operator\\">/</span>sh\\n<span class=\\"token operator\\">/</span>usr<span class=\\"token operator\\">/</span>bin<span class=\\"token operator\\">/</span>bash\\n<span class=\\"token operator\\">/</span>bin<span class=\\"token operator\\">/</span>tcsh\\n<span class=\\"token operator\\">/</span>bin<span class=\\"token operator\\">/</span>csh\\n</code></pre></div>","autoDesc":true}');export{S as comp,N as data};
