import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,d as s,e as n,a as e,f as t}from"./app-Cbix2SPG.js";const l={},u=t('<h1 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h1><p>如果需要实现一个全局的 <code>loading</code> 遮罩层，正常展示是这样的：</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206173318902.png" alt="image-20220206173318902" tabindex="0" loading="lazy"><figcaption>image-20220206173318902</figcaption></figure><p>但如果用户连续调用 <code>loaing</code> 两次，第二个遮罩层就会覆盖掉第一个：</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206173534676.png" alt="image-20220206173534676" tabindex="0" loading="lazy"><figcaption>image-20220206173534676</figcaption></figure><p>看起来就像出了 <code>bug</code> 一样，因此我们需要采用单例模式，限制用户同一时刻只能调用一个全局 <code>loading</code> 。</p><h1 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h1>',7),r={href:"https://en.wikipedia.org/wiki/Singleton_pattern",target:"_blank",rel:"noopener noreferrer"},d={href:"https://en.wikipedia.org/wiki/Software_engineering",target:"_blank",rel:"noopener noreferrer"},k=s("strong",null,"singleton pattern",-1),v={href:"https://en.wikipedia.org/wiki/Software_design_pattern",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Instantiation_(computer_science)",target:"_blank",rel:"noopener noreferrer"},b={href:"https://en.wikipedia.org/wiki/Class_(computer_programming)",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>可以说是最简单的设计模式了，就是保证类的实例只有一个即可。</p><figure><img src="http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206181649135.png" alt="image-20220206181649135" tabindex="0" loading="lazy"><figcaption>image-20220206181649135</figcaption></figure><p>看一下 <code>java</code> 的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边在初始化类的时候就进行了创建对象，并且将构造函数设置为 <code>private</code> 不允许外界调用，提供 <code>getInstance</code> 方法获取对象。</p><p>还有一种 <code>Lazy initialization</code> 的模式，也就是延迟到调用 <code>getInstance</code> 的时候才去创建对象。但如果多个线程中同时调用 <code>getInstance</code> 可能会导致创建多个对象，所以还需要进行加锁。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但单例模式存在很多争议，比如可测试性不强、对抽象、继承、多态都支持得不友好等等，但我感觉主要是基于 <code>class</code> 这类语言引起的问题，这里就不讨论了。</p><p>回到 <code>js</code> ，模拟上边实现一下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Singleton</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Singleton<span class="token punctuation">.</span><span class="token function-variable function">getInstance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但上边就真的是邯郸学步一样的模仿了 <code>java</code> 的实现，事实上，<code>js</code> 创建对象并不一定需要通过 <code>new</code> 的方式，下边我们详细讨论下。</p><h1 id="js-的单例模式" tabindex="-1"><a class="header-anchor" href="#js-的单例模式"><span>js 的单例模式</span></a></h1><p>首先单例模式产生的对象一般都是工具对象等，比如 <code>jQuery</code> 。它不需要我们通过构造函数去传参数，所以就不需要去 <code>new</code> 一个构造函数去生成对象。</p><p>我们只需要通过字面量对象， <code>var a = {}</code> ，<code>a</code> 就可以看成一个单例对象了。</p><p>通常的单例对象可能会是下边的样子，暴露几个方法供外界使用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Singleton <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">method2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果<code>Singleton</code> 有私有属性，可以写成下边的样子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Singleton <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">privateVar</span><span class="token operator">:</span> <span class="token string">&#39;我是私有属性&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">method2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但此时外界就可以通过 <code>Singleton</code> 随意修改 <code>privateVar</code> 的值。</p><p>为了解决这个问题，我们可以借助闭包，通过 <code>IIFE (Immediately Invoked Function Expression)</code> 将一些属性和方法私有化。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> privateVar <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">method2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但随着 <code>ES6</code> 、<code>Webpack</code> 的出现，我们很少像上边那样去定义一个模块了，而是通过单文件，一个文件就是一个模块，同时也可以看成一个<strong>单例对象</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// singleton.js</span>
<span class="token keyword">const</span> somePrivateState <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用的时候 <code>import</code> 即可。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> Singleton <span class="token keyword">from</span> <span class="token string">&#39;./singleton.js&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使有另一个文件也 <code>import</code> 了同一个文件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main2.js</span>
<span class="token keyword">import</span> Singleton <span class="token keyword">from</span> <span class="token string">&#39;./singleton.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但这两个不同文件的 <code>Singleton</code> 仍旧是同一个对象，这是 <code>ES Moudule</code> 的特性。</p><p>那如果通过 <code>Webpack</code> 将 <code>ES6</code> 转成 <code>ES5</code> 以后呢，这种方式还会是单例对象吗？</p><p>答案当然是肯定的，可以看一下 <code>Webpack</code> 打包的产物，其实就是使用了 <code>IIFE</code> ，同时将第一次 <code>import</code> 的模块进行了缓存，第二次 <code>import</code> 的时候会使用之前的缓存。可以看下 <code>__webpack_require__</code> 的实现，和单例模式的逻辑是一样的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 单例模式的应用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>__webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h1><p>回头开头我们说的全局 <code>loading</code> 的问题，解决起来也很简单，同样的，如果已经有了 <code>loading</code> 的实例，我们只需要直接返回即可。</p><p>这里直接看一下 <code>ElementUI</code> 对于全局 <code>loading</code> 的处理。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// ~/packages/loading/src/index.js</span>

<span class="token keyword">let</span> fullscreenLoading<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Loading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token comment">// options 不传的话默认是 fullscreen</span>
  options <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>fullscreen <span class="token operator">&amp;&amp;</span> fullscreenLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fullscreenLoading<span class="token punctuation">;</span> <span class="token comment">// 存在直接 return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> parent <span class="token operator">=</span> options<span class="token punctuation">.</span>body <span class="token operator">?</span> document<span class="token punctuation">.</span>body <span class="token operator">:</span> options<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoadingConstructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> options
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>fullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fullscreenLoading <span class="token operator">=</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在使用 <code>Element</code> 的 <code>loading</code> 的时候，如果同时调用两次，其实只会有一个 <code>loading</code> 的遮罩层，第二个并不会显示。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$loading</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;我是第一个全屏loading&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$loading</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;我是第二个&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first <span class="token operator">===</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="更多场景" tabindex="-1"><a class="header-anchor" href="#更多场景"><span>更多场景</span></a></h1><p>如果使用了 <code>ES6</code> 的模块，其实就不用考虑单不单例的问题了，但如果我们使用的第三方库，它没有 <code>export</code> 一个实例对象，而是 <code>export</code> 一个 <code>function/class</code> 呢？</p>`,39),w={href:"https://www.h7ml.cn/designPattern/publishSubscribe.html",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"Event",-1),h=s("code",null,"eventemitter3",-1),f=s("code",null,"node",-1),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> has <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty
  <span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token string">&#39;~&#39;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Constructor to create a storage for our \`EE\` objects.
 * An \`Events\` instance is a plain object whose properties are event names.
 *
 * <span class="token keyword">@constructor</span>
 * <span class="token keyword">@private</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">Events</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//</span>
<span class="token comment">// We try to not inherit from \`Object.prototype\`. In some engines creating an</span>
<span class="token comment">// instance in this way is faster than calling \`Object.create(null)\` directly.</span>
<span class="token comment">// If \`Object.create(null)\` is not supported we prefix the event names with a</span>
<span class="token comment">// character to make sure that the built-in object properties are not</span>
<span class="token comment">// overridden or used as an attack vector.</span>
<span class="token comment">//</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>create<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Events</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//</span>
  <span class="token comment">// This hack is needed because the \`__proto__\` property is still inherited in</span>
  <span class="token comment">// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.</span>
  <span class="token comment">//</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">Events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> prefix <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Representation of a single event listener.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span> The listener function.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">context</span> The context to invoke the listener with.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">once</span><span class="token punctuation">=</span><span class="token code language-javascript"><span class="token boolean">false</span></span><span class="token punctuation">]</span></span> Specify if the listener is a one-time listener.
 * <span class="token keyword">@constructor</span>
 * <span class="token keyword">@private</span>
 */</span>
<span class="token keyword">function</span> <span class="token constant">EE</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> once</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>once <span class="token operator">=</span> once <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Add a listener for a given event.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>EventEmitter<span class="token punctuation">}</span></span> <span class="token parameter">emitter</span> Reference to the \`EventEmitter\` instance.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>String<span class="token operator">|</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token parameter">event</span> The event name.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span> The listener function.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">context</span> The context to invoke the listener with.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span> <span class="token parameter">once</span> Specify if the listener is a one-time listener.
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>EventEmitter<span class="token punctuation">}</span></span>
 * <span class="token keyword">@private</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token parameter">emitter<span class="token punctuation">,</span> event<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> once</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;The listener must be a function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EE</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> context <span class="token operator">||</span> emitter<span class="token punctuation">,</span> once<span class="token punctuation">)</span>
    <span class="token punctuation">,</span> evt <span class="token operator">=</span> prefix <span class="token operator">?</span> prefix <span class="token operator">+</span> event <span class="token operator">:</span> event<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span><span class="token punctuation">)</span> emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span> <span class="token operator">=</span> listener<span class="token punctuation">,</span> emitter<span class="token punctuation">.</span>_eventsCount<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span><span class="token punctuation">.</span>fn<span class="token punctuation">)</span> emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span><span class="token punctuation">,</span> listener<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Clear event by name.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>EventEmitter<span class="token punctuation">}</span></span> <span class="token parameter">emitter</span> Reference to the \`EventEmitter\` instance.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>String<span class="token operator">|</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token parameter">evt</span> The Event name.
 * <span class="token keyword">@private</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">clearEvent</span><span class="token punctuation">(</span><span class="token parameter">emitter<span class="token punctuation">,</span> evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>emitter<span class="token punctuation">.</span>_eventsCount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> emitter<span class="token punctuation">.</span>_events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">delete</span> emitter<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>evt<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Minimal \`EventEmitter\` interface that is molded against the Node.js
 * \`EventEmitter\` interface.
 *
 * <span class="token keyword">@constructor</span>
 * <span class="token keyword">@public</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_eventsCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>

<span class="token doc-comment comment">/**
 * Add a listener for a given event.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>String<span class="token operator">|</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token parameter">event</span> The event name.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span> The listener function.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">context</span><span class="token punctuation">=</span><span class="token code language-javascript"><span class="token keyword">this</span></span><span class="token punctuation">]</span></span> The context to invoke the listener with.
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>EventEmitter<span class="token punctuation">}</span></span> \`this\`.
 * <span class="token keyword">@public</span>
 */</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token operator">...</span>

<span class="token operator">...</span>
<span class="token comment">// Alias methods names because people roll like that.</span>
<span class="token comment">//</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>off <span class="token operator">=</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>removeListener<span class="token punctuation">;</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addListener <span class="token operator">=</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>on<span class="token punctuation">;</span>

<span class="token comment">//</span>
<span class="token comment">// Expose the prefix.</span>
<span class="token comment">//</span>
EventEmitter<span class="token punctuation">.</span>prefixed <span class="token operator">=</span> prefix<span class="token punctuation">;</span>

<span class="token comment">//</span>
<span class="token comment">// Allow \`EventEmitter\` to be imported as module namespace.</span>
<span class="token comment">//</span>
EventEmitter<span class="token punctuation">.</span>EventEmitter <span class="token operator">=</span> EventEmitter<span class="token punctuation">;</span>

<span class="token comment">//</span>
<span class="token comment">// Expose the module.</span>
<span class="token comment">//</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;undefined&#39;</span> <span class="token operator">!==</span> <span class="token keyword">typeof</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> EventEmitter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到它直接将 <code>EventEmitter</code> 这个函数导出了，如果每个页面都各自 <code>import</code> 它，然后通过 <code>new EventEmitter()</code> 来生成对象，那发布订阅就乱套了，因为它们不是同一个对象了。</p><p>此时，我们可以新建一个模块，然后 <code>export</code> 一个实例化对象，其他页面去使用这个对象就实现单例模式了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> EventEmitter <span class="token keyword">from</span> <span class="token string">&#39;eventemitter3&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 全局唯一的事件总线</span>
<span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> event<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总" tabindex="-1"><a class="header-anchor" href="#总"><span>总</span></a></h1><p>单例模式比较简单，主要是保证全局对象唯一，但相对于通过 <code>class</code> 生成对象的单例模式，<code>js</code> 就很特殊了。</p><p>因为在 <code>js</code> 中我们可以直接生成对象，并且这个对象就是全局唯一，所以在 <code>js</code> 中，单例模式是浑然天成的，我们平常并不会感知到。</p><p>尤其是现在开发使用 <code>ES6</code> 模块，每个模块也同样是一个单例对象，平常业务开发中也很少去应用单例模式，为了举出上边的例子真的是脑细胞耗尽了，哈哈。</p>`,8);function j(E,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("看下 "),s("a",r,[n("维基百科"),e(a)]),n(" 给的定义：")]),s("blockquote",null,[s("p",null,[n("In "),s("a",d,[n("software engineering"),e(a)]),n(", the "),k,n(" is a "),s("a",v,[n("software design pattern"),e(a)]),n(" that restricts the "),s("a",m,[n("instantiation"),e(a)]),n(" of a "),s("a",b,[n("class"),e(a)]),n(' to one "single" instance. This is useful when exactly one object is needed to coordinate actions across the system.')])]),g,s("p",null,[n("比如之前介绍的 "),s("a",w,[n("发布-订阅模式"),e(a)]),n(" 的 "),y,n(" 对象，这个肯定需要是全局单例的，如果我们使用 "),h,n(" 这个 "),f,n(" 包，看一下它的导出：")]),_])}const T=p(l,[["render",j],["__file","singleton.html.vue"]]),P=JSON.parse('{"path":"/posts/designPattern/singleton.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","category":["设计模式","frontend"],"tag":["设计模式","frontend"],"author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","date":"2022-02-06T17:31:00.000Z","description":"场景 如果需要实现一个全局的 loading 遮罩层，正常展示是这样的： image-20220206173318902image-20220206173318902 但如果用户连续调用 loaing 两次，第二个遮罩层就会覆盖掉第一个： image-20220206173534676image-20220206173534676 看起来就像出了 bu...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/designPattern/singleton.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/designPattern/singleton.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"场景 如果需要实现一个全局的 loading 遮罩层，正常展示是这样的： image-20220206173318902image-20220206173318902 但如果用户连续调用 loaing 两次，第二个遮罩层就会覆盖掉第一个： image-20220206173534676image-20220206173534676 看起来就像出了 bu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"单例模式"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:published_time","content":"2022-02-06T17:31:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206173318902.png\\",\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206173534676.png\\",\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206181649135.png\\"],\\"datePublished\\":\\"2022-02-06T17:31:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":6.93,"words":2080},"filePathRelative":"posts/designPattern/singleton.md","localizedDate":"2022年2月6日","excerpt":"\\n<p>如果需要实现一个全局的 <code>loading</code> 遮罩层，正常展示是这样的：</p>\\n<figure><img src=\\"http://static.h7ml.cn/vitepress/assets/images/designPattern/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220206173318902.png\\" alt=\\"image-20220206173318902\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220206173318902</figcaption></figure>","autoDesc":true}');export{T as comp,P as data};
