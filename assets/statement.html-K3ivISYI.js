import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-Cbix2SPG.js";const t={},p=e(`<h1 id="javascript-判断、循环语句" tabindex="-1"><a class="header-anchor" href="#javascript-判断、循环语句"><span>JavaScript 判断、循环语句</span></a></h1><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>if</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只有一条可以省略 {}，但容易导致错误，应该避免</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while"><span>do-while</span></a></h2><ul><li>语句最少执行一次</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span>while</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for" tabindex="-1"><a class="header-anchor" href="#for"><span>for</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in"><span>for in</span></a></h2><ul><li>遍历数组/对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Saab&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Volvo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BMW&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;&lt;br /&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of"><span>for of</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1,2</span>
<span class="token comment">// a,b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>break;停止循环</li><li>continue;停止这次循环</li></ul><h2 id="with" tabindex="-1"><a class="header-anchor" href="#with"><span>with</span></a></h2><ul><li>改变代码块的作用域，查找变量会先找 obj 里面的</li><li>大量使用 with 会导致性能下降，不建议使用（因为修改了作用域链）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 代码块</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>switch</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token string">&#39;0&#39;</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i为0时</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 退出</span>

  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// 默认执行</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键字与保留字" tabindex="-1"><a class="header-anchor" href="#关键字与保留字"><span>关键字与保留字</span></a></h2><p>ECMA-262 第 6 版规定的所有关键字如下：</p><p><code>break</code> <code>do</code> <code>in</code> <code>typeof</code> <code>case</code> <code>else</code> <code>instanceof</code> <code>var</code> <code>catch</code> <code>export</code> <code>new</code> <code>void</code> <code>class</code> <code>extends</code> <code>return</code> <code>while</code> <code>const</code> <code>finally</code> <code>super</code> <code>with</code> <code>continue</code> <code>for</code> <code>switch</code> <code>yield</code> <code>debugger</code> <code>function</code> <code>this</code> <code>default</code> <code>if</code> <code>throw</code> <code>delete</code> <code>import</code> <code>try</code></p><p>始终保留：<code>enum</code></p><p>严格模式下保留：</p><p><code>implements</code> <code>package</code> <code>public</code> <code>interface</code> <code>protected</code> <code>static</code> <code>let</code> <code>private</code></p><p>模块代码中保留：<code>await</code></p><p>这些词汇不能用作标识符，但现在还可以用作对象的属性名。一般来说最好不要用</p>`,31),o=[p];function c(i,l){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","statement.html.vue"]]),k=JSON.parse(`{"path":"/posts/javascript/basic/statement.html","title":"JavaScript 判断、循环语句","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2023-01-11T00:00:00.000Z","author":"h7ml","category":"javascript","tag":"javascript","star":true,"description":"JavaScript 判断、循环语句 if 如果只有一条可以省略 {}，但容易导致错误，应该避免 do-while 语句最少执行一次 while for for in 遍历数组/对象 for of break;停止循环 continue;停止这次循环 with 改变代码块的作用域，查找变量会先找 obj 里面的 大量使用 with 会导致性能下降，不建...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/basic/statement.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/basic/statement.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 判断、循环语句"}],["meta",{"property":"og:description","content":"JavaScript 判断、循环语句 if 如果只有一条可以省略 {}，但容易导致错误，应该避免 do-while 语句最少执行一次 while for for in 遍历数组/对象 for of break;停止循环 continue;停止这次循环 with 改变代码块的作用域，查找变量会先找 obj 里面的 大量使用 with 会导致性能下降，不建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2023-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 判断、循环语句\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"if","slug":"if","link":"#if","children":[]},{"level":2,"title":"do-while","slug":"do-while","link":"#do-while","children":[]},{"level":2,"title":"while","slug":"while","link":"#while","children":[]},{"level":2,"title":"for","slug":"for","link":"#for","children":[]},{"level":2,"title":"for in","slug":"for-in","link":"#for-in","children":[]},{"level":2,"title":"for of","slug":"for-of","link":"#for-of","children":[]},{"level":2,"title":"with","slug":"with","link":"#with","children":[]},{"level":2,"title":"switch","slug":"switch","link":"#switch","children":[]},{"level":2,"title":"关键字与保留字","slug":"关键字与保留字","link":"#关键字与保留字","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":1.2,"words":361},"filePathRelative":"posts/javascript/basic/statement.md","localizedDate":"2023年1月11日","excerpt":"\\n<h2>if</h2>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'yes'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'no'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{u as comp,k as data};
