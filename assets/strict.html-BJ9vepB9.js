import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const e={},p=t(`<h1 id="javascript-严格模式及运算问题" tabindex="-1"><a class="header-anchor" href="#javascript-严格模式及运算问题"><span>JavaScript 严格模式及运算问题</span></a></h1><h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 函数体 告诉支持 JavaScript 引擎切换到严格模式</span>
<span class="token comment">// 这样写即使低版本的浏览器不支持严格模式也不会报错，他只是个字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>全局变量声明必须加 var。 必须先声明再使用。</li><li>函数内重名属性</li><li>arguments 对象不被允许修改，只会是传进来的数值</li><li>fn.caller，arguments.callee 不可用</li><li>函数本身不能使用 this 关键字</li><li>eval() 里存在作用域</li><li>新增保留字：implements，interface，let，package，private，protected，public，static，yield。</li></ol><h2 id="运算的问题" tabindex="-1"><a class="header-anchor" href="#运算的问题"><span>运算的问题</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 8 进制  以 0 开头 代表 8 机制</span>
<span class="token keyword">var</span> n4 <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment">// 56</span>
<span class="token comment">// 16 进制  以 0x 开头  代表 16 进制</span>
<span class="token keyword">var</span> n5 <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span> <span class="token comment">// 31</span>

<span class="token comment">// NaN Not a Number 不是一个数字</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我&#39;</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;我 10&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;wo&#39;</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// infinity 无限</span>

<span class="token comment">// 浮点运算的问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.00000000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript-在-html-中的引入" tabindex="-1"><a class="header-anchor" href="#javascript-在-html-中的引入"><span>JavaScript 在 HTML 中的引入</span></a></h2><p>script 这个元素是由网景公司创造出来，最早在 Netscape Navigator 2 中实现。</p><ul><li><p>charset：src 属性指定的代码字符集。大多数浏览器无视它的值。</p></li><li><p>crossorigin：配置 CORS（跨域）设置，&quot;anonymous&quot;请求不设置凭据标志，&quot;use-credentials&quot;设置凭据标志，跨域请求会包含凭据。</p></li><li><p>defer：脚本延迟到文档被解析和显示之后再执行! defer 属性只适用于外部脚本文件</p></li><li><p>async：表示立即下载脚本，页面其他操作不影响! async 属性只适用于外部脚本文件</p></li><li><p>integrity：验证子资源完整性。</p></li><li><p>language：废弃。表示代码块中的脚本语言</p></li><li><p>src：要执行的代码的外部文件</p></li><li><p>type：代替 language，表示代码块中的 MIME 类型。默认&quot;text/javascript&quot;，实际上&quot;text/javascript&quot;和&quot;text/ecmascript&quot;已经废弃了。JavaScript 文件的 MIME 类型通常是&quot;application/x-javascript&quot;，不过给 type 属性这个值有可能导致脚本被忽略。<strong>如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。</strong></p></li><li><p>不能再任何地方出现<code>&lt;/script&gt;</code>，浏览器遇到<code>&lt;/script&gt;</code>时会认为这是结束的标签</p></li><li><p>解决方法 通过转义字符 \\ 解决这个问题</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;/script&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="异步脚本" tabindex="-1"><a class="header-anchor" href="#异步脚本"><span>异步脚本</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 标记 async 的脚本不保证加载的先后顺序，第二个脚本可能会在第一个先执行  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js1.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js2.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推迟脚本" tabindex="-1"><a class="header-anchor" href="#推迟脚本"><span>推迟脚本</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 两个js标签会在浏览器解析到结束的&lt;/html&gt;标签后才会执行 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态脚本" tabindex="-1"><a class="header-anchor" href="#动态脚本"><span>动态脚本</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 元素添加到DOM之前不会发送请求，默认异步加载（相当于添加了async属性）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统一动态脚本加载行为（不一定都支持 async 属性）：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>让浏览器预先加载 js 文件，js 动态加载 js 脚本浏览器并不知道，想要浏览器知道这个文件的存在可以在文档头部添加：</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gibberish.js<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 这会提高浏览器获取资源队列的优先级 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20),c=[p];function l(o,i){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","strict.html.vue"]]),k=JSON.parse(`{"path":"/posts/javascript/basic/strict.html","title":"JavaScript 严格模式及运算问题","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2023-01-11T00:00:00.000Z","author":"h7ml","category":"javascript","tag":"javascript","star":true,"description":"JavaScript 严格模式及运算问题 严格模式 全局变量声明必须加 var。 必须先声明再使用。 函数内重名属性 arguments 对象不被允许修改，只会是传进来的数值 fn.caller，arguments.callee 不可用 函数本身不能使用 this 关键字 eval() 里存在作用域 新增保留字：implements，interface...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/basic/strict.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/basic/strict.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 严格模式及运算问题"}],["meta",{"property":"og:description","content":"JavaScript 严格模式及运算问题 严格模式 全局变量声明必须加 var。 必须先声明再使用。 函数内重名属性 arguments 对象不被允许修改，只会是传进来的数值 fn.caller，arguments.callee 不可用 函数本身不能使用 this 关键字 eval() 里存在作用域 新增保留字：implements，interface..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2023-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 严格模式及运算问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]},{"level":2,"title":"运算的问题","slug":"运算的问题","link":"#运算的问题","children":[]},{"level":2,"title":"JavaScript 在 HTML 中的引入","slug":"javascript-在-html-中的引入","link":"#javascript-在-html-中的引入","children":[{"level":3,"title":"异步脚本","slug":"异步脚本","link":"#异步脚本","children":[]},{"level":3,"title":"推迟脚本","slug":"推迟脚本","link":"#推迟脚本","children":[]}]},{"level":2,"title":"动态脚本","slug":"动态脚本","link":"#动态脚本","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":2.8,"words":839},"filePathRelative":"posts/javascript/basic/strict.md","localizedDate":"2023年1月11日","excerpt":"\\n<h2>严格模式</h2>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token string\\">'use strict'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 函数体 告诉支持 JavaScript 引擎切换到严格模式</span>\\n<span class=\\"token comment\\">// 这样写即使低版本的浏览器不支持严格模式也不会报错，他只是个字符串</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
