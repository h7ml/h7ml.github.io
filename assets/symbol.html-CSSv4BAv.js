import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const p={},o=t(`<h1 id="javascript-中的-symbol-类型与其特性详解" tabindex="-1"><a class="header-anchor" href="#javascript-中的-symbol-类型与其特性详解"><span>JavaScript 中的 Symbol 类型与其特性详解</span></a></h1><p>ES6（ECMAScript 2015）引入了一种新的基本数据类型——Symbol。Symbol 类型的引入使得开发者能够创建一种独一无二的值，这在某些场景下非常有用。</p><h2 id="_1-symbol-的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-symbol-的基本概念"><span>1. Symbol 的基本概念</span></a></h2><p>Symbol 是一种原始数据类型，它的值是唯一且不可变的。通过 Symbol() 函数创建一个新的 Symbol，每次调用都会返回一个不同的值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> anotherSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySymbol <span class="token operator">===</span> anotherSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，mySymbol 和 anotherSymbol 的值是不同的，即使两个 Symbol 使用相同的描述（description），它们也是不相等的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbolWithDescription <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;mySymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolWithDescription<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(mySymbol)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-symbol-的主要特性" tabindex="-1"><a class="header-anchor" href="#_2-symbol-的主要特性"><span>2. Symbol 的主要特性</span></a></h2><h3 id="_2-1-唯一性" tabindex="-1"><a class="header-anchor" href="#_2-1-唯一性"><span>2.1 唯一性</span></a></h3><p>Symbol 类型的值是唯一的，即使两个 Symbol 使用相同的描述（description），它们也是不相等的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;mySymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> anotherSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;mySymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySymbol <span class="token operator">===</span> anotherSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-隐藏性" tabindex="-1"><a class="header-anchor" href="#_2-2-隐藏性"><span>2.2 隐藏性</span></a></h3><p>由于 Symbol 的唯一性，它可以用于创建对象的私有属性或方法。这有助于防止命名冲突和意外的属性覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;mySymbol&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mySymbol</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-全局-symbol-注册表" tabindex="-1"><a class="header-anchor" href="#_2-3-全局-symbol-注册表"><span>2.3 全局 Symbol 注册表</span></a></h3><p>为了确保 Symbol 的唯一性，ES6 引入了一个全局 Symbol 注册表。通过 Symbol.for(key) 方法，可以在全局范围内共享同一个 Symbol。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> globalSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;globalSymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在其他地方通过相同的键检索该 Symbol</span>
<span class="token keyword">const</span> retrievedSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;globalSymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalSymbol <span class="token operator">===</span> retrievedSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-属性检索" tabindex="-1"><a class="header-anchor" href="#_2-4-属性检索"><span>2.4 属性检索</span></a></h3><p>Symbol 类型的值不能通过 Object.keys()、Object.getOwnPropertyNames() 检索，但是可以通过 Object.getOwnPropertySymbols() 方法检索。如果需要检索对象的所有属性，可以使用 Reflect.ownKeys() 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;property1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;property2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">regularProperty</span><span class="token operator">:</span> <span class="token string">&#39;regularValue&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> symbolProperties <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolProperties<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Symbol(property1), Symbol(property2)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-内置-symbol-值" tabindex="-1"><a class="header-anchor" href="#_2-5-内置-symbol-值"><span>2.5 内置 Symbol 值</span></a></h3><p>ES6 提供了如下内置的 Symbol 值，表示特定的意义。</p><ul><li>Symbol.hasInstance：当使用构造函数的 new 命令创建实例时，在构造函数中调用 Symbol.hasInstance 方法。</li><li>Symbol.isConcatSpreadable：表示一个对象是否可以展开。</li><li>Symbol.iterator：指向对象的默认遍历器方法。</li><li>Symbol.match：当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</li><li>Symbol.replace：当执行 str.replace(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</li><li>Symbol.search：当执行 str.search(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</li><li>Symbol.species：创建派生对象时，会调用该属性。</li><li>Symbol.split：当执行 str.split(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</li><li>Symbol.toPrimitive：当对象被转为原始类型的值时，会调用该属性，返回该方法的返回值。</li><li>Symbol.toStringTag：对象的默认 toString 方法，会返回该对象的 Symbol.toStringTag 属性的值。</li><li>Symbol.unscopables：当使用 with 语句时，该对象指明哪些属性会被 with 语句绑定。</li><li>Symbol.asyncIterator：指向对象的默认异步遍历器方法。</li></ul><h2 id="_3-symbol-的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-symbol-的应用场景"><span>3. Symbol 的应用场景</span></a></h2><h3 id="_3-1-创建独一无二的常量" tabindex="-1"><a class="header-anchor" href="#_3-1-创建独一无二的常量"><span>3.1 创建独一无二的常量</span></a></h3><p>使用 Symbol 可以创建全局唯一的常量，避免命名冲突。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;RED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;BLUE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;GREEN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-定义类的私有属性" tabindex="-1"><a class="header-anchor" href="#_3-2-定义类的私有属性"><span>3.2 定义类的私有属性</span></a></h3><p>在对象中使用 Symbol 作为属性键，可以模拟私有属性和方法的概念。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;privateProperty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;This is private&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">publicProperty</span><span class="token operator">:</span> <span class="token string">&#39;This is public&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;privateMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Private method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Public method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-防止属性被重写" tabindex="-1"><a class="header-anchor" href="#_3-3-防止属性被重写"><span>3.3 防止属性被重写</span></a></h3><p>当多个库或模块共同工作时，使用 Symbol 可以防止属性冲突。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myLibrary <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;privateProperty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;This is private&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">publicProperty</span><span class="token operator">:</span> <span class="token string">&#39;This is public&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;privateMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Private method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Public method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;privateProperty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;This is private&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">publicProperty</span><span class="token operator">:</span> <span class="token string">&#39;This is public&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;privateMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Private method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Public method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbol 类型的引入使得 JavaScript 变得更加灵活和强大。它为开发者提供了一种创建唯一值的方式，可以用于实现私有属性、常量和防止属性冲突等场景。了解并合理使用 Symbol 类型，将有助于提高代码的可维护性和健壮性。</p>`,34),e=[o];function l(c,i){return s(),a("div",null,e)}const m=n(p,[["render",l],["__file","symbol.html.vue"]]),k=JSON.parse(`{"path":"/posts/javascript/symbol.html","title":"JavaScript 中的 Symbol 类型与其特性详解","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2024-09-11T00:00:00.000Z","author":"h7ml","title":"JavaScript 中的 Symbol 类型与其特性详解","description":"JavaScript 中的 Symbol 类型是 ECMAScript 2015 引入的一种新的基本数据类型，它具有唯一性和隐藏性等特性。本文将深入介绍 Symbol 类型及其在 JavaScript 中的应用，同时通过代码示例进行详细说明。","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a> 结论：Symbol 类型的引入使得 JavaScript 变得更加灵活和强大。了解并合理使用 Symbol 类型，将有助于提高代码的可维护性和健壮性。","star":1,"image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","shortTitle":"Symbol 类型与特性","category":["javascript","前端开发","Symbol"],"tag":["javascript","Symbol"],"head":[["meta",{"name":"keywords","content":"Symbol 类型，唯一性，隐藏性，全局 Symbol 注册表，属性检索，应用场景，私有属性，方法，避免属性冲突，常量。"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/symbol.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/symbol.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 中的 Symbol 类型与其特性详解"}],["meta",{"property":"og:description","content":"JavaScript 中的 Symbol 类型是 ECMAScript 2015 引入的一种新的基本数据类型，它具有唯一性和隐藏性等特性。本文将深入介绍 Symbol 类型及其在 JavaScript 中的应用，同时通过代码示例进行详细说明。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T05:17:54.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"JavaScript 中的 Symbol 类型与其特性详解"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"Symbol"}],["meta",{"property":"article:published_time","content":"2024-09-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T05:17:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 中的 Symbol 类型与其特性详解\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2024-09-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T05:17:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"1. Symbol 的基本概念","slug":"_1-symbol-的基本概念","link":"#_1-symbol-的基本概念","children":[]},{"level":2,"title":"2. Symbol 的主要特性","slug":"_2-symbol-的主要特性","link":"#_2-symbol-的主要特性","children":[{"level":3,"title":"2.1 唯一性","slug":"_2-1-唯一性","link":"#_2-1-唯一性","children":[]},{"level":3,"title":"2.2 隐藏性","slug":"_2-2-隐藏性","link":"#_2-2-隐藏性","children":[]},{"level":3,"title":"2.3 全局 Symbol 注册表","slug":"_2-3-全局-symbol-注册表","link":"#_2-3-全局-symbol-注册表","children":[]},{"level":3,"title":"2.4 属性检索","slug":"_2-4-属性检索","link":"#_2-4-属性检索","children":[]},{"level":3,"title":"2.5 内置 Symbol 值","slug":"_2-5-内置-symbol-值","link":"#_2-5-内置-symbol-值","children":[]}]},{"level":2,"title":"3. Symbol 的应用场景","slug":"_3-symbol-的应用场景","link":"#_3-symbol-的应用场景","children":[{"level":3,"title":"3.1 创建独一无二的常量","slug":"_3-1-创建独一无二的常量","link":"#_3-1-创建独一无二的常量","children":[]},{"level":3,"title":"3.2 定义类的私有属性","slug":"_3-2-定义类的私有属性","link":"#_3-2-定义类的私有属性","children":[]},{"level":3,"title":"3.3 防止属性被重写","slug":"_3-3-防止属性被重写","link":"#_3-3-防止属性被重写","children":[]}]}],"git":{"createdTime":1700367474000,"updatedTime":1700371074000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":3}]},"readingTime":{"minutes":4.04,"words":1212},"filePathRelative":"posts/javascript/symbol.md","localizedDate":"2024年9月11日","excerpt":"\\n<p>ES6（ECMAScript 2015）引入了一种新的基本数据类型——Symbol。Symbol 类型的引入使得开发者能够创建一种独一无二的值，这在某些场景下非常有用。</p>\\n<h2>1. Symbol 的基本概念</h2>\\n<p>Symbol 是一种原始数据类型，它的值是唯一且不可变的。通过 Symbol() 函数创建一个新的 Symbol，每次调用都会返回一个不同的值。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> mySymbol <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> anotherSymbol <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>mySymbol <span class=\\"token operator\\">===</span> anotherSymbol<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// false</span>\\n</code></pre></div>"}`);export{m as comp,k as data};
