import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as u,d as a,e as n,a as s,w as i,f as e}from"./app-Cbix2SPG.js";const r={},d=e(`<h2 id="在父组件中监听子组件的生命周期钩子" tabindex="-1"><a class="header-anchor" href="#在父组件中监听子组件的生命周期钩子"><span>在父组件中监听子组件的生命周期钩子</span></a></h2><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">@hook:</span>mounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onChildMounted<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onChildMounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h={href:"https://github.com/vuejs/vue/blob/dev/src/core/instance/lifecycle.js#L347",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="在-methods-中使用-debounce-throttle" tabindex="-1"><a class="header-anchor" href="#在-methods-中使用-debounce-throttle"><span>在 methods 中使用 debounce / throttle</span></a></h2><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">handleClick</span><span class="token operator">:</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v={href:"https://cn.vuejs.org/v2/guide/migration.html#%E5%B8%A6%E6%9C%89-debounce-%E7%9A%84-v-model%E7%A7%BB%E9%99%A4",target:"_blank",rel:"noopener noreferrer"},m=e('<h2 id="_1、组件化" tabindex="-1"><a class="header-anchor" href="#_1、组件化"><span>1、组件化</span></a></h2><h3 id="组件化基础" tabindex="-1"><a class="header-anchor" href="#组件化基础"><span>组件化基础</span></a></h3><ul><li><p>MVVM 模型</p><ul><li>模型-视图-视图模型。</li><li>模型（Model）指的是后端传递的数据。视图(View)指的是所看到的页面。视图模型(ViewModel)是 mvvm 模式的核心，它是连接 view 和 model 的桥梁。它有两个方向：一是将模型（Model）转化成视图(View)，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将视图(View)转化成模型(Model)，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个方向都实现的，我们称之为数据的双向绑定。</li></ul></li><li><p>MVC</p><ul><li>模型-视图-控制器。</li><li>M 和 V 指的意思和 MVVM 中的 M 和 V 意思一样。 C 即 Controller 指的是页面业务逻辑。使用 MVC 的目的就是将 M 和 V 的代码分离。 MVC 是单向通信。也就是 View 跟 Model，必须通过 Controller 来承上启下。 MVC 和 MVVM 的区别并不是 VM 完全取代了 C，只是在 MVC 的基础上增加了一层 VM，只不过是弱化了 C 的概念，ViewModel 存在目的在于抽离 Controller 中展示的业务逻辑，而不是替代 Controller，其它视图操作业务等还是应该放在 Controller 中实现。也就是说 MVVM 实现的是业务逻辑组件的重用，使开发更高效，结构更清晰，增加代码的复用性。</li></ul></li></ul><h3 id="数据驱动视图" tabindex="-1"><a class="header-anchor" href="#数据驱动视图"><span>数据驱动视图</span></a></h3><ul><li>传统组件，只是静态渲染，更新还要依赖操作 DOM</li><li>数据驱动视图 - Vue MVVM</li><li>数据驱动视图 - React setState</li></ul><h2 id="_2、响应式" tabindex="-1"><a class="header-anchor" href="#_2、响应式"><span>2、响应式</span></a></h2>',6),g=a("li",null,"vue 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；",-1),f=a("li",null,"监听对象（深度），监听数组",-1),b=a("li",null,"深度监听，需要递归到底，一次性计算量大",-1),x=a("li",null,"无法监听新增属性/删除属性（Vue.set Vue.delete）",-1),_=e('<p>Object.defineproperty.html</p><h2 id="_3、vdom-和-diff" tabindex="-1"><a class="header-anchor" href="#_3、vdom-和-diff"><span>3、vdom 和 diff</span></a></h2><ul><li>应用背景 <ul><li>vdom 是实现 vue 和 react 的重要基石</li><li>diff 算法是 vdom 中最核心、最关键的部分</li><li>vdom 是一个热门话题，也是面试中的热门问题</li><li>DOM 操作非常耗费性能</li><li>以前用 jQuery，可以自行控制 DOM 操作的时机，手动调整</li><li>Vue 和 React 是数据驱动视图，如何有效控制 DOM 操作</li></ul></li><li>解决方案 - vdom <ul><li>有了一定复杂度，想减少计算次数比较难</li><li>能不能吧计算，更多的转移为 JS 计算？因为 JS 执行速度很快</li><li>vdom - 用 JS 模拟 DOM 结构，计算出最小的变更，操作 DOM</li></ul></li><li>vnode 结构</li><li>snabbdom 使用：vnode h patch</li></ul><h3 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法"><span>diff 算法</span></a></h3><ul><li>diff 算法是 vdom 中最核心、最关键的部分</li><li>diff 算法能在日常使用 vue React 中体现出来（如 key）</li><li>diff 算法是前端热门话题</li></ul><h4 id="diff-算法概述" tabindex="-1"><a class="header-anchor" href="#diff-算法概述"><span>diff 算法概述</span></a></h4>',6),y=a("li",null,"diff 即对比，是一个广泛的概念，如 linux diff 命令、git diff 等",-1),M={href:"https://gethub.com/cujojs/jiff",target:"_blank",rel:"noopener noreferrer"},V=e('<h2 id="_4、模版编译" tabindex="-1"><a class="header-anchor" href="#_4、模版编译"><span>4、模版编译</span></a></h2><ul><li>with 语法</li><li>模版编译为 render 函数</li><li>执行 render 函数生成 vdom</li></ul><h2 id="_5、渲染过程" tabindex="-1"><a class="header-anchor" href="#_5、渲染过程"><span>5、渲染过程</span></a></h2><ul><li>初次渲染过程</li><li>更新过程</li><li>异步渲染</li></ul><h2 id="_6、前端路由" tabindex="-1"><a class="header-anchor" href="#_6、前端路由"><span>6、前端路由</span></a></h2><ul><li>hash</li><li>h5 history</li><li>两者对比</li></ul><h2 id="_7、vue-面试真题演练" tabindex="-1"><a class="header-anchor" href="#_7、vue-面试真题演练"><span>7、vue 面试真题演练</span></a></h2><h3 id="_1、v-show-和-v-if-的区别" tabindex="-1"><a class="header-anchor" href="#_1、v-show-和-v-if-的区别"><span>1、v-show 和 v-if 的区别</span></a></h3><ul><li>v-show 通过 css display 控制显示和隐藏</li><li>v-if 组件真正的渲染和销毁， 而不是显示和隐藏</li><li>频繁切换显示状态用 v-show， 否则用 v-if</li></ul><h3 id="为何在-v-for-中使用-key" tabindex="-1"><a class="header-anchor" href="#为何在-v-for-中使用-key"><span>为何在 v-for 中使用 key</span></a></h3><ul><li>必须用 key， 且不能是 index 和 random</li><li>diff 算法中通过 tag 和 key 来判断， 是否是 sameNode</li><li>减少渲染次数，提升渲染性能</li></ul><h3 id="描述-vue-组件生命周期-父子组件" tabindex="-1"><a class="header-anchor" href="#描述-vue-组件生命周期-父子组件"><span>描述 Vue 组件生命周期（父子组件）</span></a></h3><ul><li>单组件生命周期</li><li>父子组件生命周期关系</li></ul><h3 id="vue-组件如何通讯-常见" tabindex="-1"><a class="header-anchor" href="#vue-组件如何通讯-常见"><span>Vue 组件如何通讯（常见）</span></a></h3><ul><li>父子组件 props 和 this.$emit</li><li>自定义事件 event.$no event.$off event.emit</li><li>vuex</li></ul><h3 id="描述组件渲染和更新的过程" tabindex="-1"><a class="header-anchor" href="#描述组件渲染和更新的过程"><span>描述组件渲染和更新的过程</span></a></h3><ul><li>响应式（监听属性变化）</li><li>模版渲染</li><li>vdom</li></ul><h3 id="双向数据绑定-v-model-的实现原理" tabindex="-1"><a class="header-anchor" href="#双向数据绑定-v-model-的实现原理"><span>双向数据绑定 v-model 的实现原理</span></a></h3>',18),q={href:"http://this.name",target:"_blank",rel:"noopener noreferrer"},w={href:"http://this.name",target:"_blank",rel:"noopener noreferrer"},j=a("li",null,"data 更新触发 re-render",-1),C=e(`<h3 id="对于-mvvm-的理解" tabindex="-1"><a class="header-anchor" href="#对于-mvvm-的理解"><span>对于 MVVM 的理解</span></a></h3><ul><li>Model、viewModel、view</li></ul><h3 id="computed-有何特点" tabindex="-1"><a class="header-anchor" href="#computed-有何特点"><span>computed 有何特点</span></a></h3><ul><li>缓存，不变不会重新计算</li><li>提高性能</li></ul><h3 id="为何组件-data-必须是一个函数" tabindex="-1"><a class="header-anchor" href="#为何组件-data-必须是一个函数"><span>为何组件 data 必须是一个函数？</span></a></h3><ul><li>data 必须是一个函数（为了不同的实例不冲突）</li><li>vue 是一个 class</li></ul><h3 id="ajax-请求应该放在哪个生命周期" tabindex="-1"><a class="header-anchor" href="#ajax-请求应该放在哪个生命周期"><span>ajax 请求应该放在哪个生命周期</span></a></h3><ul><li>mounted</li><li>js 是单线程的， ajax 异步获取数据</li><li>放在 mounted 之前没有什么用，只会让逻辑变得更混乱</li></ul><h3 id="如何将组件所有-props-传递给子组件" tabindex="-1"><a class="header-anchor" href="#如何将组件所有-props-传递给子组件"><span>如何将组件所有 props 传递给子组件？</span></a></h3><ul><li>$props</li><li><code>&lt;User v-bind=&quot;$props&quot;&gt;</code></li><li>细节知识点，优先级不高</li></ul><h3 id="如何自己实现-v-model" tabindex="-1"><a class="header-anchor" href="#如何自己实现-v-model"><span>如何自己实现 v-model</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;change&#39;, $event.target.value)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多个组件有相同的逻辑-如何抽离" tabindex="-1"><a class="header-anchor" href="#多个组件有相同的逻辑-如何抽离"><span>多个组件有相同的逻辑，如何抽离？</span></a></h3><ul><li>mixin</li><li>以及 mixin 的一些缺点</li></ul><h3 id="为何要使用异步组件" tabindex="-1"><a class="header-anchor" href="#为何要使用异步组件"><span>为何要使用异步组件？</span></a></h3><ul><li>加载大组件</li><li>路由异步加载</li></ul><h3 id="何时使用-keep-alive" tabindex="-1"><a class="header-anchor" href="#何时使用-keep-alive"><span>何时使用 keep-alive？</span></a></h3><ul><li>缓存组件，不需要重复渲染</li><li>如多个静态 tab 页的切换</li><li>优化性能</li></ul><h3 id="何时需要使用-beforedestory" tabindex="-1"><a class="header-anchor" href="#何时需要使用-beforedestory"><span>何时需要使用 beforeDestory</span></a></h3><ul><li>解绑自定义事件 event.$off</li><li>清除定时器</li><li>解绑自定义的 DOM 事件，如 window scroll 等</li></ul><h3 id="什么是作用域插槽" tabindex="-1"><a class="header-anchor" href="#什么是作用域插槽"><span>什么是作用域插槽</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:website</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>website<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vuex-中-action-和-mutation-有何区别" tabindex="-1"><a class="header-anchor" href="#vuex-中-action-和-mutation-有何区别"><span>vuex 中 action 和 mutation 有何区别</span></a></h3><ul><li>action 中处理异步，mutation 不可以</li><li>mutaion 做原子操作</li><li>action 可以整合多个 mutation</li></ul><h3 id="vue-router-常用的路由模式" tabindex="-1"><a class="header-anchor" href="#vue-router-常用的路由模式"><span>vue-router 常用的路由模式</span></a></h3><ul><li>hash 默认</li><li>H5 history（需要服务支持）</li><li>两者比较</li></ul><h3 id="如何配置-vue-router-异步加载" tabindex="-1"><a class="header-anchor" href="#如何配置-vue-router-异步加载"><span>如何配置 vue-router 异步加载</span></a></h3><ul><li>path 和 component</li><li>component: ()=&gt; import(&#39;..///&#39;)</li></ul><h3 id="请用-vnode-描述一个-dom-结构" tabindex="-1"><a class="header-anchor" href="#请用-vnode-描述一个-dom-结构"><span>请用 vnode 描述一个 DOM 结构</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>vdom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;props&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;font-size: 20px&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-data-变化的核心-api-是什么" tabindex="-1"><a class="header-anchor" href="#监听-data-变化的核心-api-是什么"><span>监听 data 变化的核心 API 是什么</span></a></h3><ul><li>Object.defineProperty</li><li>以及深度监听、监听数组</li><li>有何缺点</li></ul><h3 id="vue-如何监听数组变化" tabindex="-1"><a class="header-anchor" href="#vue-如何监听数组变化"><span>Vue 如何监听数组变化</span></a></h3><ul><li>Object.defineProperty 不能监听数组变化</li><li>重新定义原型，重写 push pop 等方法，实现监听</li><li>proxy 可以原生支持监听数组变化</li></ul><h3 id="请描述响应式原理" tabindex="-1"><a class="header-anchor" href="#请描述响应式原理"><span>请描述响应式原理</span></a></h3><ul><li>监听 data 变化</li><li>组件渲染和更新的流程</li></ul><h3 id="diff-算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#diff-算法的时间复杂度"><span>diff 算法的时间复杂度</span></a></h3><ul><li>O(n)</li><li>在 O(n^3)基础上做了一些调整</li></ul><h3 id="简述-diff-算法过程" tabindex="-1"><a class="header-anchor" href="#简述-diff-算法过程"><span>简述 diff 算法过程</span></a></h3><ul><li>patch(elem, vnode)和 path(vnode, newVode)</li><li>pathVnode 和 addVnodes 和 removeVnodes</li><li>updataChildren（key 的重要性）</li></ul><h3 id="vue-为何是异步渲染-nexttick-何用" tabindex="-1"><a class="header-anchor" href="#vue-为何是异步渲染-nexttick-何用"><span>vue 为何是异步渲染， $nextTick 何用</span></a></h3><ul><li>异步渲染（以合并 data 修改），以提高渲染性能</li><li>$nextTick 在 DOM 更新完后，触发回调</li></ul><h3 id="vue-常见性能优化方式" tabindex="-1"><a class="header-anchor" href="#vue-常见性能优化方式"><span>Vue 常见性能优化方式</span></a></h3><ul><li>合理使用 v-show 和 v-if</li><li>合理使用 computed</li><li>v-for 时加 key， 以及避免和 v-if 同时使用</li><li>（v-for 优先级高， 每次 v-for 会重新计算一遍 v-if）</li><li>自定义事件、DOM 事件及时销毁</li><li>合理使用异步组件</li><li>合理使用 keep-alive</li><li>data 层级不要太深</li><li>使用 vue-loader 在开发环境做模版编译（预编译）</li><li>webpack 层面的优化</li><li>前端通用的性能优化，如图片懒加载</li><li>使用 SSR</li></ul><h2 id="hash-和-history-路由实现原理" tabindex="-1"><a class="header-anchor" href="#hash-和-history-路由实现原理"><span>hash 和 history 路由实现原理</span></a></h2><p>location.hash 的值实际就是 URL 中#后面的东西。</p><p>history 实际采用了 HTML5 中提供的 API 来实现，主要有 history.pushState()和 history.replaceState()。</p>`,48);function O(D,T){const t=p("ExternalLinkIcon"),l=p("RouteLink");return c(),u("div",null,[d,a("p",null,[a("a",h,[n("相关源码"),s(t)])]),k,a("p",null,[a("a",v,[n("官网例子"),s(t)])]),m,a("ul",null,[a("li",null,[n("核心 api Object.defineproperty "),a("ul",null,[g,a("li",null,[s(l,{to:"/posts/vue/Object.defineproperty.html"},{default:i(()=>[n("Object.defineproperty 核心代码 自定义实现")]),_:1})])])]),f,a("li",null,[n("Object.defineproperty 的缺点（vue3 用 Proxy） "),a("ul",null,[b,x,a("li",null,[s(l,{to:"/posts/vue/Proxy.html"},{default:i(()=>[n("Proxy 核心代码 自定义实现")]),_:1})]),a("li",null,[s(l,{to:"/posts/vue/proxy-observe.html"},{default:i(()=>[n("proxy-observe 核心代码 自定义实现")]),_:1})])])])]),_,a("ul",null,[y,a("li",null,[n("两个 js 对象也可以做 diff，如"),a("a",M,[n("https://gethub.com/cujojs/jiff"),s(t)])])]),V,a("ul",null,[a("li",null,[n("input 元素的 value = "),a("a",q,[n("this.name"),s(t)])]),a("li",null,[n("绑定 input 事件 "),a("a",w,[n("this.name"),s(t)]),n(" = $event.target.value")]),j]),C])}const S=o(r,[["render",O],["__file","theory.html.vue"]]),A=JSON.parse('{"path":"/posts/vue/theory.html","title":"vue核心概念","lang":"zh-CN","frontmatter":{"icon":"vue","order":1,"date":"2021-06-27T00:00:00.000Z","author":"h7ml","title":"vue核心概念","category":"vue","tag":"vue","star":true,"description":"在父组件中监听子组件的生命周期钩子 相关源码 在 methods 中使用 debounce / throttle 官网例子 1、组件化 组件化基础 MVVM 模型 模型-视图-视图模型。 模型（Model）指的是后端传递的数据。视图(View)指的是所看到的页面。视图模型(ViewModel)是 mvvm 模式的核心，它是连接 view 和 model...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/vue/theory.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/vue/theory.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"vue核心概念"}],["meta",{"property":"og:description","content":"在父组件中监听子组件的生命周期钩子 相关源码 在 methods 中使用 debounce / throttle 官网例子 1、组件化 组件化基础 MVVM 模型 模型-视图-视图模型。 模型（Model）指的是后端传递的数据。视图(View)指的是所看到的页面。视图模型(ViewModel)是 mvvm 模式的核心，它是连接 view 和 model..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:published_time","content":"2021-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue核心概念\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"在父组件中监听子组件的生命周期钩子","slug":"在父组件中监听子组件的生命周期钩子","link":"#在父组件中监听子组件的生命周期钩子","children":[]},{"level":2,"title":"在 methods 中使用 debounce / throttle","slug":"在-methods-中使用-debounce-throttle","link":"#在-methods-中使用-debounce-throttle","children":[]},{"level":2,"title":"1、组件化","slug":"_1、组件化","link":"#_1、组件化","children":[{"level":3,"title":"组件化基础","slug":"组件化基础","link":"#组件化基础","children":[]},{"level":3,"title":"数据驱动视图","slug":"数据驱动视图","link":"#数据驱动视图","children":[]}]},{"level":2,"title":"2、响应式","slug":"_2、响应式","link":"#_2、响应式","children":[]},{"level":2,"title":"3、vdom 和 diff","slug":"_3、vdom-和-diff","link":"#_3、vdom-和-diff","children":[{"level":3,"title":"diff 算法","slug":"diff-算法","link":"#diff-算法","children":[]}]},{"level":2,"title":"4、模版编译","slug":"_4、模版编译","link":"#_4、模版编译","children":[]},{"level":2,"title":"5、渲染过程","slug":"_5、渲染过程","link":"#_5、渲染过程","children":[]},{"level":2,"title":"6、前端路由","slug":"_6、前端路由","link":"#_6、前端路由","children":[]},{"level":2,"title":"7、vue 面试真题演练","slug":"_7、vue-面试真题演练","link":"#_7、vue-面试真题演练","children":[{"level":3,"title":"1、v-show 和 v-if 的区别","slug":"_1、v-show-和-v-if-的区别","link":"#_1、v-show-和-v-if-的区别","children":[]},{"level":3,"title":"为何在 v-for 中使用 key","slug":"为何在-v-for-中使用-key","link":"#为何在-v-for-中使用-key","children":[]},{"level":3,"title":"描述 Vue 组件生命周期（父子组件）","slug":"描述-vue-组件生命周期-父子组件","link":"#描述-vue-组件生命周期-父子组件","children":[]},{"level":3,"title":"Vue 组件如何通讯（常见）","slug":"vue-组件如何通讯-常见","link":"#vue-组件如何通讯-常见","children":[]},{"level":3,"title":"描述组件渲染和更新的过程","slug":"描述组件渲染和更新的过程","link":"#描述组件渲染和更新的过程","children":[]},{"level":3,"title":"双向数据绑定 v-model 的实现原理","slug":"双向数据绑定-v-model-的实现原理","link":"#双向数据绑定-v-model-的实现原理","children":[]},{"level":3,"title":"对于 MVVM 的理解","slug":"对于-mvvm-的理解","link":"#对于-mvvm-的理解","children":[]},{"level":3,"title":"computed 有何特点","slug":"computed-有何特点","link":"#computed-有何特点","children":[]},{"level":3,"title":"为何组件 data 必须是一个函数？","slug":"为何组件-data-必须是一个函数","link":"#为何组件-data-必须是一个函数","children":[]},{"level":3,"title":"ajax 请求应该放在哪个生命周期","slug":"ajax-请求应该放在哪个生命周期","link":"#ajax-请求应该放在哪个生命周期","children":[]},{"level":3,"title":"如何将组件所有 props 传递给子组件？","slug":"如何将组件所有-props-传递给子组件","link":"#如何将组件所有-props-传递给子组件","children":[]},{"level":3,"title":"如何自己实现 v-model","slug":"如何自己实现-v-model","link":"#如何自己实现-v-model","children":[]},{"level":3,"title":"多个组件有相同的逻辑，如何抽离？","slug":"多个组件有相同的逻辑-如何抽离","link":"#多个组件有相同的逻辑-如何抽离","children":[]},{"level":3,"title":"为何要使用异步组件？","slug":"为何要使用异步组件","link":"#为何要使用异步组件","children":[]},{"level":3,"title":"何时使用 keep-alive？","slug":"何时使用-keep-alive","link":"#何时使用-keep-alive","children":[]},{"level":3,"title":"何时需要使用 beforeDestory","slug":"何时需要使用-beforedestory","link":"#何时需要使用-beforedestory","children":[]},{"level":3,"title":"什么是作用域插槽","slug":"什么是作用域插槽","link":"#什么是作用域插槽","children":[]},{"level":3,"title":"vuex 中 action 和 mutation 有何区别","slug":"vuex-中-action-和-mutation-有何区别","link":"#vuex-中-action-和-mutation-有何区别","children":[]},{"level":3,"title":"vue-router 常用的路由模式","slug":"vue-router-常用的路由模式","link":"#vue-router-常用的路由模式","children":[]},{"level":3,"title":"如何配置 vue-router 异步加载","slug":"如何配置-vue-router-异步加载","link":"#如何配置-vue-router-异步加载","children":[]},{"level":3,"title":"请用 vnode 描述一个 DOM 结构","slug":"请用-vnode-描述一个-dom-结构","link":"#请用-vnode-描述一个-dom-结构","children":[]},{"level":3,"title":"监听 data 变化的核心 API 是什么","slug":"监听-data-变化的核心-api-是什么","link":"#监听-data-变化的核心-api-是什么","children":[]},{"level":3,"title":"Vue 如何监听数组变化","slug":"vue-如何监听数组变化","link":"#vue-如何监听数组变化","children":[]},{"level":3,"title":"请描述响应式原理","slug":"请描述响应式原理","link":"#请描述响应式原理","children":[]},{"level":3,"title":"diff 算法的时间复杂度","slug":"diff-算法的时间复杂度","link":"#diff-算法的时间复杂度","children":[]},{"level":3,"title":"简述 diff 算法过程","slug":"简述-diff-算法过程","link":"#简述-diff-算法过程","children":[]},{"level":3,"title":"vue 为何是异步渲染， $nextTick 何用","slug":"vue-为何是异步渲染-nexttick-何用","link":"#vue-为何是异步渲染-nexttick-何用","children":[]},{"level":3,"title":"Vue 常见性能优化方式","slug":"vue-常见性能优化方式","link":"#vue-常见性能优化方式","children":[]}]},{"level":2,"title":"hash 和 history 路由实现原理","slug":"hash-和-history-路由实现原理","link":"#hash-和-history-路由实现原理","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":6.64,"words":1992},"filePathRelative":"posts/vue/theory.md","localizedDate":"2021年6月27日","excerpt":"<h2>在父组件中监听子组件的生命周期钩子</h2>\\n<div class=\\"language-vue\\" data-ext=\\"vue\\" data-title=\\"vue\\"><pre class=\\"language-vue\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>child</span> <span class=\\"token attr-name\\"><span class=\\"token namespace\\">@hook:</span>mounted</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>onChildMounted<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>child</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">onChildMounted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre></div>","autoDesc":true}');export{S as comp,A as data};
