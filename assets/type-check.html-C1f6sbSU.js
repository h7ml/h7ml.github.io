import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const e={},p=t(`<h1 id="javascript-数值转换" tabindex="-1"><a class="header-anchor" href="#javascript-数值转换"><span>JavaScript 数值转换</span></a></h1><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">转换为 true 的值</th><th style="text-align:center;">转换为 false 的值</th></tr></thead><tbody><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">True</td><td style="text-align:center;">False</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">非空字符串</td><td style="text-align:center;">&#39;&#39;</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:center;">非 0 数字</td><td style="text-align:center;">0 和 NaN</td></tr><tr><td style="text-align:center;">Object</td><td style="text-align:center;">任何对象</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;">Undefined</td><td style="text-align:center;">n/a（不适用）</td><td style="text-align:center;">Undefined</td></tr></tbody></table><h2 id="isnan" tabindex="-1"><a class="header-anchor" href="#isnan"><span>isNaN</span></a></h2><ul><li>不能被 number 转换为数字 ----&gt; true</li><li>能被 number 转换为数字 ----&gt; false</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (不能被转换为数字)</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (10可以被转换成数值10)</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false(可以被转换成1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>isNaN 首先会调用对象的 valueOf() 方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 toString() 方法，并测试其返回值</p><h2 id="isfinite" tabindex="-1"><a class="header-anchor" href="#isfinite"><span>isFinite</span></a></h2><ul><li>除 NaN 与 Infinity 都返回 true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span>Number</span></a></h2><ul><li>转换为为数值 无法转换 ---&gt; NaN（不是一个数字）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;0011&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment">// 整数</span>

<span class="token comment">// 八进制第一个数字必须是零（0），然后是相应的八进制数字（数值0~7）</span>
<span class="token keyword">let</span> octalNum1 <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment">// 八进制的56</span>
<span class="token keyword">let</span> octalNum2 <span class="token operator">=</span> <span class="token number">079</span><span class="token punctuation">;</span> <span class="token comment">// 无效的八进制值，当成79 处理</span>
<span class="token keyword">let</span> octalNum3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span> <span class="token comment">// 无效的八进制值，当成8 处理</span>

<span class="token comment">// 十六进制字面量，必须让真正的数值前缀0x（区分大小写），然后是十六进制数字（0~9 以及A~F）</span>
<span class="token keyword">let</span> hexNum1 <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制10</span>
<span class="token keyword">let</span> hexNum2 <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint"><span>parseInt</span></a></h2><ul><li>转换为整数 <ul><li>参数 1：要转换的变量</li><li>参数 2：以什么进制来转换这个数值，默认 10 进制，0 也是 10 进制</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;234blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 234</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;blue234&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;44.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 44</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;070&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 56（8进制）</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;0xf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15（16进制）</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;070&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后面告诉浏览器这是10进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parsefloat" tabindex="-1"><a class="header-anchor" href="#parsefloat"><span>parseFloat</span></a></h2><ul><li>转换为小数，只解析 10 进制，没有小数点或小数点后面都是 0 会返回整数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;1234blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234 整数</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;0xA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;22.54.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22.54</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString</span></a></h2><ul><li>转换为字符串 不能转换 null 和 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">11.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;11&#39; 字符串</span>
<span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;true&#39; 字符串</span>
<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 是对象下的方法，所以不能使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><ul><li>转型函数 能转换 null 和 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &quot;null</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token number">11</span> <span class="token operator">+=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;11&quot; 字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>+&#39;&#39; 拼接也可以转换为 string</li></ul>`,25),l=[p];function c(i,o){return s(),a("div",null,l)}const d=n(e,[["render",c],["__file","type-check.html.vue"]]),m=JSON.parse(`{"path":"/posts/javascript/basic/type-check.html","title":"JavaScript 数值转换","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2023-01-11T00:00:00.000Z","author":"h7ml","category":"javascript","tag":"javascript","star":true,"description":"JavaScript 数值转换 isNaN 不能被 number 转换为数字 ----> true 能被 number 转换为数字 ----> false isNaN 首先会调用对象的 valueOf() 方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 toString() 方法，并测试其返回值 isFinite 除 NaN 与 Infi...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/basic/type-check.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/basic/type-check.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 数值转换"}],["meta",{"property":"og:description","content":"JavaScript 数值转换 isNaN 不能被 number 转换为数字 ----> true 能被 number 转换为数字 ----> false isNaN 首先会调用对象的 valueOf() 方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 toString() 方法，并测试其返回值 isFinite 除 NaN 与 Infi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2023-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 数值转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"isNaN","slug":"isnan","link":"#isnan","children":[]},{"level":2,"title":"isFinite","slug":"isfinite","link":"#isfinite","children":[]},{"level":2,"title":"Number","slug":"number","link":"#number","children":[]},{"level":2,"title":"parseInt","slug":"parseint","link":"#parseint","children":[]},{"level":2,"title":"parseFloat","slug":"parsefloat","link":"#parsefloat","children":[]},{"level":2,"title":"toString","slug":"tostring","link":"#tostring","children":[]},{"level":2,"title":"String","slug":"string","link":"#string","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"posts/javascript/basic/type-check.md","localizedDate":"2023年1月11日","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">数据类型</th>\\n<th style=\\"text-align:center\\">转换为 true 的值</th>\\n<th style=\\"text-align:center\\">转换为 false 的值</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">Boolean</td>\\n<td style=\\"text-align:center\\">True</td>\\n<td style=\\"text-align:center\\">False</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">String</td>\\n<td style=\\"text-align:center\\">非空字符串</td>\\n<td style=\\"text-align:center\\">''</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Number</td>\\n<td style=\\"text-align:center\\">非 0 数字</td>\\n<td style=\\"text-align:center\\">0 和 NaN</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Object</td>\\n<td style=\\"text-align:center\\">任何对象</td>\\n<td style=\\"text-align:center\\">null</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Undefined</td>\\n<td style=\\"text-align:center\\">n/a（不适用）</td>\\n<td style=\\"text-align:center\\">Undefined</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{d as comp,m as data};
