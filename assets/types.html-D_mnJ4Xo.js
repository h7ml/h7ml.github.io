import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as p,c as l,d as n,e as s,a as t,f as e}from"./app-Cbix2SPG.js";const i={},r=n("h1",{id:"javascript-数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-数据类型"},[n("span",null,"javascript 数据类型")])],-1),u={class:"hint-container tip"},d=e('<p class="hint-container-title">温馨提示阅读[《JavaScript 高级程序设计（第 4 版）》](https://www.ituring.com.cn/book/2472)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** :::</p><p><code>JavaScript</code> 中的数据类型分为基本数据类型和引用数据类型</p><h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><blockquote><p>注: 基本数据类型也可以叫原始数据类型</p></blockquote><p>在 <code>ES2020</code> 标准下的 <code>JavaScript</code> 一共有以下 7 种基本类型</p>',5),k=e("<li><strong><code>undefined</code></strong> 未定义</li><li><strong><code>null</code></strong> 空指针</li><li><strong><code>boolean</code></strong> 布尔值</li><li><strong><code>string</code></strong> 字符串</li><li><strong><code>number</code></strong> 数值</li>",5),m=n("strong",null,[n("code",null,"symbol")],-1),v={href:"https://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,[n("code",null,"bigint")],-1),h={href:"https://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},g=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"基本类型总结"),n("ul",null,[n("li",null,"基本类型仅保存原始值，不存在属性和方法"),n("li",null,[s("基本类型存储在 "),n("strong",null,"栈内存"),s(" 中")]),n("li",null,[s("保存基本类型的变量是 "),n("strong",null,"按值 (by value) 访问"),s(" 的，操作的就是存储在变量中的实际值")]),n("li",null,"复制基本类型时会创建该值的第二个副本 (独立使用，互不干扰)")])],-1),y={class:"hint-container tip"},f=e(`<p class="hint-container-title">为什么原始值不存在属性和方法，但 &#39;hello world&#39;.toString() 可以正确执行为了方便操作原始值 \`ECMAScript\` 提供了 3 种特殊的引用类型：\`Boolean\` \`Number\` \`String\`，每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，在执行完后再销毁这个包装对象 :::</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 举个 🌰</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 在执行上面的代码时 \`JavaScript\` 都会执行以下 3 步
 * 1. 创建一个 String 类型的实例
 * 2. 调用实例上的特定方法或属性
 * 3. 销毁刚刚创建的实例
 */</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h2><p>在 <code>JavaScript</code> 中除了基本类型，其他的都是引用类型，常见的引用类型如下</p>`,4),_=e("<li><strong><code>Object</code></strong> 对象</li><li><strong><code>Array</code></strong> 数组</li><li><strong><code>Function</code></strong> 函数</li><li><strong><code>Date</code></strong> 日期与时间</li><li><strong><code>RegExp</code></strong> 正则表达式</li>",5),w=n("strong",null,[n("code",null,"Set")],-1),j={href:"https://es6.ruanyifeng.com/#docs/set-map#Set",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,[n("code",null,"WeakSet")],-1),E={href:"https://es6.ruanyifeng.com/#docs/set-map#WeakSet",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,[n("code",null,"Map")],-1),B={href:"https://es6.ruanyifeng.com/#docs/set-map#Map",target:"_blank",rel:"noopener noreferrer"},A=n("strong",null,[n("code",null,"WeakMap")],-1),O={href:"https://es6.ruanyifeng.com/#docs/set-map#WeakMap",target:"_blank",rel:"noopener noreferrer"},J=e('<div class="hint-container tip"><p class="hint-container-title">引用类型总结</p><ul><li>因为 <code>JavaScript</code> 不允许直接访问内存位置(不能直接操作对象所在的内存空间)，所以引用类型在 <strong>栈内存</strong> 中存储的是地址(内存指针)，而引用类型中的数据(方法或属性)是存储在 <strong>堆内存</strong> 中</li><li>保存引用类型的变量是 <strong>按引用 (by reference) 访问</strong> ，实际上操作的是对该对象的引用而非实际的对象本身</li><li>复制引用类型时只会复制内存指针</li></ul></div>',1),N={class:"hint-container tip"},M=n("p",{class:"hint-container-title"},"栈内存和堆内存",-1),P=n("li",null,[n("strong",null,"栈内存"),n("ul",null,[n("li",null,"存储基本数据类型和堆内存地址"),n("li",null,"是连续的内存空间")])],-1),W=n("li",null,[n("strong",null,"堆内存"),n("ul",null,[n("li",null,"存储引用数据类型和闭包中的变量"),n("li",null,"不是连续的内存空间")])],-1),R={href:"https://github.com/chenqf/frontEndBlog/issues/9",target:"_blank",rel:"noopener noreferrer"},C=e(`<h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断"><span>类型判断</span></a></h2><p>常见的五种判断方式</p><ul><li><strong><code>typeof</code></strong></li><li><strong><code>instanceof</code></strong></li><li><strong><code>constructor</code></strong></li><li><strong><code>Array.isArray()</code></strong></li><li><strong><code>Object.prototype.toString</code></strong></li></ul><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h3><ul><li>除 <strong><code>null</code></strong> 外的基本类型都能准确判断</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boolean&#39;</span>
<span class="token keyword">typeof</span> <span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>
<span class="token keyword">typeof</span> <span class="token number">2021</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;symbol&#39;</span>
<span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;bigint&#39;</span>

<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),q={class:"hint-container tip"},z=e('<p class="hint-container-title">为什么 typeof null === &#39;object&#39; 在 `JavaScript` 最初的实现中，`JavaScript` 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 `0`。由于 `null` 代表的是空指针（大多数平台下值为 `0x00`），因此`null` 的类型标签是 `0`，`typeof null` 也因此返回 `&quot;object&quot;` —— [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null) :::</p><ul><li>除 <strong><code>function</code></strong> 外的引用类型均返回 <code>object</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boolean&#39;</span>\n<span class="token keyword">typeof</span> <span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>\n<span class="token keyword">typeof</span> <span class="token number">2021</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>\n<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;symbol&#39;</span>\n<span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;bigint&#39;</span>\n\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h3>',4),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"instanceof",-1),I=n("code",null,"prototype",-1),Z=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 基本类型 */</span>
<span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token string">&#39;h7ml&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token doc-comment comment">/** 引用类型 */</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
p1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 修改原型，使 p1 不再是 Person 的实例</span>
Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OR p1.__proto__ = Array.prototype</span>

p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
p1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F={class:"hint-container tip"},V=n("p",{class:"hint-container-title"},"instanceof 总结",-1),G=n("li",null,[n("code",null,"instanceof"),s(" 不能判断基本类型，对于引用类型只能判断原型链上的从属关系")],-1),L=n("code",null,"instanceof",-1),U=n("code",null,"prototype",-1),H=n("code",null,"ES6",-1),K={href:"https://es6.ruanyifeng.com/?search=%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&x=0&y=0#docs/reflect#Reflect-setPrototypeOfobj-newProto",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"Reflect.setPrototypeOf()",-1),X=n("li",null,[s("借助于非标准的 "),n("code",null,"__proto__"),s(" 伪属性")],-1),Y=n("h3",{id:"constructor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#constructor"},[n("span",null,"constructor")])],-1),$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"constructor",-1),sn=e(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/** 基本类型 */
(true).constructor === Boolean            // true
&#39;h7ml&#39;.constructor === String           // true
(2021).constructor === Number             // true
Symbol().constructor === Symbol           // true
BigInt(2021).constructor === BigInt       // true

/** 引用类型 */
({}).constructor === Object               // true
([]).constructor === Array                // true

function Person(name) {
  this.name = name
}
Person.prototype.constructor === Person   // true

// 修改原型造成 constructor 丢失
Person.prototype = {}
Person.prototype.constructor === Object   // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">constructor 总结</p><ul><li><code>constructor</code> 可以判断除 <code>undefined</code> 和 <code>null</code> 外的所有基本类型和引用类型(<code>undefined</code> 和 <code>null</code> 不存在构造函数)</li><li><code>constructor</code> 并不完全可靠，因为构造函数的 <code>prototype</code> 属性可能会被修改，从而造成 <code>constructor</code> 属性指向不准确</li></ul></div><h3 id="array-isarray" tabindex="-1"><a class="header-anchor" href="#array-isarray"><span>Array.isArray()</span></a></h3>`,3),an={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"Array.isArray()",-1),en=n("code",null,"Array",-1),on=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring"><span>Object.prototype.toString</span></a></h3>`,2),cn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"toString()",-1),ln=n("code",null,"toString()",-1),rn=n("code",null,"Object",-1),un=n("code",null,"toString()",-1),dn=n("code",null,'"[object type]"',-1),kn=n("code",null,"type",-1),mn=n("li",null,[s("为了每个对象都能通过 "),n("code",null,"Object.prototype.toString()"),s(" 来检测，需要以 "),n("code",null,"Function.prototype.call()"),s(" 或者 "),n("code",null,"Function.prototype.apply()"),s(" 的形式来调用")],-1),vn=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>

<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Undefined]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Null]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Boolean]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;h7ml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object String]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Number]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Symbol]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object BigInt]&#39;</span>

<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Object]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Array]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Function]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Date]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object RegExp]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Set]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object WeakSet]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Map]&#39;</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object WeakMap]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),bn=n("code",null,"toString",-1),hn={href:"https://es5.github.io/#x15.2.4.2",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"ECMAScript 5",-1),yn=e("<ol><li>如果 <code>this</code> 是 <code>undefined</code> 返回 <code>[object Undefined]</code></li><li>如果 <code>this</code> 是 <code>null</code> 返回 <code>[object Null]</code></li><li>让 <code>O</code> 成为 <code>ToObject(this)</code> 的结果</li><li>让 <code>class</code> 成为 <code>O</code> 的内部属性 <code>[[Class]]</code> 的值</li><li>返回由 <strong><code>&quot;[object &quot;</code></strong> <strong><code>class</code></strong> <strong><code>&quot;]&quot;</code></strong> 三个部分组成的字符串</li></ol>",1),fn={class:"hint-container warning"},_n=n("p",{class:"hint-container-title"},"注意点",-1),wn=n("p",null,[s("不同 "),n("code",null,"ECMAScript"),s(" 版本对 "),n("code",null,"toString"),s(" 方法的规范都有所不同")],-1),jn={href:"https://juejin.cn/post/6972878737582850062#heading-27",target:"_blank",rel:"noopener noreferrer"};function Sn(En,xn){const a=c("ExternalLinkIcon");return p(),l("div",null,[r,n("div",u,[d,n("ul",null,[k,n("li",null,[m,s(" 独一无二的值 ("),n("a",v,[s("ES6 引入"),t(a)]),s(")")]),n("li",null,[b,s(" 大整数 ("),n("a",h,[s("ES2020 引入"),t(a)]),s(")")])]),g]),n("div",y,[f,n("ul",null,[_,n("li",null,[w,s(" 类似于数组但成员的值都是唯一的 ("),n("a",j,[s("ES6 引入"),t(a)]),s(")")]),n("li",null,[S,s(" ("),n("a",E,[s("ES6 引入"),t(a)]),s(")")]),n("li",null,[x,s(" 类似于对象也是键值对的集合 ("),n("a",B,[s("ES6 引入"),t(a)]),s(")")]),n("li",null,[A,s(" ("),n("a",O,[s("ES6 引入"),t(a)]),s(")")])]),J]),n("div",N,[M,n("ul",null,[P,W,n("li",null,[s("了解更多请点击 "),n("a",R,[s("JS 中的栈内存和堆内存"),t(a)])])])]),C,n("div",q,[z,n("p",null,[n("a",T,[D,t(a)]),s(" 用于检测构造函数的 "),I,s(" 属性是否存在于实例对象的原型链上")]),Z,n("div",F,[V,n("ul",null,[G,n("li",null,[L,s(" 并不完全可靠，因为构造函数的 "),U,s(" 属性可能会被修改 "),n("ul",null,[n("li",null,[s("修改原型的方法 "),n("ul",null,[n("li",null,[s("使用 "),H,s(" 提供的 "),n("a",K,[Q,t(a)]),s(" 方法")]),X])])])])])])]),Y,n("p",null,[s("实例对象可以通过 "),n("a",$,[nn,t(a)]),s(" 属性去访问它的构造函数")]),sn,n("p",null,[n("a",an,[tn,t(a)]),s(" 用于判断一个值是否是数组 ("),en,s(")")]),on,n("ul",null,[n("li",null,[s("每个对象都有一个 "),n("a",cn,[pn,t(a)]),s(" 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用，默认情况下 "),ln,s(" 方法被每个 "),rn,s(" 对象继承。如果此方法在自定义对象中未被覆盖 "),un,s(" 返回 "),dn,s(" 其中 "),kn,s(" 是对象的类型")]),mn]),vn,n("p",null,[bn,s(" 方法的在 "),n("a",hn,[gn,t(a)]),s(" 下的大致执行过程")]),yn,n("div",fn,[_n,wn,n("p",null,[n("a",jn,[s("Object.prototype.toString 方法的原理"),t(a)])])])])}const On=o(i,[["render",Sn],["__file","types.html.vue"]]),Jn=JSON.parse('{"path":"/posts/javascript/types.html","title":"javascript 数据类型","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2019-08-16T00:00:00.000Z","author":"h7ml","category":"javascript 数据类型","tag":"javascript","star":true,"description":"javascript 数据类型 温馨提示阅读[《JavaScript 高级程序设计（第 4 版）》](https://www.ituring.com.cn/book/2472)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** ::: JavaScript 中的数据类型分为基本数据类型和引用数据类型 基本类型 注: 基本数据类型也可以叫原始数...","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/types.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/types.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"javascript 数据类型"}],["meta",{"property":"og:description","content":"javascript 数据类型 温馨提示阅读[《JavaScript 高级程序设计（第 4 版）》](https://www.ituring.com.cn/book/2472)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** ::: JavaScript 中的数据类型分为基本数据类型和引用数据类型 基本类型 注: 基本数据类型也可以叫原始数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2019-08-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javascript 数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-08-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"类型判断","slug":"类型判断","link":"#类型判断","children":[{"level":3,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"Array.isArray()","slug":"array-isarray","link":"#array-isarray","children":[]},{"level":3,"title":"Object.prototype.toString","slug":"object-prototype-tostring","link":"#object-prototype-tostring","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":5.95,"words":1786},"filePathRelative":"posts/javascript/types.md","localizedDate":"2019年8月16日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">温馨提示阅读[《JavaScript 高级程序设计（第 4 版）》](https://www.ituring.com.cn/book/2472)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** :::</p>\\n<p><code>JavaScript</code> 中的数据类型分为基本数据类型和引用数据类型</p>\\n<h2>基本类型</h2>\\n<blockquote>\\n<p>注: 基本数据类型也可以叫原始数据类型</p>\\n</blockquote>\\n<p>在 <code>ES2020</code> 标准下的 <code>JavaScript</code> 一共有以下 7 种基本类型</p>\\n<ul>\\n<li><strong><code>undefined</code></strong> 未定义</li>\\n<li><strong><code>null</code></strong> 空指针</li>\\n<li><strong><code>boolean</code></strong> 布尔值</li>\\n<li><strong><code>string</code></strong> 字符串</li>\\n<li><strong><code>number</code></strong> 数值</li>\\n<li><strong><code>symbol</code></strong> 独一无二的值 (<a href=\\"https://es6.ruanyifeng.com/#docs/symbol\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ES6 引入</a>)</li>\\n<li><strong><code>bigint</code></strong> 大整数 (<a href=\\"https://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ES2020 引入</a>)</li>\\n</ul>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">基本类型总结</p>\\n<ul>\\n<li>基本类型仅保存原始值，不存在属性和方法</li>\\n<li>基本类型存储在 <strong>栈内存</strong> 中</li>\\n<li>保存基本类型的变量是 <strong>按值 (by value) 访问</strong> 的，操作的就是存储在变量中的实际值</li>\\n<li>复制基本类型时会创建该值的第二个副本 (独立使用，互不干扰)</li>\\n</ul>\\n</div>\\n</div>","autoDesc":true}');export{On as comp,Jn as data};
