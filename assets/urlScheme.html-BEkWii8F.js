import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,f as s}from"./app-Cbix2SPG.js";const t={},c=s(`<h1 id="深度解析-url-scheme" tabindex="-1"><a class="header-anchor" href="#深度解析-url-scheme"><span>深度解析 URL Scheme</span></a></h1><p>当我们使用移动应用时，我们通常会通过点击链接或按钮来跳转到其他页面或应用。在 <code>iOS</code> 和 <code>Android</code> 系统中，这些链接或按钮是通过 <code>URL Scheme</code> 实现的。</p><p><code>URL Scheme</code> 是一种在移动设备上通过链接或按钮调用应用程序的机制。它允许开发者在应用程序内部注册特殊的 <code>URL</code>，当用户点击带有该 <code>URL</code> 的链接或按钮时，系统会自动打开相应的应用程序，并执行相应的操作。</p><p>从前端角度来看，当我们在网页中包含了带有 URL Scheme 的链接或按钮时，我们可以使用以下代码来触发它们：</p><blockquote><p>URL Scheme（Uniform Resource Locator Scheme）是一种标准化的协议，可以用于在应用程序之间传递数据和命令。它在移动应用程序中得到广泛应用，可以让不同应用程序之间实现无缝集成。本文将深入探讨 URL Scheme 在前端开发中的应用及其实现方式。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urlscheme://action<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>urlscheme</code> 是应用程序的<code> URL Scheme</code>，<code>action</code> 是应用程序内部的操作。</p><p>除此之外，我们还可以通过 <code>JavaScript</code> 来触发 <code>URL Scheme</code>。例如，以下代码将通过 <code>JavaScript</code> 调用 <code>URL Scheme</code> 打开邮件应用程序：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;mailto:user@example.com&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从应用角度来看，<code>URL Scheme</code> 可以实现很多有趣的功能。以下是一些常见的应用场景：</p><ol><li>打开特定的页面</li></ol><p>应用程序可以注册一个特定的 <code>URL Scheme</code>，以便在应用程序内部打开特定的页面。例如，<code>Facebook</code> 应用程序可以注册 <code>fb://scheme</code>，以便在应用程序内部打开用户的个人资料页面：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fb://profile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>My Profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>向应用程序传递参数</li></ol><p>应用程序可以通过 <code>URL Scheme</code> 接收参数，以便在打开应用程序时执行特定的操作。例如，支付宝可以接收一个参数来打开特定的收款页面：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alipay://platformapi/startapp?saId=10000007&amp;clientVersion=3.7.0.0718&amp;qrcode=https://qr.alipay.com/fkx00845mttamr5dlr9dzb9<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Pay with Alipay
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>调用其他应用程序</li></ol><p>应用程序可以通过 <code>URL Scheme</code> 调用其他应用程序。例如，一个应用程序可以调用地图应用程序来显示某个地点的位置：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maps.apple.com/?q=北京市海淀区中关村<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Find my location<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>打开系统设置页面</li></ol><p>应用程序可以通过 <code>URL Scheme</code> 打开系统设置页面，以便让用户修改应用程序的设置。例如，以下代码将打开 <code>Wi-Fi</code> 设置页面：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App-Prefs:root=WIFI<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Open Wi-Fi settings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>总的来说，<code>URL Scheme</code> 是移动应用程序中非常有用的机制。它可以使应用程序更加智能化和高效化，同时也为开发者提供了更多的灵活性和创造力。</p><h2 id="url-scheme-的基本原理" tabindex="-1"><a class="header-anchor" href="#url-scheme-的基本原理"><span>URL Scheme 的基本原理</span></a></h2><p><code>URL Scheme</code> 是一种特殊的 <code>URL</code>，它不是用于访问 <code>Web</code> 页面的，而是用于唤起移动应用程序并传递参数。一个 <code>URL Scheme</code> 包含两个主要部分：<code>Scheme</code> 和 <code>Host</code>。例如，<code>myapp://action?param1=value1&amp;param2=value2</code> 就是一个 <code>URL Scheme</code>，其中 <code>Scheme</code> 是 <code>myapp</code>，<code>Host</code> 是 <code>action</code>。</p><p>当用户点击一个 <code>URL Scheme</code> 链接时，操作系统会检查是否有已经安装了该应用程序。如果已经安装，则会打开该应用程序，并将链接中的参数传递给应用程序。如果应用程序没有安装，则无法执行该操作。</p><h2 id="url-scheme-的用途" tabindex="-1"><a class="header-anchor" href="#url-scheme-的用途"><span>URL Scheme 的用途</span></a></h2><p><code>URL Scheme</code> 可以用于实现许多有用的功能。以下是一些常见的应用：</p><h3 id="打开应用程序" tabindex="-1"><a class="header-anchor" href="#打开应用程序"><span>打开应用程序</span></a></h3><p><code>URL Scheme</code> 可以用于打开应用程序，这通常用于应用程序之间的集成。例如，如果您的应用程序需要与另一个应用程序共享数据，您可以使用 <code>URL Scheme</code> 打开该应用程序并将数据传递给它。</p><h3 id="执行操作" tabindex="-1"><a class="header-anchor" href="#执行操作"><span>执行操作</span></a></h3><p><code>URL Scheme</code> 还可以用于执行应用程序中的操作。例如，您可以使用 <code>URL Scheme</code> 执行搜索操作、分享操作、支付操作等等。</p><h3 id="激活特定页面" tabindex="-1"><a class="header-anchor" href="#激活特定页面"><span>激活特定页面</span></a></h3><p><code>URL Scheme</code> 还可以用于激活应用程序中的特定页面。例如，您可以使用 <code>URL Scheme</code> 打开应用程序并转到用户的购物车页面。</p><h2 id="url-scheme-的实现方式" tabindex="-1"><a class="header-anchor" href="#url-scheme-的实现方式"><span>URL Scheme 的实现方式</span></a></h2><p><code>URL Scheme</code> 的实现方式取决于您正在开发的平台和编程语言。以下是一些常见的实现方式：</p><h3 id="html-中使用" tabindex="-1"><a class="header-anchor" href="#html-中使用"><span>HTML 中使用</span></a></h3><p>在 <code>HTML</code> 中，您可以使用 <code>&lt;a&gt;</code> 标签来创建一个 <code>URL Scheme</code> 链接。例如：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myapp://action?param1=value1&amp;param2=value2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>打开应用程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="javascript-中使用" tabindex="-1"><a class="header-anchor" href="#javascript-中使用"><span>JavaScript 中使用</span></a></h3><p>在 <code>JavaScript</code> 中，您可以使用 <code>window.location.href</code> 属性来打开一个 <code>URL Scheme</code> 链接。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;myapp://action?param1=value1&amp;param2=value2&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ios-中使用" tabindex="-1"><a class="header-anchor" href="#ios-中使用"><span>iOS 中使用</span></a></h3><p>在 <code>iOS</code> 中，您可以使用 <code>UIApplication</code> 类的 <code>openURL:</code> 方法来打开一个 <code>URL Scheme</code> 链接。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift" data-title="swift"><pre class="language-swift"><code><span class="token class-name">UIApplication</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;myapp://action?param1=value1&amp;param2=value2&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="android-中使用" tabindex="-1"><a class="header-anchor" href="#android-中使用"><span>Android 中使用</span></a></h3><p>在 <code>Android</code> 中，您可以使用 <code>Intent</code> 类来打开一个 <code>URL Scheme</code> 链接。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_VIEW</span><span class="token punctuation">,</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>&quot;myapp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>action<span class="token operator">?</span>param1<span class="token operator">=</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="url-scheme-的注冊" tabindex="-1"><a class="header-anchor" href="#url-scheme-的注冊"><span>URL Scheme 的注冊</span></a></h2><p>在 <code>iOS</code> 中，要注册自定义的 <code>URL Scheme</code>，需要在 <code>Xcode</code> 中进行以下配置：</p><ol><li><p>在项目的 <code>Info.plist</code> 文件中，添加一个新的 <code>key</code>，<code>CFBundleURLTypes</code>。</p></li><li><p>在 <code>CFBundleURLTypes</code> 中添加一个新的 <code>CFBundleURLName key</code>，用于指定 <code>URL Scheme</code> 的名称。</p></li><li><p>在 <code>CFBundleURLTypes</code> 中添加一个新的 <code>CFBundleURLSchemes key</code>，用于指定 <code>URL Scheme</code> 的字符串，例如 <code>myapp</code>。</p></li><li><p>在 <code>CFBundleURLTypes</code> 中添加一个新的 <code>CFBundleURLTypes key</code>，用于指定 <code>URL Scheme</code> 支持的 <code>URL</code> 类型，例如 <code>public.url</code>。</p></li></ol><p>完成以上配置后，就可以在应用程序中使用自定义的 <code>URL Scheme</code> 来进行跳转了。</p><p>在 Android 中，要注册自定义的 <code>URL Scheme</code>，需要在 <code>AndroidManifest.xml</code> 文件中进行以下配置：</p><p>在 <code>AndroidManifest.xml</code> 文件中添加一个新的 <code>&lt;intent-filter&gt;</code> 元素，用于指定<code> URL Scheme</code> 支持的协议。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myapp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.action.VIEW<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.DEFAULT<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.BROWSABLE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>&lt;data&gt;</code> 元素用于指定 <code>URL Scheme</code> 的名称，<code>&lt;action&gt;</code> 元素用于指定动作为 <code>VIEW</code>，表示浏览操作，<code>&lt;category&gt;</code> 元素用于指定类别为 <code>DEFAULT</code> 和 <code>BROWSABLE</code>，表示该 <code>URL Scheme</code> 可以被浏览器调用。</p><p>完成以上配置后，就可以在应用程序中使用自定义的 <code>URL Scheme</code> 来进行跳转了。</p><p>需要注意的是，自定义的 <code>URL Scheme </code>可能存在安全隐患，因此建议在使用时进行相应的安全措施，例如限制特定来源的 <code>URL Scheme</code> 调用，对 <code>URL</code> 参数进行验证等。</p><p>除了在应用程序中注册 <code>URL Scheme</code> 以外，还可以通过以下方式进行拓展：</p><ol><li><p>深度链接深度链接是指将应用程序内的特定内容与 <code>URL Scheme</code> 关联起来，以便用户在从其他应用程序或网站中点击链接时，可以直接跳转到对应的内容。深度链接需要在应用程序中进行特定的处理，例如解析 <code>URL</code> 参数、显示对应的页面等。</p></li><li><p>Universal Links <code>Universal Links</code> 是一种新的跳转方式，它能够在应用程序内通过 <code>HTTP/HTTPS</code> 协议直接访问应用程序内的特定内容，无需通过 <code>URL Scheme</code> 进行跳转。<code>Universal Links</code> 需要在应用程序中进行特定的配置，并在对应的域名中添加特定的配置文件，以便系统能够识别并跳转到应用程序内的内容。</p></li><li><p>应用内搜索应用内搜索是指在应用程序内搜索特定的内容，例如商品、文章等，而不需要从其他应用程序或网站中跳转过来。应用内搜索需要在应用程序中进行特定的处理，例如实现搜索逻辑、显示搜索结果等。</p></li></ol><p>总的来说，通过拓展 <code>URL Scheme</code> 的应用，可以实现更加丰富的应用间跳转和内容分享，提高应用程序的使用体验和用户粘性。但同时需要注意安全性和隐私保护，避免 <code>URL Scheme</code> 被恶意利用。</p><h2 id="url-scheme-的使用" tabindex="-1"><a class="header-anchor" href="#url-scheme-的使用"><span>URL Scheme 的使用</span></a></h2><p><code>URL Scheme</code> 可以用于在应用程序之间进行跳转和传递数据。下面是 <code>URL Scheme</code> 的一些常见使用场景：</p><ol><li><p>打开应用程序内特定页面：通过指定 <code>URL Scheme</code> 和相应参数，可以直接打开应用程序内的特定页面，例如打开某个商品的详情页面、用户个人信息页面等。</p></li><li><p>启动应用程序并执行特定操作：通过指定 <code>URL Scheme</code> 和相应参数，可以启动应用程序并执行特定操作，例如启动应用程序并执行搜索操作、购买操作等。</p></li><li><p>与第三方应用程序进行交互：通过指定 <code>URL Scheme</code> 和相应参数，可以与第三方应用程序进行交互，例如打开某个网页、分享内容等。</p></li></ol><p>需要注意的是，<code>URL Scheme</code> 的使用需要进行相应的安全措施，避免因 <code>URL</code> 参数被恶意篡改而导致安全问题。在应用程序中使用 <code>URL Scheme</code> 时，需要对 <code>URL</code> 参数进行验证，避免恶意输入或者篡改 <code>URL</code> 参数。例如，可以使用加密算法对 <code>URL</code> 参数进行加密，确保数据安全性。同时，也需要限制特定来源的 <code>URL Scheme</code> 调用，避免恶意应用程序利用 <code>URL Scheme</code> 进行攻击。</p><h2 id="url-scheme-的安全性" tabindex="-1"><a class="header-anchor" href="#url-scheme-的安全性"><span>URL Scheme 的安全性</span></a></h2><p><code>URL Scheme</code> 是一种用于应用程序之间通信的协议，其中包含了用于打开和调用其他应用程序的特定链接。但是，由于 <code>URL Scheme</code> 是公开的，它们可能会面临一些安全风险。</p><p>其中一种常见的安全风险是恶意应用程序可以利用 <code>URL Scheme</code> 打开其他应用程序并进行恶意操作，比如在用户不知情的情况下访问他们的个人信息或执行一些恶意代码。例如，一个恶意应用程序可能会在用户点击某个看似无害的链接时，利用该链接打开其他应用程序，并执行一些危险的操作。</p><p>另外，<code>URL Scheme</code> 本身也可能存在一些漏洞和安全问题。例如:</p><ol><li><p>隐私泄露：通过 <code>URL Scheme</code> 打开应用程序可以直接传递参数给应用程序，这些参数可以包含敏感信息。如果不加以限制，这些参数可以被其他应用程序恶意利用，导致隐私泄露问题。</p></li><li><p>恶意攻击：由于 <code>URL Scheme</code> 是开放的，任何应用程序都可以使用它来与其他应用程序交互。如果开发人员不加以限制，恶意应用程序可能利用 <code>URL Scheme</code> 对用户进行攻击，例如伪装成其他应用程序来获取用户的敏感信息。</p></li><li><p>越权操作：<code>URL Scheme</code> 可以用于直接启动应用程序的某些特定操作，例如发送短信、打电话、发邮件等。如果不加以限制，这些操作可能会被滥用，例如利用 <code>URL Scheme</code> 来发送垃圾短信、拨打骚扰电话等。</p></li><li><p>为了解决这些安全问题，开发人员需要在实现 <code>URL Scheme</code> 时注意以下几点：</p></li><li><p>参数校验：应用程序应该对传入的参数进行有效性校验，避免非法参数的传递。</p></li><li><p>权限控制：应用程序应该限制哪些应用程序可以使用自己的 <code>URL Scheme</code>，并且在实现操作时考虑到用户权限的问题，例如发送短信、打电话等操作需要得到用户的明确授权。</p></li><li><p>安全认证：在一些敏感操作中，如支付、修改用户信息等操作，应用程序应该对用户进行身份认证，避免恶意攻击。</p></li></ol><p>总之，开发人员需要认真考虑应用程序与其他应用程序的交互方式，避免因 <code>URL Scheme</code> 实现不当导致的安全问题。</p>`,71),o=[c];function p(l,d){return a(),n("div",null,o)}const u=e(t,[["render",p],["__file","urlScheme.html.vue"]]),m=JSON.parse(`{"path":"/posts/javascript/urlScheme.html","title":"深度解析 URL Scheme","lang":"zh-CN","frontmatter":{"icon":"javascript","description":"深入介绍了 URL Scheme 在前端开发中的作用及实际应用，包括使用场景、实现原理、开发注意事项等，帮助读者更好地理解和使用 URL Scheme。","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>深度解析 URL Scheme 在前端应用中的作用及实际应用","order":3,"star":3,"date":"2024-04-08T00:00:00.000Z","author":"h7ml","image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","category":["javascript","URL Scheme"],"tag":["javascript","URL Scheme"],"shortTitle":"深度解析 URL Scheme 在前端应用中的作用及实际应用","head":[["meta",{"name":"keywords","content":"URL Scheme, 前端应用, 应用开发, 实现原理, 使用场景, 注意事项"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/urlScheme.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/urlScheme.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"深度解析 URL Scheme"}],["meta",{"property":"og:description","content":"深入介绍了 URL Scheme 在前端开发中的作用及实际应用，包括使用场景、实现原理、开发注意事项等，帮助读者更好地理解和使用 URL Scheme。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"深度解析 URL Scheme"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"URL Scheme"}],["meta",{"property":"article:published_time","content":"2024-04-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深度解析 URL Scheme\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2024-04-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"URL Scheme 的基本原理","slug":"url-scheme-的基本原理","link":"#url-scheme-的基本原理","children":[]},{"level":2,"title":"URL Scheme 的用途","slug":"url-scheme-的用途","link":"#url-scheme-的用途","children":[{"level":3,"title":"打开应用程序","slug":"打开应用程序","link":"#打开应用程序","children":[]},{"level":3,"title":"执行操作","slug":"执行操作","link":"#执行操作","children":[]},{"level":3,"title":"激活特定页面","slug":"激活特定页面","link":"#激活特定页面","children":[]}]},{"level":2,"title":"URL Scheme 的实现方式","slug":"url-scheme-的实现方式","link":"#url-scheme-的实现方式","children":[{"level":3,"title":"HTML 中使用","slug":"html-中使用","link":"#html-中使用","children":[]},{"level":3,"title":"JavaScript 中使用","slug":"javascript-中使用","link":"#javascript-中使用","children":[]},{"level":3,"title":"iOS 中使用","slug":"ios-中使用","link":"#ios-中使用","children":[]},{"level":3,"title":"Android 中使用","slug":"android-中使用","link":"#android-中使用","children":[]}]},{"level":2,"title":"URL Scheme 的注冊","slug":"url-scheme-的注冊","link":"#url-scheme-的注冊","children":[]},{"level":2,"title":"URL Scheme 的使用","slug":"url-scheme-的使用","link":"#url-scheme-的使用","children":[]},{"level":2,"title":"URL Scheme 的安全性","slug":"url-scheme-的安全性","link":"#url-scheme-的安全性","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":10.78,"words":3233},"filePathRelative":"posts/javascript/urlScheme.md","localizedDate":"2024年4月8日","excerpt":"\\n<p>当我们使用移动应用时，我们通常会通过点击链接或按钮来跳转到其他页面或应用。在 <code>iOS</code> 和 <code>Android</code> 系统中，这些链接或按钮是通过 <code>URL Scheme</code> 实现的。</p>\\n<p><code>URL Scheme</code> 是一种在移动设备上通过链接或按钮调用应用程序的机制。它允许开发者在应用程序内部注册特殊的 <code>URL</code>，当用户点击带有该 <code>URL</code> 的链接或按钮时，系统会自动打开相应的应用程序，并执行相应的操作。</p>\\n<p>从前端角度来看，当我们在网页中包含了带有 URL Scheme 的链接或按钮时，我们可以使用以下代码来触发它们：</p>"}`);export{u as comp,m as data};
