import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,d as s,e as n,a as c,f as l}from"./app-Cbix2SPG.js";const i={},u=s("code",null,"github",-1),r=s("code",null,"utils",-1),k={href:"https://github.com/userhjp/datav-react/blob/main/src/examples/widgets/echarts/pie/RosePie/preview.tsx#L34",target:"_blank",rel:"noopener noreferrer"},d=l(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">formatNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\\B)(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/(?=(\\B)(\\d{3})+$)/g</code></p><ul><li><p><code>(\\B)</code>：这是一个捕获组，表示匹配位置的前一个字符必须不是一个单词边界（非单词字符和单词字符之间的位置）。</p></li><li><p><code>(\\d{3})+</code>：这是另一个捕获组，表示匹配连续的三个数字。</p></li><li><p><code>(?=</code>：这是一个正向前瞻，它要求匹配位置的后面必须满足捕获组 <code>(\\B)(\\d{3})+</code> 的模式。</p></li><li><p><code>g：</code>这是全局标志，表示查找所有匹配项而不仅仅是第一个。</p></li></ul><p>因此，这个正则表达式的作用是，在每三个数字之前插入一个逗号 ,，并确保它们之前不是单词边界。这正是您在示例中的预期输出：<code>1,000,000,000</code>。它将 <code>1000000000</code> 转换为格式化的金额字符串。</p><h2 id="前瞻-exp" tabindex="-1"><a class="header-anchor" href="#前瞻-exp"><span>前瞻 (?=exp)</span></a></h2><p>前瞻是一种正向查找，它用于查找匹配的内容后面必须满足某个条件（exp）的情况。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查找后面是123的abc</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc(?=123)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;abc&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;kabc1234&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;abc&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc12&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abcc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="负前瞻-exp" tabindex="-1"><a class="header-anchor" href="#负前瞻-exp"><span>负前瞻 (?!exp)</span></a></h2><p>负前瞻是一种负向查找，它用于查找匹配的内容后面必须不满足某个条件（exp）的情况。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例：</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查找后面不是123的abc</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc(?!123)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc1233&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc12&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;abc&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abcc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;abc&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="后顾-exp" tabindex="-1"><a class="header-anchor" href="#后顾-exp"><span>后顾 (?&lt;=exp)</span></a></h2><p>后顾是一种正向查找，它用于查找匹配的内容前面必须满足某个条件（exp）的情况。</p><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例：</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查找前面是abc的123</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=abc)123</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;123&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;kabc1234&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;123&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc12&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abcc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="负后顾-exp" tabindex="-1"><a class="header-anchor" href="#负后顾-exp"><span>负后顾 (?&lt;!exp)</span></a></h2><p>负后顾是一种负向查找，它用于查找匹配的内容前面必须不满足某个条件（exp）的情况。</p><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例：</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查找前面不是abc的123</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!abc)123</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;kabc1234&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ab1234&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;123&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abcc123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配结果：[&#39;123&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正则表达式的前瞻、负前瞻、后顾和负后顾是一些强大的技巧，用于在文本中查找特定的模式，</p><p>前瞻运算符在许多情况下都非常有用，其中一个明显的应用场景是校验密码强度。密码强度校验是确保用户创建安全密码的关键任务之一。通过使用前瞻运算符，我们可以更精确地定义密码规则，这比传统的正则表达式方式更为强大。</p><p>假设我们有以下密码规则：</p><ul><li>必须包含至少一个大写字母。</li><li>必须包含至少一个小写字母。</li><li>必须包含至少一个数字。</li><li>必须包含至少一个特殊字符（例如：!@#$）。</li><li>密码长度必须在 8 到 16 个字符之间。</li></ul><p>若使用前瞻运算符，我们可以更精确地定义密码规则，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>\\d<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token operator">!</span>@#\\$<span class="token operator">%</span><span class="token operator">^</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z\\d<span class="token operator">!</span>@#\\$<span class="token operator">%</span><span class="token operator">^</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">}</span>$<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个前瞻运算符的工作原理是：</p><ul><li><code>^</code>：这是正则表达式的开始锚点，它表示匹配必须从字符串的开头开始。</li><li><code>(?=.*[A-Z])</code> 这是一个前瞻运算符，用于检查密码中是否至少包含一个大写字母 <code>A-Z</code>。 如果是，则匹配成功，否则匹配失败。 &#39;._&#39; 表示匹配任何字符零次或多次。所以，<code>(?=._[A-Z])</code> 表示匹配任何包含至少一个大写字母的字符串。</li><li><code>(?=.*[a-z])</code> 这是另一个前瞻运算符，用于检查密码中是否至少包含一个小写字母 <code>a-z</code>。 如果是，则匹配成功，否则匹配失败。 &#39;._&#39; 表示匹配任何字符零次或多次。所以，<code>(?=._[a-z])</code> 表示匹配任何包含至少一个小写字母的字符串。</li><li><code>(?=.*\\d)</code>这是又一个前瞻运算符，用于检查密码中是否至少包含一个数字 <code>0-9</code>。 如果是，则匹配成功，否则匹配失败。 &#39;._&#39; 表示匹配任何字符零次或多次。所以，<code>(?=._\\d)</code> 表示匹配任何包含至少一个数字的字符串。</li><li><code>(?=.*[!@#\\$%^&amp;*])</code>这是另一个前瞻运算符，用于检查密码中是否至少包含一个特殊字符 <code>!@#\\$%^&amp;*</code>。 如果是，则匹配成功，否则匹配失败。 &#39;._&#39; 表示匹配任何字符零次或多次。所以，<code>(?=._[!@#\\$%^&amp;*])</code> 表示匹配任何包含至少一个特殊字符的字符串。</li><li><code>[A-Za-z\\d!@#\\$%^&amp;*]{8,16}</code>：这是密码的实际匹配部分。它表示密码必须包含大小写字母、数字和特殊字符，且长度必须在 8 到 16 个字符之间。</li><li><code>$</code>：这是正则表达式的结束锚点，它表示匹配必须在字符串的结尾结束。</li></ul>`,28);function m(g,h){const a=e("ExternalLinkIcon");return p(),o("div",null,[s("p",null,[n("在逛"),u,n("的时候，发现一个很有意思的"),r,n(),s("a",k,[n("userhjp/datav-react"),c(a)])]),d])}const b=t(i,[["render",m],["__file","正则表达式的前瞻、负前瞻、后顾和负后顾.html.vue"]]),E=JSON.parse(`{"path":"/posts/javascript/regx/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%89%8D%E7%9E%BB%E3%80%81%E8%B4%9F%E5%89%8D%E7%9E%BB%E3%80%81%E5%90%8E%E9%A1%BE%E5%92%8C%E8%B4%9F%E5%90%8E%E9%A1%BE.html","title":"正则表达式的前瞻、负前瞻、后顾和负后顾","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2024-09-04T00:00:00.000Z","author":"h7ml","title":"正则表达式的前瞻、负前瞻、后顾和负后顾","description":"正则表达式的前瞻、负前瞻、后顾和负后顾","footer":"<a href='https://beian.mit.gov.cn/' target='blank'>浙ICP备2021037683号-2</a>正则表达式的前瞻、负前瞻、后顾和负后顾","star":1,"image":"https://www.h7ml.cn/logo.png","banner":"https://www.h7ml.cn/logo.png","shortTitle":"正则表达式的前瞻、负前瞻、后顾和负后顾","category":["javascript"],"tag":["javascript"],"head":[["meta",{"name":"keywords","content":"正则表达式的前瞻、负前瞻、后顾和负后顾"}],["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/regx/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%89%8D%E7%9E%BB%E3%80%81%E8%B4%9F%E5%89%8D%E7%9E%BB%E3%80%81%E5%90%8E%E9%A1%BE%E5%92%8C%E8%B4%9F%E5%90%8E%E9%A1%BE.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/regx/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%89%8D%E7%9E%BB%E3%80%81%E8%B4%9F%E5%89%8D%E7%9E%BB%E3%80%81%E5%90%8E%E9%A1%BE%E5%92%8C%E8%B4%9F%E5%90%8E%E9%A1%BE.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"正则表达式的前瞻、负前瞻、后顾和负后顾"}],["meta",{"property":"og:description","content":"正则表达式的前瞻、负前瞻、后顾和负后顾"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-04T23:54:19.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.h7ml.cn/logo.png"}],["meta",{"name":"twitter:image:alt","content":"正则表达式的前瞻、负前瞻、后顾和负后顾"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2024-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-04T23:54:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式的前瞻、负前瞻、后顾和负后顾\\",\\"image\\":[\\"https://www.h7ml.cn/logo.png\\"],\\"datePublished\\":\\"2024-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-04T23:54:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"前瞻 (?=exp)","slug":"前瞻-exp","link":"#前瞻-exp","children":[{"level":3,"title":"示例：","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"负前瞻 (?!exp)","slug":"负前瞻-exp","link":"#负前瞻-exp","children":[{"level":3,"title":"示例：","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"后顾 (?<=exp)","slug":"后顾-exp","link":"#后顾-exp","children":[{"level":3,"title":"示例：","slug":"示例-2","link":"#示例-2","children":[]}]},{"level":2,"title":"负后顾 (?<!exp)","slug":"负后顾-exp","link":"#负后顾-exp","children":[{"level":3,"title":"示例：","slug":"示例-3","link":"#示例-3","children":[]}]}],"git":{"createdTime":1693837419000,"updatedTime":1693871659000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":2}]},"readingTime":{"minutes":4.82,"words":1445},"filePathRelative":"posts/javascript/regx/正则表达式的前瞻、负前瞻、后顾和负后顾.md","localizedDate":"2024年9月4日","excerpt":"<p>在逛<code>github</code>的时候，发现一个很有意思的<code>utils</code> <a href=\\"https://github.com/userhjp/datav-react/blob/main/src/examples/widgets/echarts/pie/RosePie/preview.tsx#L34\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">userhjp/datav-react</a></p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">formatNumber</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>num<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">(?=(\\\\B)(\\\\d{3})+$)</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">g</span></span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> num<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">','</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}`);export{b as comp,E as data};
