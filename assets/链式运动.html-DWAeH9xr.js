import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Cbix2SPG.js";const p={},o=t(`<h1 id="javascript-链式运动-动画" tabindex="-1"><a class="header-anchor" href="#javascript-链式运动-动画"><span>JavaScript 链式运动-动画</span></a></h1><p>缓动运动框架</p><p>每次的步长 = （总路程 - 当前位置） / 运动系数（6-10）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> attr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> el<span class="token punctuation">.</span>currentStyle <span class="token operator">?</span> el<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bufferMove</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// fn就是回调函数</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>

  el<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否所有属性都到达目标值，如果有一个属性没有到目标值，就将 flag 设置为 false。如果全部都到了目标值，那么 flag 就不会被改变为 false，就是初始 true</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断 attr 是不是 opacity，是：采用一种获取办法，不是：采用之前的获取方法</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">&#39;opacity&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">-</span> cur<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
      step <span class="token operator">=</span> step <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// if(cur == obj[attr]){</span>
      <span class="token comment">//  clearInterval(el.timer);</span>
      <span class="token comment">// }</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果有一个当前值，不等于目标值，说明没有全部执行完成</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 赋值时也分两种情况，一种是透明度，另一种是带有单位 px 的</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">&#39;opacity&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token punctuation">(</span>cur <span class="token operator">+</span> step<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">&#39;alpha(opacity=&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cur <span class="token operator">+</span> step<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> cur <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果 flag 为假，说明没有全部属性达到目标值，那么不清除定时器，如果 flag 为 true 说明全部属性都达到了目标值，就清除定时器</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// fn &amp;&amp; fn();</span>
      <span class="token comment">// 回调函数的 this 指向 window，当该运动框架适用于元素集合时，this 执行导致报错</span>

      <span class="token comment">// if(fn) fn();</span>
      <span class="token comment">// 改 call 就是修改函数的调用时的 this 指向</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","链式运动.html.vue"]]),d=JSON.parse(`{"path":"/posts/javascript/animation/%E9%93%BE%E5%BC%8F%E8%BF%90%E5%8A%A8.html","title":"JavaScript 链式运动-动画","lang":"zh-CN","frontmatter":{"description":"JavaScript 链式运动-动画 缓动运动框架 每次的步长 = （总路程 - 当前位置） / 运动系数（6-10）","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/animation/%E9%93%BE%E5%BC%8F%E8%BF%90%E5%8A%A8.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/animation/%E9%93%BE%E5%BC%8F%E8%BF%90%E5%8A%A8.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 链式运动-动画"}],["meta",{"property":"og:description","content":"JavaScript 链式运动-动画 缓动运动框架 每次的步长 = （总路程 - 当前位置） / 运动系数（6-10）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 链式运动-动画\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\",\\"url\\":\\"https://www.h7ml.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":1.3,"words":390},"filePathRelative":"posts/javascript/animation/链式运动.md","localizedDate":"2023年5月3日","excerpt":"\\n<p>缓动运动框架</p>\\n<p>每次的步长 = （总路程 - 当前位置） / 运动系数（6-10）</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">getStyle</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">el<span class=\\"token punctuation\\">,</span> attr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> el<span class=\\"token punctuation\\">.</span>currentStyle <span class=\\"token operator\\">?</span> el<span class=\\"token punctuation\\">.</span>currentStyle<span class=\\"token punctuation\\">[</span>attr<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">getComputedStyle</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span>attr<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">bufferMove</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">el<span class=\\"token punctuation\\">,</span> obj<span class=\\"token punctuation\\">,</span> fn</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// fn就是回调函数</span>\\n  <span class=\\"token function\\">clearInterval</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>timer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  el<span class=\\"token punctuation\\">.</span>timer <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setInterval</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">var</span> flag <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 判断是否所有属性都到达目标值，如果有一个属性没有到目标值，就将 flag 设置为 false。如果全部都到了目标值，那么 flag 就不会被改变为 false，就是初始 true</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">var</span> attr <span class=\\"token keyword\\">in</span> obj<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 判断 attr 是不是 opacity，是：采用一种获取办法，不是：采用之前的获取方法</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>attr <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'opacity'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">var</span> cur <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">round</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getStyle</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> attr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">var</span> cur <span class=\\"token operator\\">=</span> <span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getStyle</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> attr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">var</span> step <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">[</span>attr<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">-</span> cur<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n      step <span class=\\"token operator\\">=</span> step <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ceil</span><span class=\\"token punctuation\\">(</span>step<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>step<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// if(cur == obj[attr]){</span>\\n      <span class=\\"token comment\\">//  clearInterval(el.timer);</span>\\n      <span class=\\"token comment\\">// }</span>\\n\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cur <span class=\\"token operator\\">!=</span> obj<span class=\\"token punctuation\\">[</span>attr<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 如果有一个当前值，不等于目标值，说明没有全部执行完成</span>\\n        flag <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token comment\\">// 赋值时也分两种情况，一种是透明度，另一种是带有单位 px 的</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>attr <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'opacity'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        el<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>opacity <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>cur <span class=\\"token operator\\">+</span> step<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n        el<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>filter <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'alpha(opacity='</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>cur <span class=\\"token operator\\">+</span> step<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">')'</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        el<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">[</span>attr<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> cur <span class=\\"token operator\\">+</span> step <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'px'</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>flag<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 如果 flag 为假，说明没有全部属性达到目标值，那么不清除定时器，如果 flag 为 true 说明全部属性都达到了目标值，就清除定时器</span>\\n      <span class=\\"token function\\">clearInterval</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>timer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// fn &amp;&amp; fn();</span>\\n      <span class=\\"token comment\\">// 回调函数的 this 指向 window，当该运动框架适用于元素集合时，this 执行导致报错</span>\\n\\n      <span class=\\"token comment\\">// if(fn) fn();</span>\\n      <span class=\\"token comment\\">// 改 call 就是修改函数的调用时的 this 指向</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>fn<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{r as comp,d as data};
